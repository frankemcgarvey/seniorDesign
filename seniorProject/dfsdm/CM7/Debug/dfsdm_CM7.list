
dfsdm_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd4  08006fd4  00020528  2**0
                  CONTENTS
  4 .ARM          00000000  08006fd4  08006fd4  00020528  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fd4  08006fd4  00020528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000528  24000000  08006fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052ec  24000528  08007504  00020528  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005814  08007504  00025814  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032b2e  00000000  00000000  00020556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350f  00000000  00000000  00053084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00056598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000575d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a3b3  00000000  00000000  000585b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f14  00000000  00000000  00092963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e7ab  00000000  00000000  000b9877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00238022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  00238078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000528 	.word	0x24000528
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006fa4 	.word	0x08006fa4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400052c 	.word	0x2400052c
 80002d4:	08006fa4 	.word	0x08006fa4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <FIR_Filter_Init>:
 *      Author: Chris
 */

#include "dsp.h"

void FIR_Filter_Init(dsp_buffer_t* buff, float *coeff){
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af02      	add	r7, sp, #8
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	e019      	b.n	8000450 <FIR_Filter_Init+0x44>
		arm_fir_init_f32(&buff[i].Filter_inst, TAPS, &coeff[0], buff[i].state, PCM_CHUNK_SIZE);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f241 322c 	movw	r2, #4908	; 0x132c
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	4618      	mov	r0, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f241 322c 	movw	r2, #4908	; 0x132c
 8000432:	fb02 f303 	mul.w	r3, r2, r3
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	330c      	adds	r3, #12
 800043c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000440:	9200      	str	r2, [sp, #0]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	21c9      	movs	r1, #201	; 0xc9
 8000446:	f006 fbd7 	bl	8006bf8 <arm_fir_init_f32>
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d9e2      	bls.n	800041c <FIR_Filter_Init+0x10>
	}
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <Clean>:

#include "helper.h"
#include "stm32h7xx_hal.h"


void Clean(uint32_t *buffer, uint32_t byte){
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)&buffer[0], byte);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	617a      	str	r2, [r7, #20]
 8000470:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b00      	cmp	r3, #0
 8000476:	dd1d      	ble.n	80004b4 <Clean+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f003 021f 	and.w	r2, r3, #31
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	4413      	add	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000488:	f3bf 8f4f 	dsb	sy
}
 800048c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800048e:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <Clean+0x64>)
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	3320      	adds	r3, #32
 800049a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3b20      	subs	r3, #32
 80004a0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dcf2      	bgt.n	800048e <Clean+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 80004a8:	f3bf 8f4f 	dsb	sy
}
 80004ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ae:	f3bf 8f6f 	isb	sy
}
 80004b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80004b4:	bf00      	nop
}
 80004b6:	bf00      	nop
 80004b8:	371c      	adds	r7, #28
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <main+0xcc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d11b      	bne.n	8000512 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80004da:	f3bf 8f4f 	dsb	sy
}
 80004de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004e0:	f3bf 8f6f 	isb	sy
}
 80004e4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <main+0xcc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004ee:	f3bf 8f4f 	dsb	sy
}
 80004f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f4:	f3bf 8f6f 	isb	sy
}
 80004f8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <main+0xcc>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a25      	ldr	r2, [pc, #148]	; (8000594 <main+0xcc>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000506:	f3bf 8f4f 	dsb	sy
}
 800050a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050c:	f3bf 8f6f 	isb	sy
}
 8000510:	e000      	b.n	8000514 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000512:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <main+0xcc>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13b      	bne.n	8000598 <main+0xd0>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <main+0xcc>)
 8000522:	2200      	movs	r2, #0
 8000524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <main+0xcc>)
 8000530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000534:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	0b5b      	lsrs	r3, r3, #13
 800053a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800053e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000548:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	015a      	lsls	r2, r3, #5
 800054e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000552:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000558:	490e      	ldr	r1, [pc, #56]	; (8000594 <main+0xcc>)
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1ef      	bne.n	800054a <main+0x82>
    } while(sets-- != 0U);
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1e5a      	subs	r2, r3, #1
 800056e:	60ba      	str	r2, [r7, #8]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1e5      	bne.n	8000540 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <main+0xcc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <main+0xcc>)
 8000580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000584:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
}
 800058a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800058c:	f3bf 8f6f 	isb	sy
}
 8000590:	e003      	b.n	800059a <main+0xd2>
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000598:	bf00      	nop
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 f943 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f94b 	bl	8000838 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005a2:	4b96      	ldr	r3, [pc, #600]	; (80007fc <main+0x334>)
 80005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a8:	4a94      	ldr	r2, [pc, #592]	; (80007fc <main+0x334>)
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b2:	4b92      	ldr	r3, [pc, #584]	; (80007fc <main+0x334>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f004 fa91 	bl	8004ae8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f004 faa7 	bl	8004b1c <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fb95 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 fb4b 	bl	8000c6c <MX_DMA_Init>
  MX_DFSDM1_Init();
 80005d6:	f000 f9b3 	bl	8000940 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  channelFlag.topLeftChannelFlag		= NONE;
 80005da:	4b89      	ldr	r3, [pc, #548]	; (8000800 <main+0x338>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  channelFlag.bottomLeftChannelFlag 	= NONE;
 80005e0:	4b87      	ldr	r3, [pc, #540]	; (8000800 <main+0x338>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	709a      	strb	r2, [r3, #2]
  channelFlag.bottomRightChannelFlag 	= NONE;
 80005e6:	4b86      	ldr	r3, [pc, #536]	; (8000800 <main+0x338>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	70da      	strb	r2, [r3, #3]

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005ec:	4b85      	ldr	r3, [pc, #532]	; (8000804 <main+0x33c>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a84      	ldr	r2, [pc, #528]	; (8000804 <main+0x33c>)
 80005f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f6:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55;
 80005f8:	4b83      	ldr	r3, [pc, #524]	; (8000808 <main+0x340>)
 80005fa:	4a84      	ldr	r2, [pc, #528]	; (800080c <main+0x344>)
 80005fc:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8000600:	4b81      	ldr	r3, [pc, #516]	; (8000808 <main+0x340>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000606:	4b80      	ldr	r3, [pc, #512]	; (8000808 <main+0x340>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a7f      	ldr	r2, [pc, #508]	; (8000808 <main+0x340>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6013      	str	r3, [r2, #0]

  FIR_Filter_Init(&dsp[0], &coeff[0]);
 8000612:	497f      	ldr	r1, [pc, #508]	; (8000810 <main+0x348>)
 8000614:	487f      	ldr	r0, [pc, #508]	; (8000814 <main+0x34c>)
 8000616:	f7ff fef9 	bl	800040c <FIR_Filter_Init>

  static arm_biquad_cascade_stereo_df2T_instance_f32 S;
  static float state[2*STAGES];
  arm_biquad_cascade_stereo_df2T_init_f32(&S, STAGES, &coeff_iir[0], &state[0]);
 800061a:	4b7f      	ldr	r3, [pc, #508]	; (8000818 <main+0x350>)
 800061c:	4a7f      	ldr	r2, [pc, #508]	; (800081c <main+0x354>)
 800061e:	2119      	movs	r1, #25
 8000620:	487f      	ldr	r0, [pc, #508]	; (8000820 <main+0x358>)
 8000622:	f006 facd 	bl	8006bc0 <arm_biquad_cascade_stereo_df2T_init_f32>

//


//
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, &pcmBuffer->topRightChannel[0], 2*PCM_CHUNK_SIZE);
 8000626:	4b7f      	ldr	r3, [pc, #508]	; (8000824 <main+0x35c>)
 8000628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800062c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000630:	4619      	mov	r1, r3
 8000632:	487d      	ldr	r0, [pc, #500]	; (8000828 <main+0x360>)
 8000634:	f001 fce6 	bl	8002004 <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, &pcmBuffer->topLeftChannel[0], 2*PCM_CHUNK_SIZE);
 8000638:	4b7a      	ldr	r3, [pc, #488]	; (8000824 <main+0x35c>)
 800063a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063e:	4619      	mov	r1, r3
 8000640:	487a      	ldr	r0, [pc, #488]	; (800082c <main+0x364>)
 8000642:	f001 fcdf 	bl	8002004 <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, &pcmBuffer->bottomLeftChannel[0], 2*PCM_CHUNK_SIZE);
 8000646:	4b77      	ldr	r3, [pc, #476]	; (8000824 <main+0x35c>)
 8000648:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800064c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000650:	4619      	mov	r1, r3
 8000652:	4877      	ldr	r0, [pc, #476]	; (8000830 <main+0x368>)
 8000654:	f001 fcd6 	bl	8002004 <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &pcmBuffer->bottomRightChannel[0], 2*PCM_CHUNK_SIZE);
 8000658:	4b72      	ldr	r3, [pc, #456]	; (8000824 <main+0x35c>)
 800065a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800065e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000662:	4619      	mov	r1, r3
 8000664:	4873      	ldr	r0, [pc, #460]	; (8000834 <main+0x36c>)
 8000666:	f001 fccd 	bl	8002004 <HAL_DFSDM_FilterRegularStart_DMA>

  HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f001 f96b 	bl	8001948 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){

	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <main+0x338>)
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b01      	cmp	r3, #1
 800067a:	d15b      	bne.n	8000734 <main+0x26c>
 800067c:	4b60      	ldr	r3, [pc, #384]	; (8000800 <main+0x338>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	d156      	bne.n	8000734 <main+0x26c>
 8000686:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <main+0x338>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b01      	cmp	r3, #1
 800068e:	d151      	bne.n	8000734 <main+0x26c>
 8000690:	4b5b      	ldr	r3, [pc, #364]	; (8000800 <main+0x338>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b01      	cmp	r3, #1
 8000698:	d14c      	bne.n	8000734 <main+0x26c>
//		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag		= NONE;
 800069a:	4b59      	ldr	r3, [pc, #356]	; (8000800 <main+0x338>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		  channelFlag.topRightChannelFlag		= NONE;
 80006a0:	4b57      	ldr	r3, [pc, #348]	; (8000800 <main+0x338>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	705a      	strb	r2, [r3, #1]
		  channelFlag.bottomLeftChannelFlag 	= NONE;
 80006a6:	4b56      	ldr	r3, [pc, #344]	; (8000800 <main+0x338>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	709a      	strb	r2, [r3, #2]
		  channelFlag.bottomRightChannelFlag 	= NONE;
 80006ac:	4b54      	ldr	r3, [pc, #336]	; (8000800 <main+0x338>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]

		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomLeftChannel[0],  &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
 80006b2:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <main+0x35c>)
 80006b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80006b8:	4a5a      	ldr	r2, [pc, #360]	; (8000824 <main+0x35c>)
 80006ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80006be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fbc6 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomRightChannel[0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <main+0x35c>)
 80006ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80006ce:	4a55      	ldr	r2, [pc, #340]	; (8000824 <main+0x35c>)
 80006d0:	f502 4110 	add.w	r1, r2, #36864	; 0x9000
 80006d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fbbb 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->topLeftChannel[0], 	  &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
 80006de:	4b51      	ldr	r3, [pc, #324]	; (8000824 <main+0x35c>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <main+0x35c>)
 80006e4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80006e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ec:	4619      	mov	r1, r3
 80006ee:	f006 fbb1 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->topRightChannel[0], 	  &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);
 80006f2:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <main+0x35c>)
 80006f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80006f8:	4a4a      	ldr	r2, [pc, #296]	; (8000824 <main+0x35c>)
 80006fa:	f502 4130 	add.w	r1, r2, #45056	; 0xb000
 80006fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fba6 	bl	8006e54 <arm_q31_to_float>

		  //FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);

		 // arm_mat_trans_f32(&matrix_S2, &matrix_S0);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[0][0], CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8000708:	4b46      	ldr	r3, [pc, #280]	; (8000824 <main+0x35c>)
 800070a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800070e:	4a45      	ldr	r2, [pc, #276]	; (8000824 <main+0x35c>)
 8000710:	f502 31a0 	add.w	r1, r2, #81920	; 0x14000
 8000714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000718:	4618      	mov	r0, r3
 800071a:	f006 fa8d 	bl	8006c38 <arm_float_to_q15>

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 800071e:	4b41      	ldr	r3, [pc, #260]	; (8000824 <main+0x35c>)
 8000720:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fe99 	bl	8000460 <Clean>

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE7);
 800072e:	2007      	movs	r0, #7
 8000730:	f001 f93a 	bl	80019a8 <HAL_EXTI_GenerateSWInterrupt>
	  }

	  if(channelFlag.bottomLeftChannelFlag == FULL && channelFlag.bottomRightChannelFlag == FULL && channelFlag.topLeftChannelFlag == FULL && channelFlag.topRightChannelFlag == FULL){
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0x338>)
 8000736:	789b      	ldrb	r3, [r3, #2]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b02      	cmp	r3, #2
 800073c:	d199      	bne.n	8000672 <main+0x1aa>
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <main+0x338>)
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b02      	cmp	r3, #2
 8000746:	d194      	bne.n	8000672 <main+0x1aa>
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <main+0x338>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b02      	cmp	r3, #2
 8000750:	d18f      	bne.n	8000672 <main+0x1aa>
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <main+0x338>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b02      	cmp	r3, #2
 800075a:	d18a      	bne.n	8000672 <main+0x1aa>
//		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag		= NONE;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <main+0x338>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		  channelFlag.topRightChannelFlag       = NONE;
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x338>)
 8000764:	2200      	movs	r2, #0
 8000766:	705a      	strb	r2, [r3, #1]
		  channelFlag.bottomLeftChannelFlag 	= NONE;
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <main+0x338>)
 800076a:	2200      	movs	r2, #0
 800076c:	709a      	strb	r2, [r3, #2]
		  channelFlag.bottomRightChannelFlag 	= NONE;
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <main+0x338>)
 8000770:	2200      	movs	r2, #0
 8000772:	70da      	strb	r2, [r3, #3]

		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE],   &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0],   PCM_CHUNK_SIZE);
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <main+0x35c>)
 8000776:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <main+0x35c>)
 800077c:	f502 4140 	add.w	r1, r2, #49152	; 0xc000
 8000780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fb65 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE],  &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+1][0], PCM_CHUNK_SIZE);
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <main+0x35c>)
 800078c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000790:	4a24      	ldr	r2, [pc, #144]	; (8000824 <main+0x35c>)
 8000792:	f502 4150 	add.w	r1, r2, #53248	; 0xd000
 8000796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fb5a 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 	    &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+2][0], PCM_CHUNK_SIZE);
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <main+0x35c>)
 80007a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a6:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <main+0x35c>)
 80007a8:	f502 4160 	add.w	r1, r2, #57344	; 0xe000
 80007ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fb4f 	bl	8006e54 <arm_q31_to_float>
		  arm_q31_to_float((q31_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 	&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+3][0], PCM_CHUNK_SIZE);
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <main+0x35c>)
 80007b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <main+0x35c>)
 80007be:	f502 4170 	add.w	r1, r2, #61440	; 0xf000
 80007c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fb44 	bl	8006e54 <arm_q31_to_float>

//		  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0]);

//		  arm_mat_trans_f32(&matrix_S5, &matrix_S3);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <main+0x35c>)
 80007ce:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <main+0x35c>)
 80007d4:	f502 31b0 	add.w	r1, r2, #90112	; 0x16000
 80007d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fa2b 	bl	8006c38 <arm_float_to_q15>

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <main+0x35c>)
 80007e4:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
 80007e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe37 	bl	8000460 <Clean>

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE8);
 80007f2:	2008      	movs	r0, #8
 80007f4:	f001 f8d8 	bl	80019a8 <HAL_EXTI_GenerateSWInterrupt>
	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
 80007f8:	e73b      	b.n	8000672 <main+0x1aa>
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	24000544 	.word	0x24000544
 8000804:	e000edf0 	.word	0xe000edf0
 8000808:	e0001000 	.word	0xe0001000
 800080c:	c5acce55 	.word	0xc5acce55
 8000810:	24000008 	.word	0x24000008
 8000814:	24000548 	.word	0x24000548
 8000818:	24005204 	.word	0x24005204
 800081c:	2400032c 	.word	0x2400032c
 8000820:	240051f8 	.word	0x240051f8
 8000824:	30020000 	.word	0x30020000
 8000828:	24005680 	.word	0x24005680
 800082c:	240055b4 	.word	0x240055b4
 8000830:	2400574c 	.word	0x2400574c
 8000834:	240054b0 	.word	0x240054b0

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	; 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	224c      	movs	r2, #76	; 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fba4 	bl	8006f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fb9e 	bl	8006f94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000858:	2004      	movs	r0, #4
 800085a:	f004 f973 	bl	8004b44 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <SystemClock_Config+0xfc>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a33      	ldr	r2, [pc, #204]	; (8000934 <SystemClock_Config+0xfc>)
 8000868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <SystemClock_Config+0xfc>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <SystemClock_Config+0x100>)
 800087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087c:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <SystemClock_Config+0x100>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <SystemClock_Config+0x100>)
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xfc>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemClock_Config+0x104>)
 80008a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a4:	f023 0303 	bic.w	r3, r3, #3
 80008a8:	4a24      	ldr	r2, [pc, #144]	; (800093c <SystemClock_Config+0x104>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	2302      	movs	r3, #2
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008c6:	23f0      	movs	r3, #240	; 0xf0
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008d6:	2308      	movs	r3, #8
 80008d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008da:	2300      	movs	r3, #0
 80008dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 f986 	bl	8004bf8 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008f2:	f000 fbfd 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	233f      	movs	r3, #63	; 0x3f
 80008f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2303      	movs	r3, #3
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000902:	2308      	movs	r3, #8
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000906:	2340      	movs	r3, #64	; 0x40
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2104      	movs	r1, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fd7b 	bl	8005418 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000928:	f000 fbe2 	bl	80010f0 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3770      	adds	r7, #112	; 0x70
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024800 	.word	0x58024800
 8000938:	58000400 	.word	0x58000400
 800093c:	58024400 	.word	0x58024400

08000940 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000944:	4ba3      	ldr	r3, [pc, #652]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000946:	4aa4      	ldr	r2, [pc, #656]	; (8000bd8 <MX_DFSDM1_Init+0x298>)
 8000948:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800094a:	4ba2      	ldr	r3, [pc, #648]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000950:	4ba0      	ldr	r3, [pc, #640]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000952:	2201      	movs	r2, #1
 8000954:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000956:	4b9f      	ldr	r3, [pc, #636]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000958:	2201      	movs	r2, #1
 800095a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 800095c:	4b9d      	ldr	r3, [pc, #628]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 800095e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000962:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000964:	4b9b      	ldr	r3, [pc, #620]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800096a:	4b9a      	ldr	r3, [pc, #616]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 800096c:	2201      	movs	r2, #1
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000970:	4898      	ldr	r0, [pc, #608]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000972:	f001 fa25 	bl	8001dc0 <HAL_DFSDM_FilterInit>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800097c:	f000 fbb8 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000980:	4b96      	ldr	r3, [pc, #600]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 8000982:	4a97      	ldr	r2, [pc, #604]	; (8000be0 <MX_DFSDM1_Init+0x2a0>)
 8000984:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000986:	4b95      	ldr	r3, [pc, #596]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800098c:	4b93      	ldr	r3, [pc, #588]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 800098e:	2201      	movs	r2, #1
 8000990:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000992:	4b92      	ldr	r3, [pc, #584]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 8000994:	2201      	movs	r2, #1
 8000996:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000998:	4b90      	ldr	r3, [pc, #576]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 800099a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800099e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 80009a0:	4b8e      	ldr	r3, [pc, #568]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80009a6:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80009ac:	488b      	ldr	r0, [pc, #556]	; (8000bdc <MX_DFSDM1_Init+0x29c>)
 80009ae:	f001 fa07 	bl	8001dc0 <HAL_DFSDM_FilterInit>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_DFSDM1_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 fb9a 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 80009bc:	4b89      	ldr	r3, [pc, #548]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009be:	4a8a      	ldr	r2, [pc, #552]	; (8000be8 <MX_DFSDM1_Init+0x2a8>)
 80009c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009c2:	4b88      	ldr	r3, [pc, #544]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 80009c8:	4b86      	ldr	r3, [pc, #536]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 80009ce:	4b85      	ldr	r3, [pc, #532]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 80009d4:	4b83      	ldr	r3, [pc, #524]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009da:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
 80009dc:	4b81      	ldr	r3, [pc, #516]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 80009e2:	4b80      	ldr	r3, [pc, #512]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 80009e8:	487e      	ldr	r0, [pc, #504]	; (8000be4 <MX_DFSDM1_Init+0x2a4>)
 80009ea:	f001 f9e9 	bl	8001dc0 <HAL_DFSDM_FilterInit>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_DFSDM1_Init+0xb8>
  {
    Error_Handler();
 80009f4:	f000 fb7c 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 80009f8:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 80009fa:	4a7d      	ldr	r2, [pc, #500]	; (8000bf0 <MX_DFSDM1_Init+0x2b0>)
 80009fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009fe:	4b7b      	ldr	r3, [pc, #492]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
 8000a04:	4b79      	ldr	r3, [pc, #484]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = ENABLE;
 8000a0a:	4b78      	ldr	r3, [pc, #480]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000a10:	4b76      	ldr	r3, [pc, #472]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a16:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 64;
 8000a18:	4b74      	ldr	r3, [pc, #464]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 8000a1e:	4b73      	ldr	r3, [pc, #460]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 8000a24:	4871      	ldr	r0, [pc, #452]	; (8000bec <MX_DFSDM1_Init+0x2ac>)
 8000a26:	f001 f9cb 	bl	8001dc0 <HAL_DFSDM_FilterInit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_DFSDM1_Init+0xf4>
  {
    Error_Handler();
 8000a30:	f000 fb5e 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000a34:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a36:	4a70      	ldr	r2, [pc, #448]	; (8000bf8 <MX_DFSDM1_Init+0x2b8>)
 8000a38:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000a3a:	4b6e      	ldr	r3, [pc, #440]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000a40:	4b6c      	ldr	r3, [pc, #432]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a46:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 20;
 8000a48:	4b6a      	ldr	r3, [pc, #424]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a4a:	2214      	movs	r2, #20
 8000a4c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a4e:	4b69      	ldr	r3, [pc, #420]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a54:	4b67      	ldr	r3, [pc, #412]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a5a:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a60:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000a62:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a68:	4b62      	ldr	r3, [pc, #392]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a6e:	4b61      	ldr	r3, [pc, #388]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000a74:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 84000;
 8000a7a:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a7c:	4a5f      	ldr	r2, [pc, #380]	; (8000bfc <MX_DFSDM1_Init+0x2bc>)
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 2;
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000a86:	485b      	ldr	r0, [pc, #364]	; (8000bf4 <MX_DFSDM1_Init+0x2b4>)
 8000a88:	f001 f8be 	bl	8001c08 <HAL_DFSDM_ChannelInit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_DFSDM1_Init+0x156>
  {
    Error_Handler();
 8000a92:	f000 fb2d 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a96:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000a98:	4a5a      	ldr	r2, [pc, #360]	; (8000c04 <MX_DFSDM1_Init+0x2c4>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000aa2:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
 8000aaa:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000aac:	2214      	movs	r2, #20
 8000aae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ab0:	4b53      	ldr	r3, [pc, #332]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000abc:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 84000;
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000adc:	4a47      	ldr	r2, [pc, #284]	; (8000bfc <MX_DFSDM1_Init+0x2bc>)
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 2;
 8000ae0:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ae6:	4846      	ldr	r0, [pc, #280]	; (8000c00 <MX_DFSDM1_Init+0x2c0>)
 8000ae8:	f001 f88e 	bl	8001c08 <HAL_DFSDM_ChannelInit>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_DFSDM1_Init+0x1b6>
  {
    Error_Handler();
 8000af2:	f000 fafd 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000af6:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000af8:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <MX_DFSDM1_Init+0x2cc>)
 8000afa:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000afc:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b08:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b22:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b2a:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 84000;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <MX_DFSDM1_Init+0x2bc>)
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 2;
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b48:	482f      	ldr	r0, [pc, #188]	; (8000c08 <MX_DFSDM1_Init+0x2c8>)
 8000b4a:	f001 f85d 	bl	8001c08 <HAL_DFSDM_ChannelInit>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_DFSDM1_Init+0x218>
  {
    Error_Handler();
 8000b54:	f000 facc 	bl	80010f0 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <MX_DFSDM1_Init+0x2d4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 20;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b6e:	2214      	movs	r2, #20
 8000b70:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 84000;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_DFSDM1_Init+0x2bc>)
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 2;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000ba8:	4819      	ldr	r0, [pc, #100]	; (8000c10 <MX_DFSDM1_Init+0x2d0>)
 8000baa:	f001 f82d 	bl	8001c08 <HAL_DFSDM_ChannelInit>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DFSDM1_Init+0x278>
  {
    Error_Handler();
 8000bb4:	f000 fa9c 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_DFSDM1_Init+0x294>)
 8000bbe:	f001 f9db 	bl	8001f78 <HAL_DFSDM_FilterConfigRegChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DFSDM1_Init+0x28c>
  {
    Error_Handler();
 8000bc8:	f000 fa92 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <MX_DFSDM1_Init+0x2d8>)
 8000bd0:	e024      	b.n	8000c1c <MX_DFSDM1_Init+0x2dc>
 8000bd2:	bf00      	nop
 8000bd4:	240054b0 	.word	0x240054b0
 8000bd8:	40017100 	.word	0x40017100
 8000bdc:	2400574c 	.word	0x2400574c
 8000be0:	40017180 	.word	0x40017180
 8000be4:	240055b4 	.word	0x240055b4
 8000be8:	40017200 	.word	0x40017200
 8000bec:	24005680 	.word	0x24005680
 8000bf0:	40017280 	.word	0x40017280
 8000bf4:	240057a0 	.word	0x240057a0
 8000bf8:	40017000 	.word	0x40017000
 8000bfc:	00014820 	.word	0x00014820
 8000c00:	240052f8 	.word	0x240052f8
 8000c04:	40017020 	.word	0x40017020
 8000c08:	240057d8 	.word	0x240057d8
 8000c0c:	40017040 	.word	0x40017040
 8000c10:	24005504 	.word	0x24005504
 8000c14:	40017060 	.word	0x40017060
 8000c18:	00010002 	.word	0x00010002
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <MX_DFSDM1_Init+0x318>)
 8000c1e:	f001 f9ab 	bl	8001f78 <HAL_DFSDM_FilterConfigRegChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_DFSDM1_Init+0x2ec>
  {
    Error_Handler();
 8000c28:	f000 fa62 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	490b      	ldr	r1, [pc, #44]	; (8000c5c <MX_DFSDM1_Init+0x31c>)
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_DFSDM1_Init+0x320>)
 8000c32:	f001 f9a1 	bl	8001f78 <HAL_DFSDM_FilterConfigRegChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_DFSDM1_Init+0x300>
  {
    Error_Handler();
 8000c3c:	f000 fa58 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c40:	2201      	movs	r2, #1
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <MX_DFSDM1_Init+0x324>)
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_DFSDM1_Init+0x328>)
 8000c46:	f001 f997 	bl	8001f78 <HAL_DFSDM_FilterConfigRegChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_DFSDM1_Init+0x314>
  {
    Error_Handler();
 8000c50:	f000 fa4e 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2400574c 	.word	0x2400574c
 8000c5c:	00020004 	.word	0x00020004
 8000c60:	240055b4 	.word	0x240055b4
 8000c64:	00030008 	.word	0x00030008
 8000c68:	24005680 	.word	0x24005680

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_DMA_Init+0x8c>)
 8000ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	200b      	movs	r0, #11
 8000cb4:	f000 ff73 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cb8:	200b      	movs	r0, #11
 8000cba:	f000 ff8a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	200c      	movs	r0, #12
 8000cc4:	f000 ff6b 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cc8:	200c      	movs	r0, #12
 8000cca:	f000 ff82 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	200d      	movs	r0, #13
 8000cd4:	f000 ff63 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cd8:	200d      	movs	r0, #13
 8000cda:	f000 ff7a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	200e      	movs	r0, #14
 8000ce4:	f000 ff5b 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce8:	200e      	movs	r0, #14
 8000cea:	f000 ff72 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58024400 	.word	0x58024400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x8c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b093      	sub	sp, #76	; 0x4c
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

		 if(hdfsdm_filter == &hdfsdm1_filter3){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d12c      	bne.n	8000df6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x6a>
			channelFlag.topRightChannelFlag 	= HALF;
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	705a      	strb	r2, [r3, #1]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[0], 4*PCM_CHUNK_SIZE);
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8000da4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f340 80a9 	ble.w	8000f0a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dba:	f003 021f 	and.w	r2, r3, #31
 8000dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc0:	4413      	add	r3, r2
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
}
 8000dcc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dce:	4a58      	ldr	r2, [pc, #352]	; (8000f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8000dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd8:	3320      	adds	r3, #32
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dde:	3b20      	subs	r3, #32
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dcf2      	bgt.n	8000dce <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
}
 8000df4:	e089      	b.n	8000f0a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17e>
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d129      	bne.n	8000e52 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc6>
			channelFlag.topLeftChannelFlag 	= HALF;
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[0], 4*PCM_CHUNK_SIZE);
 8000e04:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd7c      	ble.n	8000f0e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x182>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e16:	f003 021f 	and.w	r2, r3, #31
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	4413      	add	r3, r2
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000e24:	f3bf 8f4f 	dsb	sy
}
 8000e28:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e2a:	4a41      	ldr	r2, [pc, #260]	; (8000f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	3320      	adds	r3, #32
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3a:	3b20      	subs	r3, #32
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dcf2      	bgt.n	8000e2a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x9e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e44:	f3bf 8f4f 	dsb	sy
}
 8000e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4a:	f3bf 8f6f 	isb	sy
}
 8000e4e:	bf00      	nop
}
 8000e50:	e05d      	b.n	8000f0e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x182>
	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a38      	ldr	r2, [pc, #224]	; (8000f38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x126>
			channelFlag.bottomLeftChannelFlag 	= HALF;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	709a      	strb	r2, [r3, #2]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[0], 4*PCM_CHUNK_SIZE);
 8000e60:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8000e62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd4e      	ble.n	8000f12 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x186>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	f003 021f 	and.w	r2, r3, #31
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e84:	f3bf 8f4f 	dsb	sy
}
 8000e88:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e8a:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	3320      	adds	r3, #32
 8000e96:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	3b20      	subs	r3, #32
 8000e9c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dcf2      	bgt.n	8000e8a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfe>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea4:	f3bf 8f4f 	dsb	sy
}
 8000ea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eaa:	f3bf 8f6f 	isb	sy
}
 8000eae:	bf00      	nop
}
 8000eb0:	e02f      	b.n	8000f12 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x186>
	}
	else{
			channelFlag.bottomRightChannelFlag 	= HALF;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	70da      	strb	r2, [r3, #3]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[0], 4*PCM_CHUNK_SIZE);
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 8000eba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dd24      	ble.n	8000f16 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 021f 	and.w	r2, r3, #31
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3320      	adds	r3, #32
 8000eee:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b20      	subs	r3, #32
 8000ef4:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dcf2      	bgt.n	8000ee2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x156>
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f02:	f3bf 8f6f 	isb	sy
}
 8000f06:	bf00      	nop
}
 8000f08:	e005      	b.n	8000f16 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18a>
 8000f0a:	bf00      	nop
 8000f0c:	e004      	b.n	8000f18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 8000f16:	bf00      	nop
	}

}
 8000f18:	bf00      	nop
 8000f1a:	374c      	adds	r7, #76	; 0x4c
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	24005680 	.word	0x24005680
 8000f28:	24000544 	.word	0x24000544
 8000f2c:	30020000 	.word	0x30020000
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	240055b4 	.word	0x240055b4
 8000f38:	2400574c 	.word	0x2400574c

08000f3c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b093      	sub	sp, #76	; 0x4c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

		 if(hdfsdm_filter == &hdfsdm1_filter3){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a64      	ldr	r2, [pc, #400]	; (80010d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d12c      	bne.n	8000fa6 <HAL_DFSDM_FilterRegConvCpltCallback+0x6a>
			channelFlag.topRightChannelFlag = FULL;
 8000f4c:	4b63      	ldr	r3, [pc, #396]	; (80010dc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	705a      	strb	r2, [r3, #1]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 8000f54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f340 80ab 	ble.w	80010be <HAL_DFSDM_FilterRegConvCpltCallback+0x182>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6a:	f003 021f 	and.w	r2, r3, #31
 8000f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f70:	4413      	add	r3, r2
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000f78:	f3bf 8f4f 	dsb	sy
}
 8000f7c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f7e:	4a59      	ldr	r2, [pc, #356]	; (80010e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8000f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f82:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f88:	3320      	adds	r3, #32
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8e:	3b20      	subs	r3, #32
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dcf2      	bgt.n	8000f7e <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
}
 8000fa4:	e08b      	b.n	80010be <HAL_DFSDM_FilterRegConvCpltCallback+0x182>
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12b      	bne.n	8001006 <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
			channelFlag.topLeftChannelFlag 	= FULL;
 8000fae:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 8000fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dd7c      	ble.n	80010c2 <HAL_DFSDM_FilterRegConvCpltCallback+0x186>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	f003 021f 	and.w	r2, r3, #31
 8000fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd0:	4413      	add	r3, r2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd8:	f3bf 8f4f 	dsb	sy
}
 8000fdc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fde:	4a41      	ldr	r2, [pc, #260]	; (80010e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	3320      	adds	r3, #32
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fee:	3b20      	subs	r3, #32
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dcf2      	bgt.n	8000fde <HAL_DFSDM_FilterRegConvCpltCallback+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff8:	f3bf 8f4f 	dsb	sy
}
 8000ffc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffe:	f3bf 8f6f 	isb	sy
}
 8001002:	bf00      	nop
}
 8001004:	e05d      	b.n	80010c2 <HAL_DFSDM_FilterRegConvCpltCallback+0x186>

	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HAL_DFSDM_FilterRegConvCpltCallback+0x1b0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_DFSDM_FilterRegConvCpltCallback+0x12a>
			channelFlag.bottomLeftChannelFlag 	= FULL;
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001010:	2202      	movs	r2, #2
 8001012:	709a      	strb	r2, [r3, #2]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 8001016:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd4e      	ble.n	80010c6 <HAL_DFSDM_FilterRegConvCpltCallback+0x18a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	f003 021f 	and.w	r2, r3, #31
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	3320      	adds	r3, #32
 800104a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	3b20      	subs	r3, #32
 8001050:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	2b00      	cmp	r3, #0
 8001056:	dcf2      	bgt.n	800103e <HAL_DFSDM_FilterRegConvCpltCallback+0x102>
  __ASM volatile ("dsb 0xF":::"memory");
 8001058:	f3bf 8f4f 	dsb	sy
}
 800105c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800105e:	f3bf 8f6f 	isb	sy
}
 8001062:	bf00      	nop
}
 8001064:	e02f      	b.n	80010c6 <HAL_DFSDM_FilterRegConvCpltCallback+0x18a>
	}
	else{
			channelFlag.bottomRightChannelFlag 	= FULL;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001068:	2202      	movs	r2, #2
 800106a:	70da      	strb	r2, [r3, #3]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 800106e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd24      	ble.n	80010ca <HAL_DFSDM_FilterRegConvCpltCallback+0x18e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 021f 	and.w	r2, r3, #31
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001090:	f3bf 8f4f 	dsb	sy
}
 8001094:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3320      	adds	r3, #32
 80010a2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3b20      	subs	r3, #32
 80010a8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dcf2      	bgt.n	8001096 <HAL_DFSDM_FilterRegConvCpltCallback+0x15a>
  __ASM volatile ("dsb 0xF":::"memory");
 80010b0:	f3bf 8f4f 	dsb	sy
}
 80010b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010b6:	f3bf 8f6f 	isb	sy
}
 80010ba:	bf00      	nop
}
 80010bc:	e005      	b.n	80010ca <HAL_DFSDM_FilterRegConvCpltCallback+0x18e>
 80010be:	bf00      	nop
 80010c0:	e004      	b.n	80010cc <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80010c2:	bf00      	nop
 80010c4:	e002      	b.n	80010cc <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80010c6:	bf00      	nop
 80010c8:	e000      	b.n	80010cc <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80010ca:	bf00      	nop
	}

}
 80010cc:	bf00      	nop
 80010ce:	374c      	adds	r7, #76	; 0x4c
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	24005680 	.word	0x24005680
 80010dc:	24000544 	.word	0x24000544
 80010e0:	30020000 	.word	0x30020000
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	240055b4 	.word	0x240055b4
 80010ec:	2400574c 	.word	0x2400574c

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_MspInit+0x34>)
 8001104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_MspInit+0x34>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_MspInit+0x34>)
 8001114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001120:	2004      	movs	r0, #4
 8001122:	f000 fd31 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58024400 	.word	0x58024400

08001134 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ba      	sub	sp, #232	; 0xe8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	22bc      	movs	r2, #188	; 0xbc
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 ff1d 	bl	8006f94 <memset>
  if(DFSDM1_Init == 0)
 800115a:	4bb4      	ldr	r3, [pc, #720]	; (800142c <HAL_DFSDM_FilterMspInit+0x2f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 80ca 	bne.w	80012f8 <HAL_DFSDM_FilterMspInit+0x1c4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001164:	4bb2      	ldr	r3, [pc, #712]	; (8001430 <HAL_DFSDM_FilterMspInit+0x2fc>)
 8001166:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001168:	2305      	movs	r3, #5
 800116a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 800116c:	23c0      	movs	r3, #192	; 0xc0
 800116e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001170:	2305      	movs	r3, #5
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001188:	2301      	movs	r3, #1
 800118a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fc6e 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_DFSDM_FilterMspInit+0x72>
    {
      Error_Handler();
 80011a2:	f7ff ffa5 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80011a6:	4ba3      	ldr	r3, [pc, #652]	; (8001434 <HAL_DFSDM_FilterMspInit+0x300>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4aa1      	ldr	r2, [pc, #644]	; (8001434 <HAL_DFSDM_FilterMspInit+0x300>)
 80011ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80011b0:	4ba0      	ldr	r3, [pc, #640]	; (8001434 <HAL_DFSDM_FilterMspInit+0x300>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10e      	bne.n	80011d6 <HAL_DFSDM_FilterMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80011b8:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011be:	4a9e      	ldr	r2, [pc, #632]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011c8:	4b9b      	ldr	r3, [pc, #620]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	4b98      	ldr	r3, [pc, #608]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a96      	ldr	r2, [pc, #600]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b90      	ldr	r3, [pc, #576]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a8f      	ldr	r2, [pc, #572]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a87      	ldr	r2, [pc, #540]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <HAL_DFSDM_FilterMspInit+0x304>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE4     ------> DFSDM1_DATIN3
    PB1     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001230:	2310      	movs	r3, #16
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001248:	2303      	movs	r3, #3
 800124a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001252:	4619      	mov	r1, r3
 8001254:	4879      	ldr	r0, [pc, #484]	; (800143c <HAL_DFSDM_FilterMspInit+0x308>)
 8001256:	f003 fa97 	bl	8004788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001272:	2306      	movs	r3, #6
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127c:	4619      	mov	r1, r3
 800127e:	4870      	ldr	r0, [pc, #448]	; (8001440 <HAL_DFSDM_FilterMspInit+0x30c>)
 8001280:	f003 fa82 	bl	8004788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001284:	2308      	movs	r3, #8
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4866      	ldr	r0, [pc, #408]	; (8001444 <HAL_DFSDM_FilterMspInit+0x310>)
 80012aa:	f003 fa6d 	bl	8004788 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	206e      	movs	r0, #110	; 0x6e
 80012b4:	f000 fc73 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80012b8:	206e      	movs	r0, #110	; 0x6e
 80012ba:	f000 fc8a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT1_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	206f      	movs	r0, #111	; 0x6f
 80012c4:	f000 fc6b 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT1_IRQn);
 80012c8:	206f      	movs	r0, #111	; 0x6f
 80012ca:	f000 fc82 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2070      	movs	r0, #112	; 0x70
 80012d4:	f000 fc63 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 80012d8:	2070      	movs	r0, #112	; 0x70
 80012da:	f000 fc7a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT3_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2071      	movs	r0, #113	; 0x71
 80012e4:	f000 fc5b 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT3_IRQn);
 80012e8:	2071      	movs	r0, #113	; 0x71
 80012ea:	f000 fc72 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012ee:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_DFSDM_FilterMspInit+0x2f8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_DFSDM_FilterMspInit+0x2f8>)
 80012f6:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_DFSDM_FilterMspInit+0x314>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d136      	bne.n	8001370 <HAL_DFSDM_FilterMspInit+0x23c>
    hdma_dfsdm1_flt0.Instance = DMA1_Stream0;
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_DFSDM_FilterMspInit+0x31c>)
 8001306:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800130a:	2265      	movs	r2, #101	; 0x65
 800130c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800131c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001320:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800132c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001330:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800133c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001340:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001348:	4840      	ldr	r0, [pc, #256]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800134a:	f001 f945 	bl	80025d8 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_DFSDM_FilterMspInit+0x224>
    {
      Error_Handler();
 8001354:	f7ff fecc 	bl	80010f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
 800135e:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a39      	ldr	r2, [pc, #228]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
 800136a:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_DFSDM_FilterMspInit+0x318>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a37      	ldr	r2, [pc, #220]	; (8001454 <HAL_DFSDM_FilterMspInit+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d136      	bne.n	80013e8 <HAL_DFSDM_FilterMspInit+0x2b4>
    hdma_dfsdm1_flt1.Instance = DMA1_Stream1;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 800137c:	4a37      	ldr	r2, [pc, #220]	; (800145c <HAL_DFSDM_FilterMspInit+0x328>)
 800137e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_DFSDM1_FLT1;
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 8001382:	2266      	movs	r2, #102	; 0x66
 8001384:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 800138c:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 8001394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001398:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 800139c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b8:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80013c0:	4825      	ldr	r0, [pc, #148]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013c2:	f001 f909 	bl	80025d8 <HAL_DMA_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_DFSDM_FilterMspInit+0x29c>
    {
      Error_Handler();
 80013cc:	f7ff fe90 	bl	80010f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_DFSDM_FilterMspInit+0x324>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_DFSDM_FilterMspInit+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d157      	bne.n	80014a2 <HAL_DFSDM_FilterMspInit+0x36e>
    hdma_dfsdm1_flt2.Instance = DMA1_Stream2;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_DFSDM_FilterMspInit+0x334>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 80013fa:	2267      	movs	r2, #103	; 0x67
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 800141c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001420:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_CIRCULAR;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_DFSDM_FilterMspInit+0x330>)
 8001424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001428:	61da      	str	r2, [r3, #28]
 800142a:	e01f      	b.n	800146c <HAL_DFSDM_FilterMspInit+0x338>
 800142c:	240052d0 	.word	0x240052d0
 8001430:	00200100 	.word	0x00200100
 8001434:	240052cc 	.word	0x240052cc
 8001438:	58024400 	.word	0x58024400
 800143c:	58021000 	.word	0x58021000
 8001440:	58020400 	.word	0x58020400
 8001444:	58020c00 	.word	0x58020c00
 8001448:	40017100 	.word	0x40017100
 800144c:	240056d4 	.word	0x240056d4
 8001450:	40020010 	.word	0x40020010
 8001454:	40017180 	.word	0x40017180
 8001458:	24005608 	.word	0x24005608
 800145c:	40020028 	.word	0x40020028
 8001460:	40017200 	.word	0x40017200
 8001464:	24005438 	.word	0x24005438
 8001468:	40020040 	.word	0x40020040
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 800146e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001472:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 800147a:	482a      	ldr	r0, [pc, #168]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 800147c:	f001 f8ac 	bl	80025d8 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DFSDM_FilterMspInit+0x356>
    {
      Error_Handler();
 8001486:	f7ff fe33 	bl	80010f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a25      	ldr	r2, [pc, #148]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001490:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_DFSDM_FilterMspInit+0x3f0>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT3 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_DFSDM_FilterMspInit+0x3f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d136      	bne.n	800151a <HAL_DFSDM_FilterMspInit+0x3e6>
    hdma_dfsdm1_flt3.Instance = DMA1_Stream3;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_DFSDM_FilterMspInit+0x3fc>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt3.Init.Request = DMA_REQUEST_DFSDM1_FLT3;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014b4:	2268      	movs	r2, #104	; 0x68
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt3.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014da:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt3.Init.Mode = DMA_CIRCULAR;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt3.Init.Priority = DMA_PRIORITY_HIGH;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ea:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt3) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 80014f4:	f001 f870 	bl	80025d8 <HAL_DMA_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_DFSDM_FilterMspInit+0x3ce>
    {
      Error_Handler();
 80014fe:	f7ff fdf7 	bl	80010f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt3);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt3);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800151a:	bf00      	nop
 800151c:	37e8      	adds	r7, #232	; 0xe8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24005438 	.word	0x24005438
 8001528:	40017280 	.word	0x40017280
 800152c:	240053c0 	.word	0x240053c0
 8001530:	40020058 	.word	0x40020058

08001534 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ba      	sub	sp, #232	; 0xe8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	22bc      	movs	r2, #188	; 0xbc
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fd1d 	bl	8006f94 <memset>
  if(DFSDM1_Init == 0)
 800155a:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_DFSDM_ChannelMspInit+0x18c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 80aa 	bne.w	80016b8 <HAL_DFSDM_ChannelMspInit+0x184>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001564:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <HAL_DFSDM_ChannelMspInit+0x190>)
 8001566:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001568:	2305      	movs	r3, #5
 800156a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001570:	2305      	movs	r3, #5
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001578:	2302      	movs	r3, #2
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001588:	2301      	movs	r3, #1
 800158a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fa6e 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_DFSDM_ChannelMspInit+0x72>
    {
      Error_Handler();
 80015a2:	f7ff fda5 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HAL_DFSDM_ChannelMspInit+0x194>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a46      	ldr	r2, [pc, #280]	; (80016c8 <HAL_DFSDM_ChannelMspInit+0x194>)
 80015ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80015b0:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <HAL_DFSDM_ChannelMspInit+0x194>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10e      	bne.n	80015d6 <HAL_DFSDM_ChannelMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015be:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a34      	ldr	r2, [pc, #208]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_DFSDM_ChannelMspInit+0x198>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE4     ------> DFSDM1_DATIN3
    PB1     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001630:	2310      	movs	r3, #16
 8001632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001652:	4619      	mov	r1, r3
 8001654:	481e      	ldr	r0, [pc, #120]	; (80016d0 <HAL_DFSDM_ChannelMspInit+0x19c>)
 8001656:	f003 f897 	bl	8004788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001672:	2306      	movs	r3, #6
 8001674:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800167c:	4619      	mov	r1, r3
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <HAL_DFSDM_ChannelMspInit+0x1a0>)
 8001680:	f003 f882 	bl	8004788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001684:	2308      	movs	r3, #8
 8001686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0x1a4>)
 80016aa:	f003 f86d 	bl	8004788 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_DFSDM_ChannelMspInit+0x18c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <HAL_DFSDM_ChannelMspInit+0x18c>)
 80016b6:	6013      	str	r3, [r2, #0]
  }

}
 80016b8:	bf00      	nop
 80016ba:	37e8      	adds	r7, #232	; 0xe8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	240052d0 	.word	0x240052d0
 80016c4:	00200100 	.word	0x00200100
 80016c8:	240052cc 	.word	0x240052cc
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58021000 	.word	0x58021000
 80016d4:	58020400 	.word	0x58020400
 80016d8:	58020c00 	.word	0x58020c00

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f8ee 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA1_Stream0_IRQHandler+0x10>)
 8001736:	f001 fd15 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	240056d4 	.word	0x240056d4

08001744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Stream1_IRQHandler+0x10>)
 800174a:	f001 fd0b 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24005608 	.word	0x24005608

08001758 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA1_Stream2_IRQHandler+0x10>)
 800175e:	f001 fd01 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24005438 	.word	0x24005438

0800176c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt3);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream3_IRQHandler+0x10>)
 8001772:	f001 fcf7 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	240053c0 	.word	0x240053c0

08001780 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001786:	f000 fcc1 	bl	800210c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	240054b0 	.word	0x240054b0

08001794 <DFSDM1_FLT1_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter1 global interrupt.
  */
void DFSDM1_FLT1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT1_IRQn 0 */

  /* USER CODE END DFSDM1_FLT1_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DFSDM1_FLT1_IRQHandler+0x10>)
 800179a:	f000 fcb7 	bl	800210c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT1_IRQn 1 */

  /* USER CODE END DFSDM1_FLT1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2400574c 	.word	0x2400574c

080017a8 <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DFSDM1_FLT2_IRQHandler+0x10>)
 80017ae:	f000 fcad 	bl	800210c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	240055b4 	.word	0x240055b4

080017bc <DFSDM1_FLT3_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter3 global interrupt.
  */
void DFSDM1_FLT3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT3_IRQn 0 */

  /* USER CODE END DFSDM1_FLT3_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter3);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DFSDM1_FLT3_IRQHandler+0x10>)
 80017c2:	f000 fca3 	bl	800210c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT3_IRQn 1 */

  /* USER CODE END DFSDM1_FLT3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24005680 	.word	0x24005680

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d4:	f7fe fd80 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f005 fba5 	bl	8006f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7fe fe61 	bl	80004c8 <main>
  bx  lr
 8001806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800180c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001810:	24000528 	.word	0x24000528
  ldr r2, =_sidata
 8001814:	08006fdc 	.word	0x08006fdc
  ldr r2, =_sbss
 8001818:	24000528 	.word	0x24000528
  ldr r4, =_ebss
 800181c:	24005814 	.word	0x24005814

08001820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC3_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f9ac 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001830:	f003 ffa8 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_Init+0x68>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	4913      	ldr	r1, [pc, #76]	; (8001890 <HAL_Init+0x6c>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_Init+0x68>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_Init+0x6c>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_Init+0x70>)
 8001866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x74>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f814 	bl	800189c <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e002      	b.n	8001884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800187e:	f7ff fc3d 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	58024400 	.word	0x58024400
 8001890:	08006fbc 	.word	0x08006fbc
 8001894:	24000004 	.word	0x24000004
 8001898:	24000000 	.word	0x24000000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_InitTick+0x60>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e021      	b.n	80018f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_InitTick+0x64>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_InitTick+0x60>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f991 	bl	8001bee <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f95b 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x68>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	24000524 	.word	0x24000524
 8001900:	24000000 	.word	0x24000000
 8001904:	24000520 	.word	0x24000520

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	24000524 	.word	0x24000524
 800192c:	24005810 	.word	0x24005810

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24005810 	.word	0x24005810

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	24000524 	.word	0x24000524

08001990 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetREVID+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0c1b      	lsrs	r3, r3, #16
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	5c001000 	.word	0x5c001000

080019a8 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80019b8:	4413      	add	r3, r2
 80019ba:	6819      	ldr	r1, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	0158      	lsls	r0, r3, #5
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80019ce:	4403      	add	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	ea41 0302 	orr.w	r3, r1, r2
 80019d6:	6003      	str	r3, [r0, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	58000008 	.word	0x58000008

080019e8 <__NVIC_SetPriorityGrouping>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	05fa0000 	.word	0x05fa0000

08001a30 <__NVIC_GetPriorityGrouping>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff40 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff90 	bl	8001adc <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5f 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff33 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa4 	bl	8001b44 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0b4      	b.n	8001d84 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <HAL_DFSDM_ChannelInit+0x184>)
 8001c1c:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_DFSDM_ChannelInit+0x188>)
 8001c20:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <HAL_DFSDM_ChannelInit+0x18c>)
 8001c24:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fc32 	bl	8002494 <DFSDM_GetChannelFromInstance>
 8001c30:	4603      	mov	r3, r0
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0a0      	b.n	8001d84 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fc76 	bl	8001534 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d125      	bne.n	8001ca6 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	791b      	ldrb	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001cb4:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cc4:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cca:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001d0a:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f002 0207 	and.w	r2, r2, #7
 8001d36:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d62:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fb8f 	bl	8002494 <DFSDM_GetChannelFromInstance>
 8001d76:	4603      	mov	r3, r0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	240052d4 	.word	0x240052d4
 8001d90:	240052d8 	.word	0x240052d8
 8001d94:	40017000 	.word	0x40017000

08001d98 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0c8      	b.n	8001f64 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8001dd2:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_DFSDM_FilterInit+0x1ac>)
 8001dd4:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d109      	bne.n	8001df4 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d003      	beq.n	8001df0 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b7      	b.n	8001f64 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff f991 	bl	8001134 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001e20:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7a1b      	ldrb	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7a5b      	ldrb	r3, [r3, #9]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_DFSDM_FilterInit+0x1b0>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d108      	bne.n	8001ea0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7c1b      	ldrb	r3, [r3, #16]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0210 	orr.w	r2, r2, #16
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0210 	bic.w	r2, r2, #16
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7c5b      	ldrb	r3, [r3, #17]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0220 	bic.w	r2, r2, #32
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6959      	ldr	r1, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_DFSDM_FilterInit+0x1b4>)
 8001f00:	400b      	ands	r3, r1
 8001f02:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6959      	ldr	r1, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001f16:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001f1e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7c1a      	ldrb	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40017100 	.word	0x40017100
 8001f70:	ffff80f7 	.word	0xffff80f7
 8001f74:	1c00ff00 	.word	0x1c00ff00

08001f78 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02c      	beq.n	8001fec <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001f98:	2bff      	cmp	r3, #255	; 0xff
 8001f9a:	d027      	beq.n	8001fec <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8001fa8:	400b      	ands	r3, r1
 8001faa:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10d      	bne.n	8001fce <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e00a      	b.n	8001fe4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fea:	e001      	b.n	8001ff0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	f8fbffff 	.word	0xf8fbffff

08002004 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	e066      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002034:	d002      	beq.n	800203c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
 800203a:	e05b      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10e      	bne.n	8002062 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d002      	beq.n	8002062 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
 8002060:	e048      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d102      	bne.n	8002084 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
 8002082:	e037      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d004      	beq.n	8002098 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002094:	2b03      	cmp	r3, #3
 8002096:	d12b      	bne.n	80020f0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80020a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80020ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b2:	d101      	bne.n	80020b8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 80020b6:	e000      	b.n	80020ba <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80020b8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	331c      	adds	r3, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f000 fdde 	bl	8002c90 <HAL_DMA_Start_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80020e6:	e005      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa1f 	bl	800252c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80020ee:	e001      	b.n	80020f4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08002455 	.word	0x08002455
 8002104:	08002471 	.word	0x08002471
 8002108:	08002439 	.word	0x08002439

0800210c <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  const DFSDM_Filter_TypeDef   *filter0Instance;
  uint32_t channelNumber;

  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61fb      	str	r3, [r7, #28]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
    channelHandleTable = a_dfsdm2ChannelHandle;
    filter0Instance    = DFSDM2_Filter0;
    channelNumber      = DFSDM2_CHANNEL_NUMBER;
  }
#else /* DFSDM2_Channel0 */
  channelHandleTable = a_dfsdm1ChannelHandle;
 8002124:	4b9e      	ldr	r3, [pc, #632]	; (80023a0 <HAL_DFSDM_IRQHandler+0x294>)
 8002126:	617b      	str	r3, [r7, #20]
  filter0Instance    = DFSDM1_Filter0;
 8002128:	4b9e      	ldr	r3, [pc, #632]	; (80023a4 <HAL_DFSDM_IRQHandler+0x298>)
 800212a:	613b      	str	r3, [r7, #16]
  channelNumber      = DFSDM1_CHANNEL_NUMBER;
 800212c:	2308      	movs	r3, #8
 800212e:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check if overrun occurs during regular conversion */
  if(((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00f      	beq.n	800215a <HAL_DFSDM_IRQHandler+0x4e>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 0308 	and.w	r3, r3, #8
  if(((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_DFSDM_IRQHandler+0x4e>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2208      	movs	r2, #8
 800214a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f966 	bl	8002424 <HAL_DFSDM_FilterErrorCallback>
 8002158:	e149      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00f      	beq.n	8002184 <HAL_DFSDM_IRQHandler+0x78>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f003 0304 	and.w	r3, r3, #4
  else if(((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_DFSDM_IRQHandler+0x78>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f951 	bl	8002424 <HAL_DFSDM_FilterErrorCallback>
 8002182:	e134      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if end of regular conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d025      	beq.n	80021da <HAL_DFSDM_IRQHandler+0xce>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0302 	and.w	r3, r3, #2
  else if(((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_DFSDM_IRQHandler+0xce>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fecf 	bl	8000f3c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8122 	bne.w	80023ec <HAL_DFSDM_IRQHandler+0x2e0>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 811d 	bne.w	80023ec <HAL_DFSDM_IRQHandler+0x2e0>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0202 	bic.w	r2, r2, #2
 80021c0:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d101      	bne.n	80021d0 <HAL_DFSDM_IRQHandler+0xc4>
 80021cc:	2201      	movs	r2, #1
 80021ce:	e000      	b.n	80021d2 <HAL_DFSDM_IRQHandler+0xc6>
 80021d0:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80021d8:	e108      	b.n	80023ec <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if end of injected conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d034      	beq.n	800224e <HAL_DFSDM_IRQHandler+0x142>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0301 	and.w	r3, r3, #1
  else if(((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02f      	beq.n	800224e <HAL_DFSDM_IRQHandler+0x142>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f902 	bl	80023f8 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	649a      	str	r2, [r3, #72]	; 0x48
    if(hdfsdm_filter->InjConvRemaining == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 80f3 	bne.w	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
    {
      /* End of conversion if trigger is software */
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	2b00      	cmp	r3, #0
 800220e:	d112      	bne.n	8002236 <HAL_DFSDM_IRQHandler+0x12a>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8002226:	2b03      	cmp	r3, #3
 8002228:	d101      	bne.n	800222e <HAL_DFSDM_IRQHandler+0x122>
 800222a:	2201      	movs	r2, #1
 800222c:	e000      	b.n	8002230 <HAL_DFSDM_IRQHandler+0x124>
 800222e:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_DFSDM_IRQHandler+0x13a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	e000      	b.n	8002248 <HAL_DFSDM_IRQHandler+0x13c>
 8002246:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6493      	str	r3, [r2, #72]	; 0x48
    if(hdfsdm_filter->InjConvRemaining == 0U)
 800224c:	e0cf      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
    }
  }
  /* Check if analog watchdog occurs */
  else if(((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d03f      	beq.n	80022d8 <HAL_DFSDM_IRQHandler+0x1cc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 0310 	and.w	r3, r3, #16
  else if(((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03a      	beq.n	80022d8 <HAL_DFSDM_IRQHandler+0x1cc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_DFSDM_IRQHandler+0x16e>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_DFSDM_IRQHandler+0x170>
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
    if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_DFSDM_IRQHandler+0x18c>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
    }
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 800228a:	e005      	b.n	8002298 <HAL_DFSDM_IRQHandler+0x18c>
    {
      channel++;
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	3301      	adds	r3, #1
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
      reg = reg >> 1;
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_DFSDM_IRQHandler+0x1a0>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ef      	bcc.n	800228c <HAL_DFSDM_IRQHandler+0x180>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_DFSDM_IRQHandler+0x1b2>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	3308      	adds	r3, #8
 80022b6:	2201      	movs	r2, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	e003      	b.n	80022c6 <HAL_DFSDM_IRQHandler+0x1ba>
 80022be:	2201      	movs	r2, #1
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f89b 	bl	800240c <HAL_DFSDM_FilterAwdCallback>
  {
 80022d6:	e08a      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if clock absence occurs */
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d145      	bne.n	800236e <HAL_DFSDM_IRQHandler+0x262>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d040      	beq.n	800236e <HAL_DFSDM_IRQHandler+0x262>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d03b      	beq.n	800236e <HAL_DFSDM_IRQHandler+0x262>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (channel < channelNumber)
 8002306:	e02d      	b.n	8002364 <HAL_DFSDM_IRQHandler+0x258>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (channelHandleTable[channel] != NULL))
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d022      	beq.n	8002358 <HAL_DFSDM_IRQHandler+0x24c>
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4413      	add	r3, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_DFSDM_IRQHandler+0x24c>
      {
        /* Check clock absence has been enabled for this channel */
        if ((channelHandleTable[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_DFSDM_IRQHandler+0x24c>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	f103 0210 	add.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          channelHandleTable[channel]->CkabCallback(channelHandleTable[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(channelHandleTable[channel]);
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fd20 	bl	8001d98 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	3301      	adds	r3, #1
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (channel < channelNumber)
 8002364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d3cd      	bcc.n	8002308 <HAL_DFSDM_IRQHandler+0x1fc>
  {
 800236c:	e03f      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
    }
  }
  /* Check if short circuit detection occurs */
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d13a      	bne.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 800237e:	2b00      	cmp	r3, #0
 8002380:	d035      	beq.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002388:	2b00      	cmp	r3, #0
 800238a:	d030      	beq.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0e1b      	lsrs	r3, r3, #24
 8002398:	b2db      	uxtb	r3, r3
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 800239c:	e00a      	b.n	80023b4 <HAL_DFSDM_IRQHandler+0x2a8>
 800239e:	bf00      	nop
 80023a0:	240052d8 	.word	0x240052d8
 80023a4:	40017100 	.word	0x40017100
    {
      channel++;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	3301      	adds	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <HAL_DFSDM_IRQHandler+0x2bc>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3ef      	bcc.n	80023a8 <HAL_DFSDM_IRQHandler+0x29c>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f103 0218 	add.w	r2, r3, #24
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    channelHandleTable[channel]->ScdCallback(channelHandleTable[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(channelHandleTable[channel]);
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4413      	add	r3, r2
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fce1 	bl	8001dac <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80023ea:	e000      	b.n	80023ee <HAL_DFSDM_IRQHandler+0x2e2>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023ec:	bf00      	nop
}
 80023ee:	bf00      	nop
 80023f0:	3738      	adds	r7, #56	; 0x38
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7fe fca0 	bl	8000d8c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7fe fd6a 	bl	8000f3c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2203      	movs	r2, #3
 8002482:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ffcd 	bl	8002424 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <DFSDM_GetChannelFromInstance+0x7c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d102      	bne.n	80024aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e02b      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <DFSDM_GetChannelFromInstance+0x80>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d102      	bne.n	80024b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e024      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <DFSDM_GetChannelFromInstance+0x84>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024c0:	2302      	movs	r3, #2
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e01d      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <DFSDM_GetChannelFromInstance+0x88>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d102      	bne.n	80024d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80024ce:	2303      	movs	r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e016      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <DFSDM_GetChannelFromInstance+0x8c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d102      	bne.n	80024e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80024dc:	2304      	movs	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e00f      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <DFSDM_GetChannelFromInstance+0x90>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d102      	bne.n	80024f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80024ea:	2305      	movs	r3, #5
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e008      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <DFSDM_GetChannelFromInstance+0x94>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80024f8:	2306      	movs	r3, #6
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e001      	b.n	8002502 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80024fe:	2307      	movs	r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40017000 	.word	0x40017000
 8002514:	40017020 	.word	0x40017020
 8002518:	40017040 	.word	0x40017040
 800251c:	40017060 	.word	0x40017060
 8002520:	40017080 	.word	0x40017080
 8002524:	400170a0 	.word	0x400170a0
 8002528:	400170c0 	.word	0x400170c0

0800252c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d108      	bne.n	800254e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e033      	b.n	80025b6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800256c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002584:	2b03      	cmp	r3, #3
 8002586:	d116      	bne.n	80025b6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0202 	orr.w	r2, r2, #2
 800259e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <DFSDM_RegConvStart+0x84>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	e000      	b.n	80025b2 <DFSDM_RegConvStart+0x86>
 80025b0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <DFSDM_RegConvStart+0x98>
 80025c0:	2202      	movs	r2, #2
 80025c2:	e000      	b.n	80025c6 <DFSDM_RegConvStart+0x9a>
 80025c4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff f9a6 	bl	8001930 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e316      	b.n	8002c1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a66      	ldr	r2, [pc, #408]	; (8002790 <HAL_DMA_Init+0x1b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_DMA_Init+0x1bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_DMA_Init+0x1c0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a62      	ldr	r2, [pc, #392]	; (800279c <HAL_DMA_Init+0x1c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <HAL_DMA_Init+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5f      	ldr	r2, [pc, #380]	; (80027a4 <HAL_DMA_Init+0x1cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5d      	ldr	r2, [pc, #372]	; (80027a8 <HAL_DMA_Init+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5c      	ldr	r2, [pc, #368]	; (80027ac <HAL_DMA_Init+0x1d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5a      	ldr	r2, [pc, #360]	; (80027b0 <HAL_DMA_Init+0x1d8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_DMA_Init+0x1dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_DMA_Init+0x1e0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_DMA_Init+0x1e4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a54      	ldr	r2, [pc, #336]	; (80027c0 <HAL_DMA_Init+0x1e8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a53      	ldr	r2, [pc, #332]	; (80027c4 <HAL_DMA_Init+0x1ec>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_DMA_Init+0x1f0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Init+0xb8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_DMA_Init+0x1f4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Init+0xbc>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Init+0xbe>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 813b 	beq.w	8002912 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a37      	ldr	r2, [pc, #220]	; (8002790 <HAL_DMA_Init+0x1b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d04a      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a36      	ldr	r2, [pc, #216]	; (8002794 <HAL_DMA_Init+0x1bc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d045      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a34      	ldr	r2, [pc, #208]	; (8002798 <HAL_DMA_Init+0x1c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_DMA_Init+0x1c4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03b      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_DMA_Init+0x1c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a30      	ldr	r2, [pc, #192]	; (80027a4 <HAL_DMA_Init+0x1cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <HAL_DMA_Init+0x1d0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02c      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_DMA_Init+0x1d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d027      	beq.n	800274c <HAL_DMA_Init+0x174>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_DMA_Init+0x1d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Init+0x174>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <HAL_DMA_Init+0x1dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Init+0x174>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_DMA_Init+0x1e0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Init+0x174>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_DMA_Init+0x1e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Init+0x174>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_DMA_Init+0x1e8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Init+0x174>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <HAL_DMA_Init+0x1ec>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Init+0x174>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_DMA_Init+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Init+0x174>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_DMA_Init+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <HAL_DMA_Init+0x186>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e007      	b.n	800276e <HAL_DMA_Init+0x196>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800276e:	e02f      	b.n	80027d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002770:	f7ff f8de 	bl	8001930 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d928      	bls.n	80027d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e246      	b.n	8002c1e <HAL_DMA_Init+0x646>
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1c8      	bne.n	8002770 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_DMA_Init+0x420>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80027f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4313      	orrs	r3, r2
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002834:	4b71      	ldr	r3, [pc, #452]	; (80029fc <HAL_DMA_Init+0x424>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b71      	ldr	r3, [pc, #452]	; (8002a00 <HAL_DMA_Init+0x428>)
 800283a:	4013      	ands	r3, r2
 800283c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002840:	d328      	bcc.n	8002894 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b28      	cmp	r3, #40	; 0x28
 8002848:	d903      	bls.n	8002852 <HAL_DMA_Init+0x27a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b2e      	cmp	r3, #46	; 0x2e
 8002850:	d917      	bls.n	8002882 <HAL_DMA_Init+0x2aa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b3e      	cmp	r3, #62	; 0x3e
 8002858:	d903      	bls.n	8002862 <HAL_DMA_Init+0x28a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b42      	cmp	r3, #66	; 0x42
 8002860:	d90f      	bls.n	8002882 <HAL_DMA_Init+0x2aa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b46      	cmp	r3, #70	; 0x46
 8002868:	d903      	bls.n	8002872 <HAL_DMA_Init+0x29a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b48      	cmp	r3, #72	; 0x48
 8002870:	d907      	bls.n	8002882 <HAL_DMA_Init+0x2aa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b4e      	cmp	r3, #78	; 0x4e
 8002878:	d905      	bls.n	8002886 <HAL_DMA_Init+0x2ae>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b52      	cmp	r3, #82	; 0x52
 8002880:	d801      	bhi.n	8002886 <HAL_DMA_Init+0x2ae>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_DMA_Init+0x2b0>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002892:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d117      	bne.n	80028ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f001 fdcf 	bl	8004474 <DMA_CheckFifoParam>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e197      	b.n	8002c1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f001 fd0a 	bl	8004310 <DMA_CalcBaseAndBitshift>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	223f      	movs	r2, #63	; 0x3f
 800290a:	409a      	lsls	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e0cd      	b.n	8002aae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_DMA_Init+0x42c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <HAL_DMA_Init+0x430>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_DMA_Init+0x434>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_DMA_Init+0x438>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <HAL_DMA_Init+0x43c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a33      	ldr	r2, [pc, #204]	; (8002a18 <HAL_DMA_Init+0x440>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <HAL_DMA_Init+0x444>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_DMA_Init+0x38a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_DMA_Init+0x448>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Init+0x38e>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_DMA_Init+0x390>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8097 	beq.w	8002a9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_DMA_Init+0x42c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d021      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_DMA_Init+0x430>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01c      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_DMA_Init+0x434>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d017      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_DMA_Init+0x438>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d012      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_DMA_Init+0x43c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_DMA_Init+0x440>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d008      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_DMA_Init+0x444>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_Init+0x3e4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_DMA_Init+0x448>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_DMA_Init+0x44c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d020      	beq.n	8002a28 <HAL_DMA_Init+0x450>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d102      	bne.n	80029f4 <HAL_DMA_Init+0x41c>
 80029ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f2:	e01a      	b.n	8002a2a <HAL_DMA_Init+0x452>
 80029f4:	2300      	movs	r3, #0
 80029f6:	e018      	b.n	8002a2a <HAL_DMA_Init+0x452>
 80029f8:	fe10803f 	.word	0xfe10803f
 80029fc:	5c001000 	.word	0x5c001000
 8002a00:	ffff0000 	.word	0xffff0000
 8002a04:	58025408 	.word	0x58025408
 8002a08:	5802541c 	.word	0x5802541c
 8002a0c:	58025430 	.word	0x58025430
 8002a10:	58025444 	.word	0x58025444
 8002a14:	58025458 	.word	0x58025458
 8002a18:	5802546c 	.word	0x5802546c
 8002a1c:	58025480 	.word	0x58025480
 8002a20:	58025494 	.word	0x58025494
 8002a24:	fffe000f 	.word	0xfffe000f
 8002a28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68d2      	ldr	r2, [r2, #12]
 8002a2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <HAL_DMA_Init+0x650>)
 8002a70:	4413      	add	r3, r2
 8002a72:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <HAL_DMA_Init+0x654>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f001 fc45 	bl	8004310 <DMA_CalcBaseAndBitshift>
 8002a86:	4603      	mov	r3, r0
 8002a88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e008      	b.n	8002aae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0b7      	b.n	8002c1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <HAL_DMA_Init+0x658>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d072      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5d      	ldr	r2, [pc, #372]	; (8002c34 <HAL_DMA_Init+0x65c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d06d      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	; (8002c38 <HAL_DMA_Init+0x660>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d068      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	; (8002c3c <HAL_DMA_Init+0x664>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d063      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a59      	ldr	r2, [pc, #356]	; (8002c40 <HAL_DMA_Init+0x668>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d05e      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_DMA_Init+0x66c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d059      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a56      	ldr	r2, [pc, #344]	; (8002c48 <HAL_DMA_Init+0x670>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d054      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_DMA_Init+0x674>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04f      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_DMA_Init+0x678>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d04a      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <HAL_DMA_Init+0x67c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d045      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <HAL_DMA_Init+0x680>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d040      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a4e      	ldr	r2, [pc, #312]	; (8002c5c <HAL_DMA_Init+0x684>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d03b      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <HAL_DMA_Init+0x688>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d036      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_DMA_Init+0x68c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d031      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_DMA_Init+0x690>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d02c      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a48      	ldr	r2, [pc, #288]	; (8002c6c <HAL_DMA_Init+0x694>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d027      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a47      	ldr	r2, [pc, #284]	; (8002c70 <HAL_DMA_Init+0x698>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <HAL_DMA_Init+0x69c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01d      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a44      	ldr	r2, [pc, #272]	; (8002c78 <HAL_DMA_Init+0x6a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d018      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a42      	ldr	r2, [pc, #264]	; (8002c7c <HAL_DMA_Init+0x6a4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a41      	ldr	r2, [pc, #260]	; (8002c80 <HAL_DMA_Init+0x6a8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00e      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <HAL_DMA_Init+0x6ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <HAL_DMA_Init+0x6b0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_DMA_Init+0x5c6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3c      	ldr	r2, [pc, #240]	; (8002c8c <HAL_DMA_Init+0x6b4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_Init+0x5ca>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_Init+0x5cc>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d032      	beq.n	8002c0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 fcdf 	bl	800456c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d102      	bne.n	8002bbc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_DMA_Init+0x624>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d80c      	bhi.n	8002bfc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f001 fd5c 	bl	80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e008      	b.n	8002c0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	a7fdabf8 	.word	0xa7fdabf8
 8002c2c:	cccccccd 	.word	0xcccccccd
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
 8002c70:	58025408 	.word	0x58025408
 8002c74:	5802541c 	.word	0x5802541c
 8002c78:	58025430 	.word	0x58025430
 8002c7c:	58025444 	.word	0x58025444
 8002c80:	58025458 	.word	0x58025458
 8002c84:	5802546c 	.word	0x5802546c
 8002c88:	58025480 	.word	0x58025480
 8002c8c:	58025494 	.word	0x58025494

08002c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e226      	b.n	80030fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Start_IT+0x2a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e21f      	b.n	80030fa <HAL_DMA_Start_IT+0x46a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 820a 	bne.w	80030e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <HAL_DMA_Start_IT+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_DMA_Start_IT+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <HAL_DMA_Start_IT+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_DMA_Start_IT+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a62      	ldr	r2, [pc, #392]	; (8002e94 <HAL_DMA_Start_IT+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <HAL_DMA_Start_IT+0x208>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_DMA_Start_IT+0x20c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	; (8002ea0 <HAL_DMA_Start_IT+0x210>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <HAL_DMA_Start_IT+0x214>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <HAL_DMA_Start_IT+0x218>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a59      	ldr	r2, [pc, #356]	; (8002eac <HAL_DMA_Start_IT+0x21c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a57      	ldr	r2, [pc, #348]	; (8002eb0 <HAL_DMA_Start_IT+0x220>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_DMA_Start_IT+0x224>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_DMA_Start_IT+0x228>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a53      	ldr	r2, [pc, #332]	; (8002ebc <HAL_DMA_Start_IT+0x22c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_DMA_Start_IT+0x230>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_Start_IT+0x100>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_DMA_Start_IT+0x110>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f906 	bl	8003fb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_Start_IT+0x1f4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_Start_IT+0x1f8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_Start_IT+0x1fc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_Start_IT+0x200>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Start_IT+0x204>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_DMA_Start_IT+0x208>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_DMA_Start_IT+0x20c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_DMA_Start_IT+0x210>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_DMA_Start_IT+0x214>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_DMA_Start_IT+0x218>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_DMA_Start_IT+0x21c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_DMA_Start_IT+0x220>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_DMA_Start_IT+0x224>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_DMA_Start_IT+0x228>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_DMA_Start_IT+0x22c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_DMA_Start_IT+0x230>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_DMA_Start_IT+0x1c0>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_DMA_Start_IT+0x1c2>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 021e 	bic.w	r2, r3, #30
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0216 	orr.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03e      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0208 	orr.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e035      	b.n	8002ef0 <HAL_DMA_Start_IT+0x260>
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020e 	bic.w	r2, r3, #14
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 020a 	orr.w	r2, r2, #10
 8002ed6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0204 	orr.w	r2, r2, #4
 8002eee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	; (8003104 <HAL_DMA_Start_IT+0x474>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d072      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a82      	ldr	r2, [pc, #520]	; (8003108 <HAL_DMA_Start_IT+0x478>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d06d      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_DMA_Start_IT+0x47c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d068      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <HAL_DMA_Start_IT+0x480>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d063      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7d      	ldr	r2, [pc, #500]	; (8003114 <HAL_DMA_Start_IT+0x484>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d05e      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_DMA_Start_IT+0x488>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d059      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7a      	ldr	r2, [pc, #488]	; (800311c <HAL_DMA_Start_IT+0x48c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d054      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_DMA_Start_IT+0x490>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d04f      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_DMA_Start_IT+0x494>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d04a      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a76      	ldr	r2, [pc, #472]	; (8003128 <HAL_DMA_Start_IT+0x498>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d045      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a74      	ldr	r2, [pc, #464]	; (800312c <HAL_DMA_Start_IT+0x49c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d040      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_DMA_Start_IT+0x4a0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d03b      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a71      	ldr	r2, [pc, #452]	; (8003134 <HAL_DMA_Start_IT+0x4a4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d036      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a70      	ldr	r2, [pc, #448]	; (8003138 <HAL_DMA_Start_IT+0x4a8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d031      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_DMA_Start_IT+0x4ac>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02c      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6d      	ldr	r2, [pc, #436]	; (8003140 <HAL_DMA_Start_IT+0x4b0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d027      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6b      	ldr	r2, [pc, #428]	; (8003144 <HAL_DMA_Start_IT+0x4b4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <HAL_DMA_Start_IT+0x4b8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a68      	ldr	r2, [pc, #416]	; (800314c <HAL_DMA_Start_IT+0x4bc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_DMA_Start_IT+0x4c0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_DMA_Start_IT+0x4c4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a64      	ldr	r2, [pc, #400]	; (8003158 <HAL_DMA_Start_IT+0x4c8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a62      	ldr	r2, [pc, #392]	; (800315c <HAL_DMA_Start_IT+0x4cc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x350>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a61      	ldr	r2, [pc, #388]	; (8003160 <HAL_DMA_Start_IT+0x4d0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Start_IT+0x354>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_DMA_Start_IT+0x356>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003006:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_DMA_Start_IT+0x474>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a36      	ldr	r2, [pc, #216]	; (8003108 <HAL_DMA_Start_IT+0x478>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d045      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_DMA_Start_IT+0x47c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d040      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a33      	ldr	r2, [pc, #204]	; (8003110 <HAL_DMA_Start_IT+0x480>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d03b      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a31      	ldr	r2, [pc, #196]	; (8003114 <HAL_DMA_Start_IT+0x484>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d036      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a30      	ldr	r2, [pc, #192]	; (8003118 <HAL_DMA_Start_IT+0x488>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2e      	ldr	r2, [pc, #184]	; (800311c <HAL_DMA_Start_IT+0x48c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_DMA_Start_IT+0x490>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <HAL_DMA_Start_IT+0x494>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <HAL_DMA_Start_IT+0x498>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_DMA_Start_IT+0x49c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_DMA_Start_IT+0x4a0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <HAL_DMA_Start_IT+0x4a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a24      	ldr	r2, [pc, #144]	; (8003138 <HAL_DMA_Start_IT+0x4a8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_DMA_Start_IT+0x4ac>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_Start_IT+0x430>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <HAL_DMA_Start_IT+0x4b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <HAL_DMA_Start_IT+0x442>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e012      	b.n	80030f8 <HAL_DMA_Start_IT+0x468>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e009      	b.n	80030f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40020010 	.word	0x40020010
 8003108:	40020028 	.word	0x40020028
 800310c:	40020040 	.word	0x40020040
 8003110:	40020058 	.word	0x40020058
 8003114:	40020070 	.word	0x40020070
 8003118:	40020088 	.word	0x40020088
 800311c:	400200a0 	.word	0x400200a0
 8003120:	400200b8 	.word	0x400200b8
 8003124:	40020410 	.word	0x40020410
 8003128:	40020428 	.word	0x40020428
 800312c:	40020440 	.word	0x40020440
 8003130:	40020458 	.word	0x40020458
 8003134:	40020470 	.word	0x40020470
 8003138:	40020488 	.word	0x40020488
 800313c:	400204a0 	.word	0x400204a0
 8003140:	400204b8 	.word	0x400204b8
 8003144:	58025408 	.word	0x58025408
 8003148:	5802541c 	.word	0x5802541c
 800314c:	58025430 	.word	0x58025430
 8003150:	58025444 	.word	0x58025444
 8003154:	58025458 	.word	0x58025458
 8003158:	5802546c 	.word	0x5802546c
 800315c:	58025480 	.word	0x58025480
 8003160:	58025494 	.word	0x58025494

08003164 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003170:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_DMA_IRQHandler+0x1ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a67      	ldr	r2, [pc, #412]	; (8003314 <HAL_DMA_IRQHandler+0x1b0>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0a9b      	lsrs	r3, r3, #10
 800317c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5f      	ldr	r2, [pc, #380]	; (8003318 <HAL_DMA_IRQHandler+0x1b4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d04a      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5d      	ldr	r2, [pc, #372]	; (800331c <HAL_DMA_IRQHandler+0x1b8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d045      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_DMA_IRQHandler+0x1bc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d040      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_DMA_IRQHandler+0x1c0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d03b      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a59      	ldr	r2, [pc, #356]	; (8003328 <HAL_DMA_IRQHandler+0x1c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d036      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_DMA_IRQHandler+0x1c8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d031      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a56      	ldr	r2, [pc, #344]	; (8003330 <HAL_DMA_IRQHandler+0x1cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d02c      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_DMA_IRQHandler+0x1d0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d027      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_DMA_IRQHandler+0x1d4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_DMA_IRQHandler+0x1d8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01d      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_DMA_IRQHandler+0x1dc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d018      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <HAL_DMA_IRQHandler+0x1e0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a4d      	ldr	r2, [pc, #308]	; (8003348 <HAL_DMA_IRQHandler+0x1e4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_DMA_IRQHandler+0x1e8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_DMA_IRQHandler+0x1ec>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_DMA_IRQHandler+0xd2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a48      	ldr	r2, [pc, #288]	; (8003354 <HAL_DMA_IRQHandler+0x1f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_DMA_IRQHandler+0xd6>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_DMA_IRQHandler+0xd8>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 842b 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2208      	movs	r2, #8
 800324c:	409a      	lsls	r2, r3
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a2 	beq.w	800339c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <HAL_DMA_IRQHandler+0x1b4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_DMA_IRQHandler+0x1b8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <HAL_DMA_IRQHandler+0x1bc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <HAL_DMA_IRQHandler+0x1c0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_DMA_IRQHandler+0x1c4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <HAL_DMA_IRQHandler+0x1c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_DMA_IRQHandler+0x1cc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a24      	ldr	r2, [pc, #144]	; (8003334 <HAL_DMA_IRQHandler+0x1d0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <HAL_DMA_IRQHandler+0x1d4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_DMA_IRQHandler+0x1d8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <HAL_DMA_IRQHandler+0x1dc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_DMA_IRQHandler+0x1e0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_DMA_IRQHandler+0x1e4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_DMA_IRQHandler+0x1e8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_DMA_IRQHandler+0x1ec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x194>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_DMA_IRQHandler+0x1f0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d12f      	bne.n	8003358 <HAL_DMA_IRQHandler+0x1f4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e02e      	b.n	800336c <HAL_DMA_IRQHandler+0x208>
 800330e:	bf00      	nop
 8003310:	24000000 	.word	0x24000000
 8003314:	1b4e81b5 	.word	0x1b4e81b5
 8003318:	40020010 	.word	0x40020010
 800331c:	40020028 	.word	0x40020028
 8003320:	40020040 	.word	0x40020040
 8003324:	40020058 	.word	0x40020058
 8003328:	40020070 	.word	0x40020070
 800332c:	40020088 	.word	0x40020088
 8003330:	400200a0 	.word	0x400200a0
 8003334:	400200b8 	.word	0x400200b8
 8003338:	40020410 	.word	0x40020410
 800333c:	40020428 	.word	0x40020428
 8003340:	40020440 	.word	0x40020440
 8003344:	40020458 	.word	0x40020458
 8003348:	40020470 	.word	0x40020470
 800334c:	40020488 	.word	0x40020488
 8003350:	400204a0 	.word	0x400204a0
 8003354:	400204b8 	.word	0x400204b8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d06e      	beq.n	8003490 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a69      	ldr	r2, [pc, #420]	; (800355c <HAL_DMA_IRQHandler+0x3f8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a67      	ldr	r2, [pc, #412]	; (8003560 <HAL_DMA_IRQHandler+0x3fc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a66      	ldr	r2, [pc, #408]	; (8003564 <HAL_DMA_IRQHandler+0x400>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a64      	ldr	r2, [pc, #400]	; (8003568 <HAL_DMA_IRQHandler+0x404>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_DMA_IRQHandler+0x408>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a61      	ldr	r2, [pc, #388]	; (8003570 <HAL_DMA_IRQHandler+0x40c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a60      	ldr	r2, [pc, #384]	; (8003574 <HAL_DMA_IRQHandler+0x410>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_DMA_IRQHandler+0x414>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_DMA_IRQHandler+0x418>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5b      	ldr	r2, [pc, #364]	; (8003580 <HAL_DMA_IRQHandler+0x41c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_DMA_IRQHandler+0x420>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_DMA_IRQHandler+0x424>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a57      	ldr	r2, [pc, #348]	; (800358c <HAL_DMA_IRQHandler+0x428>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a55      	ldr	r2, [pc, #340]	; (8003590 <HAL_DMA_IRQHandler+0x42c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_DMA_IRQHandler+0x430>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2ee>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_DMA_IRQHandler+0x434>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10a      	bne.n	8003468 <HAL_DMA_IRQHandler+0x304>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e003      	b.n	8003470 <HAL_DMA_IRQHandler+0x30c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0202 	orr.w	r2, r3, #2
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808f 	beq.w	80035c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_DMA_IRQHandler+0x3f8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d04a      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_DMA_IRQHandler+0x3fc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d045      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_DMA_IRQHandler+0x400>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d040      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <HAL_DMA_IRQHandler+0x404>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d03b      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_DMA_IRQHandler+0x408>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d036      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_DMA_IRQHandler+0x40c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d031      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a23      	ldr	r2, [pc, #140]	; (8003574 <HAL_DMA_IRQHandler+0x410>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d02c      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_DMA_IRQHandler+0x414>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d027      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_DMA_IRQHandler+0x418>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_DMA_IRQHandler+0x41c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01d      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_DMA_IRQHandler+0x420>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d018      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_DMA_IRQHandler+0x424>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_DMA_IRQHandler+0x428>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_DMA_IRQHandler+0x42c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_DMA_IRQHandler+0x430>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_DMA_IRQHandler+0x3e2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <HAL_DMA_IRQHandler+0x434>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12a      	bne.n	800359c <HAL_DMA_IRQHandler+0x438>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e023      	b.n	80035a4 <HAL_DMA_IRQHandler+0x440>
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2204      	movs	r2, #4
 80035b2:	409a      	lsls	r2, r3
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	2210      	movs	r2, #16
 80035ce:	409a      	lsls	r2, r3
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a6 	beq.w	8003726 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a85      	ldr	r2, [pc, #532]	; (80037f4 <HAL_DMA_IRQHandler+0x690>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d04a      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a83      	ldr	r2, [pc, #524]	; (80037f8 <HAL_DMA_IRQHandler+0x694>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d045      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a82      	ldr	r2, [pc, #520]	; (80037fc <HAL_DMA_IRQHandler+0x698>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d040      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_DMA_IRQHandler+0x69c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d03b      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7f      	ldr	r2, [pc, #508]	; (8003804 <HAL_DMA_IRQHandler+0x6a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d036      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a7d      	ldr	r2, [pc, #500]	; (8003808 <HAL_DMA_IRQHandler+0x6a4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_DMA_IRQHandler+0x6a8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d02c      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7a      	ldr	r2, [pc, #488]	; (8003810 <HAL_DMA_IRQHandler+0x6ac>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d027      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a79      	ldr	r2, [pc, #484]	; (8003814 <HAL_DMA_IRQHandler+0x6b0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_DMA_IRQHandler+0x6b4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01d      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a76      	ldr	r2, [pc, #472]	; (800381c <HAL_DMA_IRQHandler+0x6b8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d018      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a74      	ldr	r2, [pc, #464]	; (8003820 <HAL_DMA_IRQHandler+0x6bc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a73      	ldr	r2, [pc, #460]	; (8003824 <HAL_DMA_IRQHandler+0x6c0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a71      	ldr	r2, [pc, #452]	; (8003828 <HAL_DMA_IRQHandler+0x6c4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a70      	ldr	r2, [pc, #448]	; (800382c <HAL_DMA_IRQHandler+0x6c8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_DMA_IRQHandler+0x516>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <HAL_DMA_IRQHandler+0x6cc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10a      	bne.n	8003690 <HAL_DMA_IRQHandler+0x52c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e009      	b.n	80036a4 <HAL_DMA_IRQHandler+0x540>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03e      	beq.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2210      	movs	r2, #16
 80036b2:	409a      	lsls	r2, r3
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d024      	beq.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
 80036e4:	e01f      	b.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01b      	beq.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
 80036f6:	e016      	b.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2220      	movs	r2, #32
 8003730:	409a      	lsls	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8110 	beq.w	800395c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <HAL_DMA_IRQHandler+0x690>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04a      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_DMA_IRQHandler+0x694>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d045      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_DMA_IRQHandler+0x698>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d040      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_DMA_IRQHandler+0x69c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d03b      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <HAL_DMA_IRQHandler+0x6a0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d036      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_DMA_IRQHandler+0x6a4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d031      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_DMA_IRQHandler+0x6a8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02c      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_DMA_IRQHandler+0x6ac>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d027      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <HAL_DMA_IRQHandler+0x6b0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d022      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_DMA_IRQHandler+0x6b4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d01d      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_DMA_IRQHandler+0x6b8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_DMA_IRQHandler+0x6bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_DMA_IRQHandler+0x6c0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_DMA_IRQHandler+0x6c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_DMA_IRQHandler+0x6c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_DMA_IRQHandler+0x678>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_DMA_IRQHandler+0x6cc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d12b      	bne.n	8003834 <HAL_DMA_IRQHandler+0x6d0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf14      	ite	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	2300      	moveq	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e02a      	b.n	8003848 <HAL_DMA_IRQHandler+0x6e4>
 80037f2:	bf00      	nop
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8087 	beq.w	800395c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2220      	movs	r2, #32
 8003858:	409a      	lsls	r2, r3
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b04      	cmp	r3, #4
 8003868:	d139      	bne.n	80038de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0216 	bic.w	r2, r2, #22
 8003878:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003888:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_DMA_IRQHandler+0x736>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0208 	bic.w	r2, r2, #8
 80038a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	223f      	movs	r2, #63	; 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 834a 	beq.w	8003f68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
          }
          return;
 80038dc:	e344      	b.n	8003f68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02c      	beq.n	800395c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e027      	b.n	800395c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e01e      	b.n	800395c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0210 	bic.w	r2, r2, #16
 800393a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8306 	beq.w	8003f72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8088 	beq.w	8003a84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2204      	movs	r2, #4
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7a      	ldr	r2, [pc, #488]	; (8003b6c <HAL_DMA_IRQHandler+0xa08>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a79      	ldr	r2, [pc, #484]	; (8003b70 <HAL_DMA_IRQHandler+0xa0c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a77      	ldr	r2, [pc, #476]	; (8003b74 <HAL_DMA_IRQHandler+0xa10>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a76      	ldr	r2, [pc, #472]	; (8003b78 <HAL_DMA_IRQHandler+0xa14>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a74      	ldr	r2, [pc, #464]	; (8003b7c <HAL_DMA_IRQHandler+0xa18>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a73      	ldr	r2, [pc, #460]	; (8003b80 <HAL_DMA_IRQHandler+0xa1c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a71      	ldr	r2, [pc, #452]	; (8003b84 <HAL_DMA_IRQHandler+0xa20>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a70      	ldr	r2, [pc, #448]	; (8003b88 <HAL_DMA_IRQHandler+0xa24>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_DMA_IRQHandler+0xa28>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6d      	ldr	r2, [pc, #436]	; (8003b90 <HAL_DMA_IRQHandler+0xa2c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6b      	ldr	r2, [pc, #428]	; (8003b94 <HAL_DMA_IRQHandler+0xa30>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_DMA_IRQHandler+0xa34>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_DMA_IRQHandler+0xa38>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a67      	ldr	r2, [pc, #412]	; (8003ba0 <HAL_DMA_IRQHandler+0xa3c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <HAL_DMA_IRQHandler+0xa40>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x8b8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a64      	ldr	r2, [pc, #400]	; (8003ba8 <HAL_DMA_IRQHandler+0xa44>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x8ca>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e007      	b.n	8003a3e <HAL_DMA_IRQHandler+0x8da>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d307      	bcc.n	8003a5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f2      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x8da>
 8003a58:	e000      	b.n	8003a5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a5a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2203      	movs	r2, #3
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a7a:	e003      	b.n	8003a84 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8272 	beq.w	8003f72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
 8003a96:	e26c      	b.n	8003f72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a43      	ldr	r2, [pc, #268]	; (8003bac <HAL_DMA_IRQHandler+0xa48>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <HAL_DMA_IRQHandler+0xa4c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <HAL_DMA_IRQHandler+0xa50>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3f      	ldr	r2, [pc, #252]	; (8003bb8 <HAL_DMA_IRQHandler+0xa54>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3d      	ldr	r2, [pc, #244]	; (8003bbc <HAL_DMA_IRQHandler+0xa58>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3c      	ldr	r2, [pc, #240]	; (8003bc0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_DMA_IRQHandler+0xa60>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x984>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_DMA_IRQHandler+0xa64>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_IRQHandler+0x988>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_DMA_IRQHandler+0x98a>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 823f 	beq.w	8003f72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2204      	movs	r2, #4
 8003b06:	409a      	lsls	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80cd 	beq.w	8003cac <HAL_DMA_IRQHandler+0xb48>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80c7 	beq.w	8003cac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2204      	movs	r2, #4
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d049      	beq.n	8003bcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8210 	beq.w	8003f6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b54:	e20a      	b.n	8003f6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8206 	beq.w	8003f6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b68:	e200      	b.n	8003f6c <HAL_DMA_IRQHandler+0xe08>
 8003b6a:	bf00      	nop
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	58025408 	.word	0x58025408
 8003bb0:	5802541c 	.word	0x5802541c
 8003bb4:	58025430 	.word	0x58025430
 8003bb8:	58025444 	.word	0x58025444
 8003bbc:	58025458 	.word	0x58025458
 8003bc0:	5802546c 	.word	0x5802546c
 8003bc4:	58025480 	.word	0x58025480
 8003bc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d160      	bne.n	8003c98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a8c      	ldr	r2, [pc, #560]	; (8003e0c <HAL_DMA_IRQHandler+0xca8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a8a      	ldr	r2, [pc, #552]	; (8003e10 <HAL_DMA_IRQHandler+0xcac>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a89      	ldr	r2, [pc, #548]	; (8003e14 <HAL_DMA_IRQHandler+0xcb0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <HAL_DMA_IRQHandler+0xcb4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a86      	ldr	r2, [pc, #536]	; (8003e1c <HAL_DMA_IRQHandler+0xcb8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a84      	ldr	r2, [pc, #528]	; (8003e20 <HAL_DMA_IRQHandler+0xcbc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a83      	ldr	r2, [pc, #524]	; (8003e24 <HAL_DMA_IRQHandler+0xcc0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a81      	ldr	r2, [pc, #516]	; (8003e28 <HAL_DMA_IRQHandler+0xcc4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a80      	ldr	r2, [pc, #512]	; (8003e2c <HAL_DMA_IRQHandler+0xcc8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_DMA_IRQHandler+0xccc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7d      	ldr	r2, [pc, #500]	; (8003e34 <HAL_DMA_IRQHandler+0xcd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a7b      	ldr	r2, [pc, #492]	; (8003e38 <HAL_DMA_IRQHandler+0xcd4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7a      	ldr	r2, [pc, #488]	; (8003e3c <HAL_DMA_IRQHandler+0xcd8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a78      	ldr	r2, [pc, #480]	; (8003e40 <HAL_DMA_IRQHandler+0xcdc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_DMA_IRQHandler+0xce0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xb12>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a75      	ldr	r2, [pc, #468]	; (8003e48 <HAL_DMA_IRQHandler+0xce4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <HAL_DMA_IRQHandler+0xb24>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0208 	bic.w	r2, r2, #8
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e007      	b.n	8003c98 <HAL_DMA_IRQHandler+0xb34>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0204 	bic.w	r2, r2, #4
 8003c96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8165 	beq.w	8003f6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003caa:	e15f      	b.n	8003f6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c5 	beq.w	8003e4c <HAL_DMA_IRQHandler+0xce8>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80bf 	beq.w	8003e4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 813a 	beq.w	8003f70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d04:	e134      	b.n	8003f70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8130 	beq.w	8003f70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d18:	e12a      	b.n	8003f70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d168      	bne.n	8003df6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_DMA_IRQHandler+0xca8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <HAL_DMA_IRQHandler+0xcac>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a35      	ldr	r2, [pc, #212]	; (8003e14 <HAL_DMA_IRQHandler+0xcb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_DMA_IRQHandler+0xcb4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <HAL_DMA_IRQHandler+0xcb8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <HAL_DMA_IRQHandler+0xcbc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <HAL_DMA_IRQHandler+0xcc0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <HAL_DMA_IRQHandler+0xcc4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_DMA_IRQHandler+0xcc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_DMA_IRQHandler+0xccc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <HAL_DMA_IRQHandler+0xcd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <HAL_DMA_IRQHandler+0xcd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_DMA_IRQHandler+0xcd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <HAL_DMA_IRQHandler+0xcdc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_DMA_IRQHandler+0xce0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xc60>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_DMA_IRQHandler+0xce4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d108      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0xc72>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0214 	bic.w	r2, r2, #20
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e007      	b.n	8003de6 <HAL_DMA_IRQHandler+0xc82>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 020a 	bic.w	r2, r2, #10
 8003de4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80b8 	beq.w	8003f70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e08:	e0b2      	b.n	8003f70 <HAL_DMA_IRQHandler+0xe0c>
 8003e0a:	bf00      	nop
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2208      	movs	r2, #8
 8003e56:	409a      	lsls	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8088 	beq.w	8003f72 <HAL_DMA_IRQHandler+0xe0e>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8082 	beq.w	8003f72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a41      	ldr	r2, [pc, #260]	; (8003f78 <HAL_DMA_IRQHandler+0xe14>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d04a      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_DMA_IRQHandler+0xe18>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d045      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3e      	ldr	r2, [pc, #248]	; (8003f80 <HAL_DMA_IRQHandler+0xe1c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d040      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <HAL_DMA_IRQHandler+0xe20>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d03b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_DMA_IRQHandler+0xe24>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d036      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a39      	ldr	r2, [pc, #228]	; (8003f8c <HAL_DMA_IRQHandler+0xe28>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_DMA_IRQHandler+0xe2c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d02c      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a36      	ldr	r2, [pc, #216]	; (8003f94 <HAL_DMA_IRQHandler+0xe30>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d027      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_DMA_IRQHandler+0xe34>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d022      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a33      	ldr	r2, [pc, #204]	; (8003f9c <HAL_DMA_IRQHandler+0xe38>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01d      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <HAL_DMA_IRQHandler+0xe3c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	; (8003fa4 <HAL_DMA_IRQHandler+0xe40>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <HAL_DMA_IRQHandler+0xe44>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <HAL_DMA_IRQHandler+0xe48>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_DMA_IRQHandler+0xe4c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdaa>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_DMA_IRQHandler+0xe50>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <HAL_DMA_IRQHandler+0xdbc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 021c 	bic.w	r2, r2, #28
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e007      	b.n	8003f30 <HAL_DMA_IRQHandler+0xdcc>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 020e 	bic.w	r2, r2, #14
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2201      	movs	r2, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
 8003f66:	e004      	b.n	8003f72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f72:	3728      	adds	r7, #40	; 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8

08003fb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a84      	ldr	r2, [pc, #528]	; (80041e8 <DMA_SetConfig+0x230>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d072      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a82      	ldr	r2, [pc, #520]	; (80041ec <DMA_SetConfig+0x234>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d06d      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a81      	ldr	r2, [pc, #516]	; (80041f0 <DMA_SetConfig+0x238>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d068      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7f      	ldr	r2, [pc, #508]	; (80041f4 <DMA_SetConfig+0x23c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d063      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7e      	ldr	r2, [pc, #504]	; (80041f8 <DMA_SetConfig+0x240>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d05e      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7c      	ldr	r2, [pc, #496]	; (80041fc <DMA_SetConfig+0x244>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d059      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7b      	ldr	r2, [pc, #492]	; (8004200 <DMA_SetConfig+0x248>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d054      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a79      	ldr	r2, [pc, #484]	; (8004204 <DMA_SetConfig+0x24c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04f      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a78      	ldr	r2, [pc, #480]	; (8004208 <DMA_SetConfig+0x250>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a76      	ldr	r2, [pc, #472]	; (800420c <DMA_SetConfig+0x254>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a75      	ldr	r2, [pc, #468]	; (8004210 <DMA_SetConfig+0x258>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a73      	ldr	r2, [pc, #460]	; (8004214 <DMA_SetConfig+0x25c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a72      	ldr	r2, [pc, #456]	; (8004218 <DMA_SetConfig+0x260>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a70      	ldr	r2, [pc, #448]	; (800421c <DMA_SetConfig+0x264>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6f      	ldr	r2, [pc, #444]	; (8004220 <DMA_SetConfig+0x268>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6d      	ldr	r2, [pc, #436]	; (8004224 <DMA_SetConfig+0x26c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6c      	ldr	r2, [pc, #432]	; (8004228 <DMA_SetConfig+0x270>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a6a      	ldr	r2, [pc, #424]	; (800422c <DMA_SetConfig+0x274>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <DMA_SetConfig+0x278>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a67      	ldr	r2, [pc, #412]	; (8004234 <DMA_SetConfig+0x27c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a66      	ldr	r2, [pc, #408]	; (8004238 <DMA_SetConfig+0x280>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a64      	ldr	r2, [pc, #400]	; (800423c <DMA_SetConfig+0x284>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <DMA_SetConfig+0x288>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <DMA_SetConfig+0x10a>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a61      	ldr	r2, [pc, #388]	; (8004244 <DMA_SetConfig+0x28c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <DMA_SetConfig+0x10e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <DMA_SetConfig+0x110>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <DMA_SetConfig+0x230>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d04a      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <DMA_SetConfig+0x234>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d045      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <DMA_SetConfig+0x238>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d040      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3a      	ldr	r2, [pc, #232]	; (80041f4 <DMA_SetConfig+0x23c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d03b      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <DMA_SetConfig+0x240>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d036      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a37      	ldr	r2, [pc, #220]	; (80041fc <DMA_SetConfig+0x244>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d031      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a35      	ldr	r2, [pc, #212]	; (8004200 <DMA_SetConfig+0x248>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02c      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <DMA_SetConfig+0x24c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d027      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a32      	ldr	r2, [pc, #200]	; (8004208 <DMA_SetConfig+0x250>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a31      	ldr	r2, [pc, #196]	; (800420c <DMA_SetConfig+0x254>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2f      	ldr	r2, [pc, #188]	; (8004210 <DMA_SetConfig+0x258>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <DMA_SetConfig+0x25c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <DMA_SetConfig+0x260>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <DMA_SetConfig+0x264>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <DMA_SetConfig+0x268>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <DMA_SetConfig+0x1d0>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a28      	ldr	r2, [pc, #160]	; (8004224 <DMA_SetConfig+0x26c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <DMA_SetConfig+0x1d4>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <DMA_SetConfig+0x1d6>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d05a      	beq.n	8004248 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	223f      	movs	r2, #63	; 0x3f
 800419c:	409a      	lsls	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d108      	bne.n	80041d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041d2:	e087      	b.n	80042e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
}
 80041e4:	e07e      	b.n	80042e4 <DMA_SetConfig+0x32c>
 80041e6:	bf00      	nop
 80041e8:	40020010 	.word	0x40020010
 80041ec:	40020028 	.word	0x40020028
 80041f0:	40020040 	.word	0x40020040
 80041f4:	40020058 	.word	0x40020058
 80041f8:	40020070 	.word	0x40020070
 80041fc:	40020088 	.word	0x40020088
 8004200:	400200a0 	.word	0x400200a0
 8004204:	400200b8 	.word	0x400200b8
 8004208:	40020410 	.word	0x40020410
 800420c:	40020428 	.word	0x40020428
 8004210:	40020440 	.word	0x40020440
 8004214:	40020458 	.word	0x40020458
 8004218:	40020470 	.word	0x40020470
 800421c:	40020488 	.word	0x40020488
 8004220:	400204a0 	.word	0x400204a0
 8004224:	400204b8 	.word	0x400204b8
 8004228:	58025408 	.word	0x58025408
 800422c:	5802541c 	.word	0x5802541c
 8004230:	58025430 	.word	0x58025430
 8004234:	58025444 	.word	0x58025444
 8004238:	58025458 	.word	0x58025458
 800423c:	5802546c 	.word	0x5802546c
 8004240:	58025480 	.word	0x58025480
 8004244:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <DMA_SetConfig+0x338>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <DMA_SetConfig+0x33c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01d      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <DMA_SetConfig+0x340>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <DMA_SetConfig+0x344>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <DMA_SetConfig+0x348>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <DMA_SetConfig+0x34c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <DMA_SetConfig+0x350>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <DMA_SetConfig+0x2e0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <DMA_SetConfig+0x354>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <DMA_SetConfig+0x2e4>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <DMA_SetConfig+0x2e6>
 800429c:	2300      	movs	r3, #0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d020      	beq.n	80042e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	409a      	lsls	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d108      	bne.n	80042d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	60da      	str	r2, [r3, #12]
}
 80042d2:	e007      	b.n	80042e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	58025408 	.word	0x58025408
 80042f4:	5802541c 	.word	0x5802541c
 80042f8:	58025430 	.word	0x58025430
 80042fc:	58025444 	.word	0x58025444
 8004300:	58025458 	.word	0x58025458
 8004304:	5802546c 	.word	0x5802546c
 8004308:	58025480 	.word	0x58025480
 800430c:	58025494 	.word	0x58025494

08004310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a42      	ldr	r2, [pc, #264]	; (8004428 <DMA_CalcBaseAndBitshift+0x118>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a41      	ldr	r2, [pc, #260]	; (800442c <DMA_CalcBaseAndBitshift+0x11c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <DMA_CalcBaseAndBitshift+0x120>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3e      	ldr	r2, [pc, #248]	; (8004434 <DMA_CalcBaseAndBitshift+0x124>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <DMA_CalcBaseAndBitshift+0x128>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <DMA_CalcBaseAndBitshift+0x12c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <DMA_CalcBaseAndBitshift+0x130>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a38      	ldr	r2, [pc, #224]	; (8004444 <DMA_CalcBaseAndBitshift+0x134>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a36      	ldr	r2, [pc, #216]	; (8004448 <DMA_CalcBaseAndBitshift+0x138>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a35      	ldr	r2, [pc, #212]	; (800444c <DMA_CalcBaseAndBitshift+0x13c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a33      	ldr	r2, [pc, #204]	; (8004450 <DMA_CalcBaseAndBitshift+0x140>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a32      	ldr	r2, [pc, #200]	; (8004454 <DMA_CalcBaseAndBitshift+0x144>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a30      	ldr	r2, [pc, #192]	; (8004458 <DMA_CalcBaseAndBitshift+0x148>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2f      	ldr	r2, [pc, #188]	; (800445c <DMA_CalcBaseAndBitshift+0x14c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2d      	ldr	r2, [pc, #180]	; (8004460 <DMA_CalcBaseAndBitshift+0x150>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <DMA_CalcBaseAndBitshift+0xa8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <DMA_CalcBaseAndBitshift+0x154>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <DMA_CalcBaseAndBitshift+0xac>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <DMA_CalcBaseAndBitshift+0xae>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3b10      	subs	r3, #16
 80043ca:	4a27      	ldr	r2, [pc, #156]	; (8004468 <DMA_CalcBaseAndBitshift+0x158>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <DMA_CalcBaseAndBitshift+0x15c>)
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d908      	bls.n	80043fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <DMA_CalcBaseAndBitshift+0x160>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	1d1a      	adds	r2, r3, #4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	659a      	str	r2, [r3, #88]	; 0x58
 80043fa:	e00d      	b.n	8004418 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <DMA_CalcBaseAndBitshift+0x160>)
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
 800440a:	e005      	b.n	8004418 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	40020058 	.word	0x40020058
 8004438:	40020070 	.word	0x40020070
 800443c:	40020088 	.word	0x40020088
 8004440:	400200a0 	.word	0x400200a0
 8004444:	400200b8 	.word	0x400200b8
 8004448:	40020410 	.word	0x40020410
 800444c:	40020428 	.word	0x40020428
 8004450:	40020440 	.word	0x40020440
 8004454:	40020458 	.word	0x40020458
 8004458:	40020470 	.word	0x40020470
 800445c:	40020488 	.word	0x40020488
 8004460:	400204a0 	.word	0x400204a0
 8004464:	400204b8 	.word	0x400204b8
 8004468:	aaaaaaab 	.word	0xaaaaaaab
 800446c:	08006fcc 	.word	0x08006fcc
 8004470:	fffffc00 	.word	0xfffffc00

08004474 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d120      	bne.n	80044ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	2b03      	cmp	r3, #3
 800448e:	d858      	bhi.n	8004542 <DMA_CheckFifoParam+0xce>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <DMA_CheckFifoParam+0x24>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044bb 	.word	0x080044bb
 80044a0:	080044a9 	.word	0x080044a9
 80044a4:	08004543 	.word	0x08004543
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d048      	beq.n	8004546 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044b8:	e045      	b.n	8004546 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044c2:	d142      	bne.n	800454a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044c8:	e03f      	b.n	800454a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d2:	d123      	bne.n	800451c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d838      	bhi.n	800454e <DMA_CheckFifoParam+0xda>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <DMA_CheckFifoParam+0x70>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	080044fb 	.word	0x080044fb
 80044ec:	080044f5 	.word	0x080044f5
 80044f0:	0800450d 	.word	0x0800450d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
        break;
 80044f8:	e030      	b.n	800455c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d025      	beq.n	8004552 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800450a:	e022      	b.n	8004552 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004514:	d11f      	bne.n	8004556 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800451a:	e01c      	b.n	8004556 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	2b02      	cmp	r3, #2
 8004522:	d902      	bls.n	800452a <DMA_CheckFifoParam+0xb6>
 8004524:	2b03      	cmp	r3, #3
 8004526:	d003      	beq.n	8004530 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004528:	e018      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e015      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
    break;
 8004540:	e00b      	b.n	800455a <DMA_CheckFifoParam+0xe6>
        break;
 8004542:	bf00      	nop
 8004544:	e00a      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        break;
 8004546:	bf00      	nop
 8004548:	e008      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        break;
 800454a:	bf00      	nop
 800454c:	e006      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        break;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <DMA_CheckFifoParam+0xe8>
        break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <DMA_CheckFifoParam+0xe8>
    break;
 800455a:	bf00      	nop
    }
  }

  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a38      	ldr	r2, [pc, #224]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a36      	ldr	r2, [pc, #216]	; (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a35      	ldr	r2, [pc, #212]	; (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a33      	ldr	r2, [pc, #204]	; (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01a      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3b08      	subs	r3, #8
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a24      	ldr	r2, [pc, #144]	; (8004688 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004608:	e024      	b.n	8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	3b10      	subs	r3, #16
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d806      	bhi.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d902      	bls.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3308      	adds	r3, #8
 8004630:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4b18      	ldr	r3, [pc, #96]	; (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004644:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	409a      	lsls	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	58025408 	.word	0x58025408
 8004664:	5802541c 	.word	0x5802541c
 8004668:	58025430 	.word	0x58025430
 800466c:	58025444 	.word	0x58025444
 8004670:	58025458 	.word	0x58025458
 8004674:	5802546c 	.word	0x5802546c
 8004678:	58025480 	.word	0x58025480
 800467c:	58025494 	.word	0x58025494
 8004680:	cccccccd 	.word	0xcccccccd
 8004684:	16009600 	.word	0x16009600
 8004688:	58025880 	.word	0x58025880
 800468c:	aaaaaaab 	.word	0xaaaaaaab
 8004690:	400204b8 	.word	0x400204b8
 8004694:	4002040f 	.word	0x4002040f
 8004698:	10008200 	.word	0x10008200
 800469c:	40020880 	.word	0x40020880

080046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04a      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d847      	bhi.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d022      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a24      	ldr	r2, [pc, #144]	; (800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d01d      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a22      	ldr	r2, [pc, #136]	; (8004760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d018      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a21      	ldr	r2, [pc, #132]	; (8004764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00e      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1e      	ldr	r2, [pc, #120]	; (800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d009      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004710:	2300      	movs	r3, #0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004728:	671a      	str	r2, [r3, #112]	; 0x70
 800472a:	e009      	b.n	8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800473e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b01      	subs	r3, #1
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	58025408 	.word	0x58025408
 800475c:	5802541c 	.word	0x5802541c
 8004760:	58025430 	.word	0x58025430
 8004764:	58025444 	.word	0x58025444
 8004768:	58025458 	.word	0x58025458
 800476c:	5802546c 	.word	0x5802546c
 8004770:	58025480 	.word	0x58025480
 8004774:	58025494 	.word	0x58025494
 8004778:	1600963f 	.word	0x1600963f
 800477c:	58025940 	.word	0x58025940
 8004780:	1000823f 	.word	0x1000823f
 8004784:	40020940 	.word	0x40020940

08004788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004796:	4b89      	ldr	r3, [pc, #548]	; (80049bc <HAL_GPIO_Init+0x234>)
 8004798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800479a:	e194      	b.n	8004ac6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8186 	beq.w	8004ac0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00b      	beq.n	80047d4 <HAL_GPIO_Init+0x4c>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d007      	beq.n	80047d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c8:	2b11      	cmp	r3, #17
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d130      	bne.n	8004836 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480a:	2201      	movs	r2, #1
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0201 	and.w	r2, r3, #1
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0xee>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b12      	cmp	r3, #18
 8004874:	d123      	bne.n	80048be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80e0 	beq.w	8004ac0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_GPIO_Init+0x238>)
 8004902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004906:	4a2e      	ldr	r2, [pc, #184]	; (80049c0 <HAL_GPIO_Init+0x238>)
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_GPIO_Init+0x238>)
 8004912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800491e:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <HAL_GPIO_Init+0x23c>)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	3302      	adds	r3, #2
 8004926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <HAL_GPIO_Init+0x240>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d052      	beq.n	80049f0 <HAL_GPIO_Init+0x268>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <HAL_GPIO_Init+0x244>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_GPIO_Init+0x22e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <HAL_GPIO_Init+0x248>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d02b      	beq.n	80049b2 <HAL_GPIO_Init+0x22a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_GPIO_Init+0x24c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d025      	beq.n	80049ae <HAL_GPIO_Init+0x226>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <HAL_GPIO_Init+0x250>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01f      	beq.n	80049aa <HAL_GPIO_Init+0x222>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_GPIO_Init+0x254>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d019      	beq.n	80049a6 <HAL_GPIO_Init+0x21e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_GPIO_Init+0x258>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_GPIO_Init+0x21a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_GPIO_Init+0x25c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00d      	beq.n	800499e <HAL_GPIO_Init+0x216>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_GPIO_Init+0x260>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <HAL_GPIO_Init+0x212>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a17      	ldr	r2, [pc, #92]	; (80049ec <HAL_GPIO_Init+0x264>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_GPIO_Init+0x20e>
 8004992:	2309      	movs	r3, #9
 8004994:	e02d      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 8004996:	230a      	movs	r3, #10
 8004998:	e02b      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 800499a:	2308      	movs	r3, #8
 800499c:	e029      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 800499e:	2307      	movs	r3, #7
 80049a0:	e027      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049a2:	2306      	movs	r3, #6
 80049a4:	e025      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049a6:	2305      	movs	r3, #5
 80049a8:	e023      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049aa:	2304      	movs	r3, #4
 80049ac:	e021      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049ae:	2303      	movs	r3, #3
 80049b0:	e01f      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e01d      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e01b      	b.n	80049f2 <HAL_GPIO_Init+0x26a>
 80049ba:	bf00      	nop
 80049bc:	58000080 	.word	0x58000080
 80049c0:	58024400 	.word	0x58024400
 80049c4:	58000400 	.word	0x58000400
 80049c8:	58020000 	.word	0x58020000
 80049cc:	58020400 	.word	0x58020400
 80049d0:	58020800 	.word	0x58020800
 80049d4:	58020c00 	.word	0x58020c00
 80049d8:	58021000 	.word	0x58021000
 80049dc:	58021400 	.word	0x58021400
 80049e0:	58021800 	.word	0x58021800
 80049e4:	58021c00 	.word	0x58021c00
 80049e8:	58022000 	.word	0x58022000
 80049ec:	58022400 	.word	0x58022400
 80049f0:	2300      	movs	r3, #0
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	f002 0203 	and.w	r2, r2, #3
 80049f8:	0092      	lsls	r2, r2, #2
 80049fa:	4093      	lsls	r3, r2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a02:	4938      	ldr	r1, [pc, #224]	; (8004ae4 <HAL_GPIO_Init+0x35c>)
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	3302      	adds	r3, #2
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f ae63 	bne.w	800479c <HAL_GPIO_Init+0x14>
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	58000400 	.word	0x58000400

08004ae8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <HAL_HSEM_FastTake+0x2c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3320      	adds	r3, #32
 8004af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afa:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <HAL_HSEM_FastTake+0x30>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	58026400 	.word	0x58026400
 8004b18:	80000300 	.word	0x80000300

08004b1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b26:	4906      	ldr	r1, [pc, #24]	; (8004b40 <HAL_HSEM_Release+0x24>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	58026400 	.word	0x58026400

08004b44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b4c:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d00a      	beq.n	8004b6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e03e      	b.n	8004bec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b76:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b7e:	f7fc fed7 	bl	8001930 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b84:	e009      	b.n	8004b9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b86:	f7fc fed3 	bl	8001930 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b94:	d901      	bls.n	8004b9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e028      	b.n	8004bec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba6:	d1ee      	bne.n	8004b86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b1e      	cmp	r3, #30
 8004bac:	d008      	beq.n	8004bc0 <HAL_PWREx_ConfigSupply+0x7c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb2:	d005      	beq.n	8004bc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b1d      	cmp	r3, #29
 8004bb8:	d002      	beq.n	8004bc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8004bbe:	d114      	bne.n	8004bea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004bc0:	f7fc feb6 	bl	8001930 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bc6:	e009      	b.n	8004bdc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bc8:	f7fc feb2 	bl	8001930 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd6:	d901      	bls.n	8004bdc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e007      	b.n	8004bec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	58024800 	.word	0x58024800

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e3ff      	b.n	800540a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8087 	beq.w	8004d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c18:	4b99      	ldr	r3, [pc, #612]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c22:	4b97      	ldr	r3, [pc, #604]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCC_OscConfig+0x46>
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b18      	cmp	r3, #24
 8004c32:	d110      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5e>
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d10b      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3e:	4b90      	ldr	r3, [pc, #576]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x12c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d168      	bne.n	8004d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e3d9      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x76>
 8004c60:	4b87      	ldr	r3, [pc, #540]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a86      	ldr	r2, [pc, #536]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	e02e      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x98>
 8004c76:	4b82      	ldr	r3, [pc, #520]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a81      	ldr	r2, [pc, #516]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b7f      	ldr	r3, [pc, #508]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a7e      	ldr	r2, [pc, #504]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e01d      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0xbc>
 8004c9a:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a78      	ldr	r2, [pc, #480]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a75      	ldr	r2, [pc, #468]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004cb4:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a71      	ldr	r2, [pc, #452]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fe2c 	bl	8001930 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fe28 	bl	8001930 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e38d      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cee:	4b64      	ldr	r3, [pc, #400]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe4>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fe18 	bl	8001930 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc fe14 	bl	8001930 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e379      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d16:	4b5a      	ldr	r3, [pc, #360]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x10c>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80ae 	beq.w	8004e90 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d34:	4b52      	ldr	r3, [pc, #328]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d3e:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_RCC_OscConfig+0x162>
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2b18      	cmp	r3, #24
 8004d4e:	d13a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x1ce>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d135      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCC_OscConfig+0x17a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e34b      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	f7fc fe0d 	bl	8001990 <HAL_GetREVID>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d817      	bhi.n	8004db0 <HAL_RCC_OscConfig+0x1b8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d108      	bne.n	8004d9a <HAL_RCC_OscConfig+0x1a2>
 8004d88:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d90:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d96:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d98:	e07a      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9a:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	031b      	lsls	r3, r3, #12
 8004da8:	4935      	ldr	r1, [pc, #212]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dae:	e06f      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	4930      	ldr	r1, [pc, #192]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc4:	e064      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d045      	beq.n	8004e5a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 0219 	bic.w	r2, r3, #25
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4929      	ldr	r1, [pc, #164]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fc fda6 	bl	8001930 <HAL_GetTick>
 8004de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fc fda2 	bl	8001930 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e307      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	f7fc fdc3 	bl	8001990 <HAL_GetREVID>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d817      	bhi.n	8004e44 <HAL_RCC_OscConfig+0x24c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d108      	bne.n	8004e2e <HAL_RCC_OscConfig+0x236>
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e24:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2a:	6053      	str	r3, [r2, #4]
 8004e2c:	e030      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	4910      	ldr	r1, [pc, #64]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
 8004e42:	e025      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
 8004e58:	e01a      	b.n	8004e90 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_RCC_OscConfig+0x288>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fc fd63 	bl	8001930 <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fd5f 	bl	8001930 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d903      	bls.n	8004e84 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e2c4      	b.n	800540a <HAL_RCC_OscConfig+0x812>
 8004e80:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e84:	4ba4      	ldr	r3, [pc, #656]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ee      	bne.n	8004e6e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a9 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	4b9e      	ldr	r3, [pc, #632]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ea8:	4b9b      	ldr	r3, [pc, #620]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d007      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x2cc>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	d13a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x338>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d135      	bne.n	8004f30 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec4:	4b94      	ldr	r3, [pc, #592]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x2e4>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e296      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004edc:	f7fc fd58 	bl	8001990 <HAL_GetREVID>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d817      	bhi.n	8004f1a <HAL_RCC_OscConfig+0x322>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCC_OscConfig+0x30c>
 8004ef2:	4b89      	ldr	r3, [pc, #548]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004efa:	4a87      	ldr	r2, [pc, #540]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f02:	e075      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f04:	4b84      	ldr	r3, [pc, #528]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	069b      	lsls	r3, r3, #26
 8004f12:	4981      	ldr	r1, [pc, #516]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f18:	e06a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	497b      	ldr	r1, [pc, #492]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2e:	e05f      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d042      	beq.n	8004fbe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f38:	4b77      	ldr	r3, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a76      	ldr	r2, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fcf4 	bl	8001930 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fcf0 	bl	8001930 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e255      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5e:	4b6e      	ldr	r3, [pc, #440]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f6a:	f7fc fd11 	bl	8001990 <HAL_GetREVID>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d817      	bhi.n	8004fa8 <HAL_RCC_OscConfig+0x3b0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d108      	bne.n	8004f92 <HAL_RCC_OscConfig+0x39a>
 8004f80:	4b65      	ldr	r3, [pc, #404]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f88:	4a63      	ldr	r2, [pc, #396]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	6053      	str	r3, [r2, #4]
 8004f90:	e02e      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
 8004f92:	4b61      	ldr	r3, [pc, #388]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	069b      	lsls	r3, r3, #26
 8004fa0:	495d      	ldr	r1, [pc, #372]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
 8004fa6:	e023      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
 8004fa8:	4b5b      	ldr	r3, [pc, #364]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	4958      	ldr	r1, [pc, #352]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fbe:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a55      	ldr	r2, [pc, #340]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fcb1 	bl	8001930 <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fd2:	f7fc fcad 	bl	8001930 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e212      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe4:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d036      	beq.n	800506a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005004:	4b44      	ldr	r3, [pc, #272]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	4a43      	ldr	r2, [pc, #268]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fc8e 	bl	8001930 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005018:	f7fc fc8a 	bl	8001930 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1ef      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502a:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x420>
 8005036:	e018      	b.n	800506a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005038:	4b37      	ldr	r3, [pc, #220]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	4a36      	ldr	r2, [pc, #216]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fc fc74 	bl	8001930 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504c:	f7fc fc70 	bl	8001930 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1d5      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800505e:	4b2e      	ldr	r3, [pc, #184]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d019      	beq.n	80050b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 8005084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005088:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800508a:	f7fc fc51 	bl	8001930 <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005092:	f7fc fc4d 	bl	8001930 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1b2      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x49a>
 80050b0:	e018      	b.n	80050e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050be:	f7fc fc37 	bl	8001930 <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050c6:	f7fc fc33 	bl	8001930 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e198      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCC_OscConfig+0x520>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8085 	beq.w	80051fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_RCC_OscConfig+0x524>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_RCC_OscConfig+0x524>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050fe:	f7fc fc17 	bl	8001930 <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005104:	e00c      	b.n	8005120 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005106:	f7fc fc13 	bl	8001930 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b64      	cmp	r3, #100	; 0x64
 8005112:	d905      	bls.n	8005120 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e178      	b.n	800540a <HAL_RCC_OscConfig+0x812>
 8005118:	58024400 	.word	0x58024400
 800511c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0x784>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ec      	beq.n	8005106 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x54a>
 8005134:	4b92      	ldr	r3, [pc, #584]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a91      	ldr	r2, [pc, #580]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
 8005140:	e02d      	b.n	800519e <HAL_RCC_OscConfig+0x5a6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x56c>
 800514a:	4b8d      	ldr	r3, [pc, #564]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a8c      	ldr	r2, [pc, #560]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
 8005156:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a89      	ldr	r2, [pc, #548]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
 8005162:	e01c      	b.n	800519e <HAL_RCC_OscConfig+0x5a6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d10c      	bne.n	8005186 <HAL_RCC_OscConfig+0x58e>
 800516c:	4b84      	ldr	r3, [pc, #528]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a83      	ldr	r2, [pc, #524]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	4b81      	ldr	r3, [pc, #516]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
 8005184:	e00b      	b.n	800519e <HAL_RCC_OscConfig+0x5a6>
 8005186:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a7a      	ldr	r2, [pc, #488]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d015      	beq.n	80051d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fc fbc3 	bl	8001930 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fc fbbf 	bl	8001930 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e122      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c4:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ee      	beq.n	80051ae <HAL_RCC_OscConfig+0x5b6>
 80051d0:	e014      	b.n	80051fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fc fbad 	bl	8001930 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fc fba9 	bl	8001930 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e10c      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f0:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ee      	bne.n	80051da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8101 	beq.w	8005408 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005206:	4b5e      	ldr	r3, [pc, #376]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800520e:	2b18      	cmp	r3, #24
 8005210:	f000 80bc 	beq.w	800538c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b02      	cmp	r3, #2
 800521a:	f040 8095 	bne.w	8005348 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b58      	ldr	r3, [pc, #352]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a57      	ldr	r2, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fc fb81 	bl	8001930 <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005232:	f7fc fb7d 	bl	8001930 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0e2      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005244:	4b4e      	ldr	r3, [pc, #312]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005250:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005254:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCC_OscConfig+0x78c>)
 8005256:	4013      	ands	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005260:	0112      	lsls	r2, r2, #4
 8005262:	430a      	orrs	r2, r1
 8005264:	4946      	ldr	r1, [pc, #280]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005266:	4313      	orrs	r3, r2
 8005268:	628b      	str	r3, [r1, #40]	; 0x28
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	3b01      	subs	r3, #1
 8005270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	3b01      	subs	r3, #1
 800527a:	025b      	lsls	r3, r3, #9
 800527c:	b29b      	uxth	r3, r3
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	3b01      	subs	r3, #1
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	3b01      	subs	r3, #1
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800529a:	4939      	ldr	r1, [pc, #228]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800529c:	4313      	orrs	r3, r2
 800529e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052a0:	4b37      	ldr	r3, [pc, #220]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	4a36      	ldr	r2, [pc, #216]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ac:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCC_OscConfig+0x790>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052b8:	00d2      	lsls	r2, r2, #3
 80052ba:	4931      	ldr	r1, [pc, #196]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f023 020c 	bic.w	r2, r3, #12
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	492c      	ldr	r1, [pc, #176]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052d2:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	f023 0202 	bic.w	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	4928      	ldr	r1, [pc, #160]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052e4:	4b26      	ldr	r3, [pc, #152]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f0:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a22      	ldr	r2, [pc, #136]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052fc:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005308:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a19      	ldr	r2, [pc, #100]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800531a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800531e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fc fb06 	bl	8001930 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005328:	f7fc fb02 	bl	8001930 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e067      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x730>
 8005346:	e05f      	b.n	8005408 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 800534e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc faec 	bl	8001930 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fc fae8 	bl	8001930 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04d      	b.n	800540a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_RCC_OscConfig+0x788>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x764>
 800537a:	e045      	b.n	8005408 <HAL_RCC_OscConfig+0x810>
 800537c:	58024800 	.word	0x58024800
 8005380:	58024400 	.word	0x58024400
 8005384:	fffffc0c 	.word	0xfffffc0c
 8005388:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800538c:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_RCC_OscConfig+0x81c>)
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <HAL_RCC_OscConfig+0x81c>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b01      	cmp	r3, #1
 800539e:	d031      	beq.n	8005404 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f003 0203 	and.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d12a      	bne.n	8005404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d122      	bne.n	8005404 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0a5b      	lsrs	r3, r3, #9
 80053d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d111      	bne.n	8005404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d108      	bne.n	8005404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3730      	adds	r7, #48	; 0x30
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400

08005418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e19c      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d910      	bls.n	800545c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b87      	ldr	r3, [pc, #540]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 020f 	bic.w	r2, r3, #15
 8005442:	4985      	ldr	r1, [pc, #532]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b83      	ldr	r3, [pc, #524]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e184      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	4b7b      	ldr	r3, [pc, #492]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005474:	429a      	cmp	r2, r3
 8005476:	d908      	bls.n	800548a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005478:	4b78      	ldr	r3, [pc, #480]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4975      	ldr	r1, [pc, #468]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005486:	4313      	orrs	r3, r2
 8005488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d010      	beq.n	80054b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	4b70      	ldr	r3, [pc, #448]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d908      	bls.n	80054b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054a6:	4b6d      	ldr	r3, [pc, #436]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	496a      	ldr	r1, [pc, #424]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	4b64      	ldr	r3, [pc, #400]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d908      	bls.n	80054e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d4:	4b61      	ldr	r3, [pc, #388]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	495e      	ldr	r1, [pc, #376]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d010      	beq.n	8005514 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fe:	429a      	cmp	r2, r3
 8005500:	d908      	bls.n	8005514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	4953      	ldr	r1, [pc, #332]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005510:	4313      	orrs	r3, r2
 8005512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	4b4d      	ldr	r3, [pc, #308]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	429a      	cmp	r2, r3
 800552e:	d908      	bls.n	8005542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b4a      	ldr	r3, [pc, #296]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f023 020f 	bic.w	r2, r3, #15
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4947      	ldr	r1, [pc, #284]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800553e:	4313      	orrs	r3, r2
 8005540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d055      	beq.n	80055fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800554e:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4940      	ldr	r1, [pc, #256]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d107      	bne.n	8005578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005568:	4b3c      	ldr	r3, [pc, #240]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d121      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0f6      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d115      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0ea      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005598:	4b30      	ldr	r3, [pc, #192]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0de      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a8:	4b2c      	ldr	r3, [pc, #176]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0d6      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b8:	4b28      	ldr	r3, [pc, #160]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f023 0207 	bic.w	r2, r3, #7
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4925      	ldr	r1, [pc, #148]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ca:	f7fc f9b1 	bl	8001930 <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d2:	f7fc f9ad 	bl	8001930 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0be      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e8:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d1eb      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	429a      	cmp	r2, r3
 8005614:	d208      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f023 020f 	bic.w	r2, r3, #15
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	490e      	ldr	r1, [pc, #56]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005624:	4313      	orrs	r3, r2
 8005626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d214      	bcs.n	8005660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	4906      	ldr	r1, [pc, #24]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e086      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
 8005658:	52002000 	.word	0x52002000
 800565c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005678:	429a      	cmp	r2, r3
 800567a:	d208      	bcs.n	800568e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800567c:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	4939      	ldr	r1, [pc, #228]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 800568a:	4313      	orrs	r3, r2
 800568c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d208      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	492e      	ldr	r1, [pc, #184]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d208      	bcs.n	80056ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	4922      	ldr	r1, [pc, #136]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69da      	ldr	r2, [r3, #28]
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005702:	429a      	cmp	r2, r3
 8005704:	d208      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005714:	4313      	orrs	r3, r2
 8005716:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005718:	f000 f834 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	4912      	ldr	r1, [pc, #72]	; (8005774 <HAL_RCC_ClockConfig+0x35c>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <HAL_RCC_ClockConfig+0x35c>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x360>)
 800574e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x364>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_RCC_ClockConfig+0x368>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fc f89e 	bl	800189c <HAL_InitTick>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
 8005774:	08006fbc 	.word	0x08006fbc
 8005778:	24000004 	.word	0x24000004
 800577c:	24000000 	.word	0x24000000
 8005780:	24000520 	.word	0x24000520

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578a:	4bb3      	ldr	r3, [pc, #716]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005792:	2b18      	cmp	r3, #24
 8005794:	f200 8155 	bhi.w	8005a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	08005805 	.word	0x08005805
 80057a4:	08005a43 	.word	0x08005a43
 80057a8:	08005a43 	.word	0x08005a43
 80057ac:	08005a43 	.word	0x08005a43
 80057b0:	08005a43 	.word	0x08005a43
 80057b4:	08005a43 	.word	0x08005a43
 80057b8:	08005a43 	.word	0x08005a43
 80057bc:	08005a43 	.word	0x08005a43
 80057c0:	0800582b 	.word	0x0800582b
 80057c4:	08005a43 	.word	0x08005a43
 80057c8:	08005a43 	.word	0x08005a43
 80057cc:	08005a43 	.word	0x08005a43
 80057d0:	08005a43 	.word	0x08005a43
 80057d4:	08005a43 	.word	0x08005a43
 80057d8:	08005a43 	.word	0x08005a43
 80057dc:	08005a43 	.word	0x08005a43
 80057e0:	08005831 	.word	0x08005831
 80057e4:	08005a43 	.word	0x08005a43
 80057e8:	08005a43 	.word	0x08005a43
 80057ec:	08005a43 	.word	0x08005a43
 80057f0:	08005a43 	.word	0x08005a43
 80057f4:	08005a43 	.word	0x08005a43
 80057f8:	08005a43 	.word	0x08005a43
 80057fc:	08005a43 	.word	0x08005a43
 8005800:	08005837 	.word	0x08005837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005804:	4b94      	ldr	r3, [pc, #592]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005810:	4b91      	ldr	r3, [pc, #580]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	4a90      	ldr	r2, [pc, #576]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005822:	e111      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005824:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005826:	61bb      	str	r3, [r7, #24]
    break;
 8005828:	e10e      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800582a:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800582c:	61bb      	str	r3, [r7, #24]
    break;
 800582e:	e10b      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005830:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005832:	61bb      	str	r3, [r7, #24]
    break;
 8005834:	e108      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005836:	4b88      	ldr	r3, [pc, #544]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005840:	4b85      	ldr	r3, [pc, #532]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800584c:	4b82      	ldr	r3, [pc, #520]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005856:	4b80      	ldr	r3, [pc, #512]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80e1 	beq.w	8005a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b02      	cmp	r3, #2
 800587e:	f000 8083 	beq.w	8005988 <HAL_RCC_GetSysClockFreq+0x204>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b02      	cmp	r3, #2
 8005886:	f200 80a1 	bhi.w	80059cc <HAL_RCC_GetSysClockFreq+0x248>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x114>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d056      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005896:	e099      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a4:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	4a6b      	ldr	r2, [pc, #428]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
 80058b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058fe:	e087      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b51      	ldr	r3, [pc, #324]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005942:	e065      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005986:	e043      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ca:	e021      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	0a5b      	lsrs	r3, r3, #9
 8005a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 3a90 	vmov	r3, s15
 8005a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a3a:	e005      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
    break;
 8005a40:	e002      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a42:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a44:	61bb      	str	r3, [r7, #24]
    break;
 8005a46:	bf00      	nop
  }

  return sysclockfreq;
 8005a48:	69bb      	ldr	r3, [r7, #24]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	03d09000 	.word	0x03d09000
 8005a60:	003d0900 	.word	0x003d0900
 8005a64:	007a1200 	.word	0x007a1200
 8005a68:	46000000 	.word	0x46000000
 8005a6c:	4c742400 	.word	0x4c742400
 8005a70:	4a742400 	.word	0x4a742400
 8005a74:	4af42400 	.word	0x4af42400

08005a78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a80:	2300      	movs	r3, #0
 8005a82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a84:	2300      	movs	r3, #0
 8005a86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d03f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a9c:	d02a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aa2:	d824      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aa8:	d018      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aae:	d81e      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab8:	d007      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aba:	e018      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4bab      	ldr	r3, [pc, #684]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4aaa      	ldr	r2, [pc, #680]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ac8:	e015      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 ff11 	bl	80068f8 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ada:	e00c      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 ffba 	bl	8006a5c <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
      break;
 8005af2:	e000      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005afc:	4b9b      	ldr	r3, [pc, #620]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b08:	4998      	ldr	r1, [pc, #608]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b0e:	e001      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03d      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d826      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b45 	.word	0x08005b45
 8005b34:	08005b53 	.word	0x08005b53
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005b7d 	.word	0x08005b7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4b89      	ldr	r3, [pc, #548]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a88      	ldr	r2, [pc, #544]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b50:	e015      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fecd 	bl	80068f8 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b62:	e00c      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 ff76 	bl	8006a5c <RCCEx_PLL3_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b74:	e003      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	f023 0207 	bic.w	r2, r3, #7
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	4976      	ldr	r1, [pc, #472]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	650b      	str	r3, [r1, #80]	; 0x50
 8005b96:	e001      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d042      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb0:	d02b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d825      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bb8:	2bc0      	cmp	r3, #192	; 0xc0
 8005bba:	d028      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bbc:	2bc0      	cmp	r3, #192	; 0xc0
 8005bbe:	d821      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d016      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d81d      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d007      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005bd0:	e018      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd2:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bde:	e017      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fe86 	bl	80068f8 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e00e      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 ff2f 	bl	8006a5c <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
      break;
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c16:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	4952      	ldr	r1, [pc, #328]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	650b      	str	r3, [r1, #80]	; 0x50
 8005c28:	e001      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d049      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c44:	d030      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c4a:	d82a      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c50:	d02c      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005c52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c56:	d824      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d018      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c62:	d81e      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c6c:	d007      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c6e:	e018      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c70:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c7c:	e017      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fe37 	bl	80068f8 <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c8e:	e00e      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3324      	adds	r3, #36	; 0x24
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fee0 	bl	8006a5c <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cc2:	492a      	ldr	r1, [pc, #168]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	658b      	str	r3, [r1, #88]	; 0x58
 8005cc8:	e001      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04c      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce4:	d030      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005ce6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cea:	d82a      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cf0:	d02c      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cf6:	d824      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfc:	d018      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d02:	d81e      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d0c:	d007      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d0e:	e018      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d10:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d1c:	e017      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fde7 	bl	80068f8 <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d2e:	e00e      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fe90 	bl	8006a5c <RCCEx_PLL3_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d40:	e005      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
      break;
 8005d46:	e002      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10d      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d62:	4902      	ldr	r1, [pc, #8]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	658b      	str	r3, [r1, #88]	; 0x58
 8005d68:	e004      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005d6a:	bf00      	nop
 8005d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d032      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d01c      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d817      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d00c      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d813      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d016      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d10f      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9c:	4baf      	ldr	r3, [pc, #700]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4aae      	ldr	r2, [pc, #696]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005da8:	e00e      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2102      	movs	r1, #2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fda1 	bl	80068f8 <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005dba:	e005      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dce:	4ba3      	ldr	r3, [pc, #652]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dda:	49a0      	ldr	r1, [pc, #640]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005de0:	e001      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d047      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfa:	d030      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e00:	d82a      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e06:	d02c      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e0c:	d824      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d018      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e18:	d81e      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d007      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005e24:	e018      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e26:	4b8d      	ldr	r3, [pc, #564]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	4a8c      	ldr	r2, [pc, #560]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e32:	e017      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fd5c 	bl	80068f8 <RCCEx_PLL2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e44:	e00e      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3324      	adds	r3, #36	; 0x24
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fe05 	bl	8006a5c <RCCEx_PLL3_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e56:	e005      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5c:	e002      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e6a:	4b7c      	ldr	r3, [pc, #496]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e76:	4979      	ldr	r1, [pc, #484]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	650b      	str	r3, [r1, #80]	; 0x50
 8005e7c:	e001      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d049      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e96:	d02e      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e9c:	d828      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ea2:	d02a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005ea4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ea8:	d822      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005eaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eae:	d026      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005eb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eb4:	d81c      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eba:	d010      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec0:	d816      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01d      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eca:	d111      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fd10 	bl	80068f8 <RCCEx_PLL2_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005edc:	e012      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3324      	adds	r3, #36	; 0x24
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fdb9 	bl	8006a5c <RCCEx_PLL3_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005eee:	e009      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f0a:	4b54      	ldr	r3, [pc, #336]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	4951      	ldr	r1, [pc, #324]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8005f1c:	e001      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d04b      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f38:	d02e      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3e:	d828      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d02a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d822      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f50:	d026      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f56:	d81c      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5c:	d010      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f62:	d816      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01d      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6c:	d111      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fcbf 	bl	80068f8 <RCCEx_PLL2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e012      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	2101      	movs	r1, #1
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fd68 	bl	8006a5c <RCCEx_PLL3_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f90:	e009      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
      break;
 8005f96:	e006      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f98:	bf00      	nop
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f9c:	bf00      	nop
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fac:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fba:	4928      	ldr	r1, [pc, #160]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005fc0:	e001      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d02f      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fda:	d00e      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe0:	d814      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d015      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fea:	d10f      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ff8:	e00c      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fc79 	bl	80068f8 <RCCEx_PLL2_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
      break;
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800601c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	490d      	ldr	r1, [pc, #52]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006028:	4313      	orrs	r3, r2
 800602a:	650b      	str	r3, [r1, #80]	; 0x50
 800602c:	e001      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d033      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	2b03      	cmp	r3, #3
 8006044:	d81c      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006087 	.word	0x08006087
 8006050:	08006061 	.word	0x08006061
 8006054:	0800606f 	.word	0x0800606f
 8006058:	08006087 	.word	0x08006087
 800605c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4bb8      	ldr	r3, [pc, #736]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	4ab7      	ldr	r2, [pc, #732]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800606c:	e00c      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fc3f 	bl	80068f8 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800607e:	e003      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800608e:	4bad      	ldr	r3, [pc, #692]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	49aa      	ldr	r1, [pc, #680]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060a0:	e001      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8086 	beq.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b4:	4ba4      	ldr	r3, [pc, #656]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4aa3      	ldr	r2, [pc, #652]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80060ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060c0:	f7fb fc36 	bl	8001930 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c6:	e009      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c8:	f7fb fc32 	bl	8001930 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b64      	cmp	r3, #100	; 0x64
 80060d4:	d902      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	75fb      	strb	r3, [r7, #23]
        break;
 80060da:	e005      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060dc:	4b9a      	ldr	r3, [pc, #616]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ef      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d166      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060ee:	4b95      	ldr	r3, [pc, #596]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f8:	4053      	eors	r3, r2
 80060fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d013      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006102:	4b90      	ldr	r3, [pc, #576]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800610c:	4b8d      	ldr	r3, [pc, #564]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a8c      	ldr	r2, [pc, #560]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006118:	4b8a      	ldr	r3, [pc, #552]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a89      	ldr	r2, [pc, #548]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006124:	4a87      	ldr	r2, [pc, #540]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006134:	d115      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fb fbfb 	bl	8001930 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800613c:	e00b      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fb fbf7 	bl	8001930 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	; 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d902      	bls.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	75fb      	strb	r3, [r7, #23]
            break;
 8006154:	e005      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006156:	4b7b      	ldr	r3, [pc, #492]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ed      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d126      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006176:	d10d      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006178:	4b72      	ldr	r3, [pc, #456]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006186:	0919      	lsrs	r1, r3, #4
 8006188:	4b70      	ldr	r3, [pc, #448]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800618a:	400b      	ands	r3, r1
 800618c:	496d      	ldr	r1, [pc, #436]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
 8006192:	e005      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006194:	4b6b      	ldr	r3, [pc, #428]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4a6a      	ldr	r2, [pc, #424]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800619a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	4b68      	ldr	r3, [pc, #416]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ae:	4965      	ldr	r1, [pc, #404]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	670b      	str	r3, [r1, #112]	; 0x70
 80061b4:	e004      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	75bb      	strb	r3, [r7, #22]
 80061ba:	e001      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d07e      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d0:	2b28      	cmp	r3, #40	; 0x28
 80061d2:	d867      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080062ab 	.word	0x080062ab
 80061e0:	080062a5 	.word	0x080062a5
 80061e4:	080062a5 	.word	0x080062a5
 80061e8:	080062a5 	.word	0x080062a5
 80061ec:	080062a5 	.word	0x080062a5
 80061f0:	080062a5 	.word	0x080062a5
 80061f4:	080062a5 	.word	0x080062a5
 80061f8:	080062a5 	.word	0x080062a5
 80061fc:	08006281 	.word	0x08006281
 8006200:	080062a5 	.word	0x080062a5
 8006204:	080062a5 	.word	0x080062a5
 8006208:	080062a5 	.word	0x080062a5
 800620c:	080062a5 	.word	0x080062a5
 8006210:	080062a5 	.word	0x080062a5
 8006214:	080062a5 	.word	0x080062a5
 8006218:	080062a5 	.word	0x080062a5
 800621c:	08006293 	.word	0x08006293
 8006220:	080062a5 	.word	0x080062a5
 8006224:	080062a5 	.word	0x080062a5
 8006228:	080062a5 	.word	0x080062a5
 800622c:	080062a5 	.word	0x080062a5
 8006230:	080062a5 	.word	0x080062a5
 8006234:	080062a5 	.word	0x080062a5
 8006238:	080062a5 	.word	0x080062a5
 800623c:	080062ab 	.word	0x080062ab
 8006240:	080062a5 	.word	0x080062a5
 8006244:	080062a5 	.word	0x080062a5
 8006248:	080062a5 	.word	0x080062a5
 800624c:	080062a5 	.word	0x080062a5
 8006250:	080062a5 	.word	0x080062a5
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080062a5 	.word	0x080062a5
 800625c:	080062ab 	.word	0x080062ab
 8006260:	080062a5 	.word	0x080062a5
 8006264:	080062a5 	.word	0x080062a5
 8006268:	080062a5 	.word	0x080062a5
 800626c:	080062a5 	.word	0x080062a5
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062a5 	.word	0x080062a5
 8006278:	080062a5 	.word	0x080062a5
 800627c:	080062ab 	.word	0x080062ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fb36 	bl	80068f8 <RCCEx_PLL2_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006290:	e00c      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	2101      	movs	r1, #1
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fbdf 	bl	8006a5c <RCCEx_PLL3_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062a2:	e003      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75fb      	strb	r3, [r7, #23]
      break;
 80062a8:	e000      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80062aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062be:	4921      	ldr	r1, [pc, #132]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	654b      	str	r3, [r1, #84]	; 0x54
 80062c4:	e001      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03e      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d820      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006327 	.word	0x08006327
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	0800630f 	.word	0x0800630f
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006327 	.word	0x08006327
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 faf8 	bl	80068f8 <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800630c:	e00c      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fba1 	bl	8006a5c <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e000      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d110      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633a:	4902      	ldr	r1, [pc, #8]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800633c:	4313      	orrs	r3, r2
 800633e:	654b      	str	r3, [r1, #84]	; 0x54
 8006340:	e008      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006342:	bf00      	nop
 8006344:	58024400 	.word	0x58024400
 8006348:	58024800 	.word	0x58024800
 800634c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d039      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	2b05      	cmp	r3, #5
 8006368:	d820      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x934>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063b3 	.word	0x080063b3
 8006374:	08006389 	.word	0x08006389
 8006378:	0800639b 	.word	0x0800639b
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063b3 	.word	0x080063b3
 8006384:	080063b3 	.word	0x080063b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	2101      	movs	r1, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fab2 	bl	80068f8 <RCCEx_PLL2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006398:	e00c      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3324      	adds	r3, #36	; 0x24
 800639e:	2101      	movs	r1, #1
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fb5b 	bl	8006a5c <RCCEx_PLL3_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063aa:	e003      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
      break;
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80063b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063ba:	4bb7      	ldr	r3, [pc, #732]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	f023 0207 	bic.w	r2, r3, #7
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	49b3      	ldr	r1, [pc, #716]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	658b      	str	r3, [r1, #88]	; 0x58
 80063ce:	e001      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04b      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ea:	d02e      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80063ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063f0:	d828      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f6:	d02a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d822      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80063fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006402:	d026      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006408:	d81c      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640e:	d010      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006414:	d816      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01d      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800641a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641e:	d111      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa66 	bl	80068f8 <RCCEx_PLL2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006430:	e012      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3324      	adds	r3, #36	; 0x24
 8006436:	2102      	movs	r1, #2
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fb0f 	bl	8006a5c <RCCEx_PLL3_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006442:	e009      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
      break;
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645e:	4b8e      	ldr	r3, [pc, #568]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646c:	498a      	ldr	r1, [pc, #552]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800646e:	4313      	orrs	r3, r2
 8006470:	654b      	str	r3, [r1, #84]	; 0x54
 8006472:	e001      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d04b      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800648e:	d02e      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006490:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006494:	d828      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d02a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d822      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80064a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064a6:	d026      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80064a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ac:	d81c      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80064ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b2:	d010      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80064b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b8:	d816      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01d      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c2:	d111      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fa14 	bl	80068f8 <RCCEx_PLL2_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064d4:	e012      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3324      	adds	r3, #36	; 0x24
 80064da:	2102      	movs	r1, #2
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fabd 	bl	8006a5c <RCCEx_PLL3_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064e6:	e009      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e006      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80064ee:	bf00      	nop
 80064f0:	e004      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80064f2:	bf00      	nop
 80064f4:	e002      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80064fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006502:	4b65      	ldr	r3, [pc, #404]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006506:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006510:	4961      	ldr	r1, [pc, #388]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006512:	4313      	orrs	r3, r2
 8006514:	658b      	str	r3, [r1, #88]	; 0x58
 8006516:	e001      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006524:	2b00      	cmp	r3, #0
 8006526:	d04b      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800652e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006532:	d02e      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006534:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006538:	d828      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653e:	d02a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006544:	d822      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006546:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800654a:	d026      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800654c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006550:	d81c      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006556:	d010      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655c:	d816      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01d      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006566:	d111      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f9c2 	bl	80068f8 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006578:	e012      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3324      	adds	r3, #36	; 0x24
 800657e:	2102      	movs	r1, #2
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fa6b 	bl	8006a5c <RCCEx_PLL3_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800658a:	e009      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
      break;
 8006590:	e006      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006592:	bf00      	nop
 8006594:	e004      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006596:	bf00      	nop
 8006598:	e002      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800659a:	bf00      	nop
 800659c:	e000      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800659e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065a6:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065b4:	4938      	ldr	r1, [pc, #224]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	658b      	str	r3, [r1, #88]	; 0x58
 80065ba:	e001      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d10a      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fa3c 	bl	8006a5c <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065ee:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fc:	4926      	ldr	r1, [pc, #152]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006618:	d10a      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3324      	adds	r3, #36	; 0x24
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fa1b 	bl	8006a5c <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663e:	4916      	ldr	r1, [pc, #88]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006640:	4313      	orrs	r3, r2
 8006642:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d036      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665a:	d01f      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800665c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006660:	d817      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666a:	d009      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800666c:	e011      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f93f 	bl	80068f8 <RCCEx_PLL2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800667e:	e00e      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f9e8 	bl	8006a5c <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006690:	e005      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]
      break;
 8006696:	e002      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006698:	58024400 	.word	0x58024400
      break;
 800669c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066a4:	4b93      	ldr	r3, [pc, #588]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066b2:	4990      	ldr	r1, [pc, #576]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	658b      	str	r3, [r1, #88]	; 0x58
 80066b8:	e001      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d033      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066d4:	d01c      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80066d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066da:	d816      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80066dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e0:	d003      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80066e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066e6:	d007      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80066e8:	e00f      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ea:	4b82      	ldr	r3, [pc, #520]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a81      	ldr	r2, [pc, #516]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066f6:	e00c      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	2101      	movs	r1, #1
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f9ac 	bl	8006a5c <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006718:	4b76      	ldr	r3, [pc, #472]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006726:	4973      	ldr	r1, [pc, #460]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	654b      	str	r3, [r1, #84]	; 0x54
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d029      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674a:	d007      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674e:	4b69      	ldr	r3, [pc, #420]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4a68      	ldr	r2, [pc, #416]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006758:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800675a:	e00b      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3304      	adds	r3, #4
 8006760:	2102      	movs	r1, #2
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f8c8 	bl	80068f8 <RCCEx_PLL2_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
      break;
 8006772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800677a:	4b5e      	ldr	r3, [pc, #376]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	495b      	ldr	r1, [pc, #364]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006788:	4313      	orrs	r3, r2
 800678a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800678c:	e001      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f959 	bl	8006a5c <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d030      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c8:	d017      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80067ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ce:	d811      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	d013      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067da:	d80b      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80067e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e4:	d106      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e6:	4b43      	ldr	r3, [pc, #268]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	4a42      	ldr	r2, [pc, #264]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067f2:	e007      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	75fb      	strb	r3, [r7, #23]
      break;
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800680a:	4b3a      	ldr	r3, [pc, #232]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006816:	4937      	ldr	r1, [pc, #220]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006818:	4313      	orrs	r3, r2
 800681a:	654b      	str	r3, [r1, #84]	; 0x54
 800681c:	e001      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006832:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	492e      	ldr	r1, [pc, #184]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800683c:	4313      	orrs	r3, r2
 800683e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800684c:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800685a:	4926      	ldr	r1, [pc, #152]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800686c:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006878:	491e      	ldr	r1, [pc, #120]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800687a:	4313      	orrs	r3, r2
 800687c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006894:	6113      	str	r3, [r2, #16]
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068a0:	4914      	ldr	r1, [pc, #80]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da08      	bge.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	490e      	ldr	r1, [pc, #56]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	4906      	ldr	r1, [pc, #24]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068e0:	7dbb      	ldrb	r3, [r7, #22]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	58024400 	.word	0x58024400

080068f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006906:	4b53      	ldr	r3, [pc, #332]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d101      	bne.n	8006916 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e099      	b.n	8006a4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006916:	4b4f      	ldr	r3, [pc, #316]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a4e      	ldr	r2, [pc, #312]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 800691c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006922:	f7fb f805 	bl	8001930 <HAL_GetTick>
 8006926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006928:	e008      	b.n	800693c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800692a:	f7fb f801 	bl	8001930 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e086      	b.n	8006a4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800693c:	4b45      	ldr	r3, [pc, #276]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f0      	bne.n	800692a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006948:	4b42      	ldr	r3, [pc, #264]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	031b      	lsls	r3, r3, #12
 8006956:	493f      	ldr	r1, [pc, #252]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	628b      	str	r3, [r1, #40]	; 0x28
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	3b01      	subs	r3, #1
 8006962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	3b01      	subs	r3, #1
 800696c:	025b      	lsls	r3, r3, #9
 800696e:	b29b      	uxth	r3, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	3b01      	subs	r3, #1
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	3b01      	subs	r3, #1
 8006986:	061b      	lsls	r3, r3, #24
 8006988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800698c:	4931      	ldr	r1, [pc, #196]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 800698e:	4313      	orrs	r3, r2
 8006990:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006992:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	492d      	ldr	r1, [pc, #180]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	f023 0220 	bic.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	4928      	ldr	r1, [pc, #160]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	4a26      	ldr	r2, [pc, #152]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069bc:	f023 0310 	bic.w	r3, r3, #16
 80069c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <RCCEx_PLL2_Config+0x160>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	69d2      	ldr	r2, [r2, #28]
 80069ce:	00d2      	lsls	r2, r2, #3
 80069d0:	4920      	ldr	r1, [pc, #128]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	f043 0310 	orr.w	r3, r3, #16
 80069e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069e8:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069f4:	e00f      	b.n	8006a16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d106      	bne.n	8006a0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069fc:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a14      	ldr	r2, [pc, #80]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a08:	e005      	b.n	8006a16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a22:	f7fa ff85 	bl	8001930 <HAL_GetTick>
 8006a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a28:	e008      	b.n	8006a3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a2a:	f7fa ff81 	bl	8001930 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <RCCEx_PLL2_Config+0x15c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	58024400 	.word	0x58024400
 8006a58:	ffff0007 	.word	0xffff0007

08006a5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a6a:	4b53      	ldr	r3, [pc, #332]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d101      	bne.n	8006a7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e099      	b.n	8006bae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a7a:	4b4f      	ldr	r3, [pc, #316]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a4e      	ldr	r2, [pc, #312]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a86:	f7fa ff53 	bl	8001930 <HAL_GetTick>
 8006a8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a8c:	e008      	b.n	8006aa0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a8e:	f7fa ff4f 	bl	8001930 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e086      	b.n	8006bae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aa0:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f0      	bne.n	8006a8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006aac:	4b42      	ldr	r3, [pc, #264]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	493f      	ldr	r1, [pc, #252]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	628b      	str	r3, [r1, #40]	; 0x28
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	025b      	lsls	r3, r3, #9
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006af0:	4931      	ldr	r1, [pc, #196]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006af6:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	492d      	ldr	r1, [pc, #180]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b08:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	4928      	ldr	r1, [pc, #160]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <RCCEx_PLL3_Config+0x160>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	69d2      	ldr	r2, [r2, #28]
 8006b32:	00d2      	lsls	r2, r2, #3
 8006b34:	4920      	ldr	r1, [pc, #128]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b3a:	4b1f      	ldr	r3, [pc, #124]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b58:	e00f      	b.n	8006b7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d106      	bne.n	8006b6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b60:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b6c:	e005      	b.n	8006b7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b72:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b86:	f7fa fed3 	bl	8001930 <HAL_GetTick>
 8006b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b8c:	e008      	b.n	8006ba0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b8e:	f7fa fecf 	bl	8001930 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e006      	b.n	8006bae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <RCCEx_PLL3_Config+0x15c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	ffff0007 	.word	0xffff0007

08006bc0 <arm_biquad_cascade_stereo_df2T_init_f32>:
void arm_biquad_cascade_stereo_df2T_init_f32(
        arm_biquad_cascade_stereo_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	7afa      	ldrb	r2, [r7, #11]
 8006bd4:	701a      	strb	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	461a      	mov	r2, r3
 8006be2:	2100      	movs	r1, #0
 8006be4:	6838      	ldr	r0, [r7, #0]
 8006be6:	f000 f9d5 	bl	8006f94 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	605a      	str	r2, [r3, #4]
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	460b      	mov	r3, r1
 8006c06:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	897a      	ldrh	r2, [r7, #10]
 8006c0c:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8006c14:	897a      	ldrh	r2, [r7, #10]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	4413      	add	r3, r2
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2100      	movs	r1, #0
 8006c22:	6838      	ldr	r0, [r7, #0]
 8006c24:	f000 f9b6 	bl	8006f94 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <arm_float_to_q15>:
#else
void arm_float_to_q15(
  const float32_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b093      	sub	sp, #76	; 0x4c
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
#endif /* #ifdef ARM_MATH_ROUNDING */

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	089b      	lsrs	r3, r3, #2
 8006c4c:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8006c4e:	e0ba      	b.n	8006dc6 <arm_float_to_q15+0x18e>
    /* C = A * 32768 */

    /* convert from float to Q15 and store result in destination buffer */
#ifdef ARM_MATH_ROUNDING

    in = (*pIn++ * 32768.0f);
 8006c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c52:	1d1a      	adds	r2, r3, #4
 8006c54:	643a      	str	r2, [r7, #64]	; 0x40
 8006c56:	edd3 7a00 	vldr	s15, [r3]
 8006c5a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8006e50 <arm_float_to_q15+0x218>
 8006c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 8006c66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c72:	dd02      	ble.n	8006c7a <arm_float_to_q15+0x42>
 8006c74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c78:	e001      	b.n	8006c7e <arm_float_to_q15+0x46>
 8006c7a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006c7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 8006c8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c92:	ee17 3a90 	vmov	r3, s15
 8006c96:	633b      	str	r3, [r7, #48]	; 0x30
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	f303 030f 	ssat	r3, #16, r3
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	60ba      	str	r2, [r7, #8]
 8006ca8:	b20a      	sxth	r2, r1
 8006caa:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 8006cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cae:	1d1a      	adds	r2, r3, #4
 8006cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006cb2:	edd3 7a00 	vldr	s15, [r3]
 8006cb6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8006e50 <arm_float_to_q15+0x218>
 8006cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cbe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 8006cc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cce:	dd02      	ble.n	8006cd6 <arm_float_to_q15+0x9e>
 8006cd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006cd4:	e001      	b.n	8006cda <arm_float_to_q15+0xa2>
 8006cd6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006cda:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ce2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 8006ce6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cee:	ee17 3a90 	vmov	r3, s15
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f303 030f 	ssat	r3, #16, r3
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	60ba      	str	r2, [r7, #8]
 8006d04:	b20a      	sxth	r2, r1
 8006d06:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 8006d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8006d0e:	edd3 7a00 	vldr	s15, [r3]
 8006d12:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8006e50 <arm_float_to_q15+0x218>
 8006d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d1a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 8006d1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2a:	dd02      	ble.n	8006d32 <arm_float_to_q15+0xfa>
 8006d2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006d30:	e001      	b.n	8006d36 <arm_float_to_q15+0xfe>
 8006d32:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006d36:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 8006d42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d4a:	ee17 3a90 	vmov	r3, s15
 8006d4e:	623b      	str	r3, [r7, #32]
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f303 030f 	ssat	r3, #16, r3
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1c9a      	adds	r2, r3, #2
 8006d5e:	60ba      	str	r2, [r7, #8]
 8006d60:	b20a      	sxth	r2, r1
 8006d62:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 8006d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	643a      	str	r2, [r7, #64]	; 0x40
 8006d6a:	edd3 7a00 	vldr	s15, [r3]
 8006d6e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006e50 <arm_float_to_q15+0x218>
 8006d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 8006d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d86:	dd02      	ble.n	8006d8e <arm_float_to_q15+0x156>
 8006d88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006d8c:	e001      	b.n	8006d92 <arm_float_to_q15+0x15a>
 8006d8e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006d92:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d9a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 8006d9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da6:	ee17 3a90 	vmov	r3, s15
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f303 030f 	ssat	r3, #16, r3
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	6979      	ldr	r1, [r7, #20]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	1c9a      	adds	r2, r3, #2
 8006dba:	60ba      	str	r2, [r7, #8]
 8006dbc:	b20a      	sxth	r2, r1
 8006dbe:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);

#endif /* #ifdef ARM_MATH_ROUNDING */

    /* Decrement loop counter */
    blkCnt--;
 8006dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f af41 	bne.w	8006c50 <arm_float_to_q15+0x18>
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8006dd6:	e030      	b.n	8006e3a <arm_float_to_q15+0x202>
    /* C = A * 32768 */

    /* convert from float to Q15 and store result in destination buffer */
#ifdef ARM_MATH_ROUNDING

    in = (*pIn++ * 32768.0f);
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8006dde:	edd3 7a00 	vldr	s15, [r3]
 8006de2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006e50 <arm_float_to_q15+0x218>
 8006de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 8006dee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfa:	dd02      	ble.n	8006e02 <arm_float_to_q15+0x1ca>
 8006dfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006e00:	e001      	b.n	8006e06 <arm_float_to_q15+0x1ce>
 8006e02:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006e06:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 8006e12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e1a:	ee17 3a90 	vmov	r3, s15
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f303 030f 	ssat	r3, #16, r3
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
 8006e28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	1c9a      	adds	r2, r3, #2
 8006e2e:	60ba      	str	r2, [r7, #8]
 8006e30:	b20a      	sxth	r2, r1
 8006e32:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);

#endif /* #ifdef ARM_MATH_ROUNDING */

    /* Decrement loop counter */
    blkCnt--;
 8006e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e36:	3b01      	subs	r3, #1
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8006e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1cb      	bne.n	8006dd8 <arm_float_to_q15+0x1a0>
  }

}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	374c      	adds	r7, #76	; 0x4c
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	47000000 	.word	0x47000000

08006e54 <arm_q31_to_float>:
#else
void arm_q31_to_float(
  const q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  const q31_t *pIn = pSrc;                             /* Src pointer */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t blkCnt;                               /* loop counter */

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling */
  blkCnt = blockSize >> 2U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	613b      	str	r3, [r7, #16]

  while (blkCnt > 0U)
 8006e6a:	e046      	b.n	8006efa <arm_q31_to_float+0xa6>
  {
    /* C = (float32_t) A / 2147483648 */

    /* Convert from q31 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 2147483648.0f);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	1d1a      	adds	r2, r3, #4
 8006e70:	617a      	str	r2, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	60ba      	str	r2, [r7, #8]
 8006e82:	eddf 6a31 	vldr	s13, [pc, #196]	; 8006f48 <arm_q31_to_float+0xf4>
 8006e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e8a:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) *pIn++ / 2147483648.0f);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	1d1a      	adds	r2, r3, #4
 8006e92:	617a      	str	r2, [r7, #20]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	60ba      	str	r2, [r7, #8]
 8006ea4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006f48 <arm_q31_to_float+0xf4>
 8006ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eac:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) *pIn++ / 2147483648.0f);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	617a      	str	r2, [r7, #20]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	60ba      	str	r2, [r7, #8]
 8006ec6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006f48 <arm_q31_to_float+0xf4>
 8006eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ece:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) *pIn++ / 2147483648.0f);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	1d1a      	adds	r2, r3, #4
 8006ed6:	617a      	str	r2, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	1d1a      	adds	r2, r3, #4
 8006ee6:	60ba      	str	r2, [r7, #8]
 8006ee8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006f48 <arm_q31_to_float+0xf4>
 8006eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ef0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1b5      	bne.n	8006e6c <arm_q31_to_float+0x18>
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	613b      	str	r3, [r7, #16]
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8006f08:	e013      	b.n	8006f32 <arm_q31_to_float+0xde>
  {
    /* C = (float32_t) A / 2147483648 */

    /* Convert from q31 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 2147483648.0f);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	617a      	str	r2, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	1d1a      	adds	r2, r3, #4
 8006f1e:	60ba      	str	r2, [r7, #8]
 8006f20:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006f48 <arm_q31_to_float+0xf4>
 8006f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f28:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e8      	bne.n	8006f0a <arm_q31_to_float+0xb6>
  }

}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	4f000000 	.word	0x4f000000

08006f4c <__libc_init_array>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4d0d      	ldr	r5, [pc, #52]	; (8006f84 <__libc_init_array+0x38>)
 8006f50:	4c0d      	ldr	r4, [pc, #52]	; (8006f88 <__libc_init_array+0x3c>)
 8006f52:	1b64      	subs	r4, r4, r5
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	2600      	movs	r6, #0
 8006f58:	42a6      	cmp	r6, r4
 8006f5a:	d109      	bne.n	8006f70 <__libc_init_array+0x24>
 8006f5c:	4d0b      	ldr	r5, [pc, #44]	; (8006f8c <__libc_init_array+0x40>)
 8006f5e:	4c0c      	ldr	r4, [pc, #48]	; (8006f90 <__libc_init_array+0x44>)
 8006f60:	f000 f820 	bl	8006fa4 <_init>
 8006f64:	1b64      	subs	r4, r4, r5
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	2600      	movs	r6, #0
 8006f6a:	42a6      	cmp	r6, r4
 8006f6c:	d105      	bne.n	8006f7a <__libc_init_array+0x2e>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f74:	4798      	blx	r3
 8006f76:	3601      	adds	r6, #1
 8006f78:	e7ee      	b.n	8006f58 <__libc_init_array+0xc>
 8006f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7e:	4798      	blx	r3
 8006f80:	3601      	adds	r6, #1
 8006f82:	e7f2      	b.n	8006f6a <__libc_init_array+0x1e>
 8006f84:	08006fd4 	.word	0x08006fd4
 8006f88:	08006fd4 	.word	0x08006fd4
 8006f8c:	08006fd4 	.word	0x08006fd4
 8006f90:	08006fd8 	.word	0x08006fd8

08006f94 <memset>:
 8006f94:	4402      	add	r2, r0
 8006f96:	4603      	mov	r3, r0
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d100      	bne.n	8006f9e <memset+0xa>
 8006f9c:	4770      	bx	lr
 8006f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa2:	e7f9      	b.n	8006f98 <memset+0x4>

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
