
dfsdm_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a478  0800a478  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a478  0800a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a480  0800a480  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  24000000  0800a488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  240002cc  0800a754  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000cc4  0800a754  00020cc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000371af  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b21  00000000  00000000  000574a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0005afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0005c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aac7  00000000  00000000  0005d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a85c  00000000  00000000  000980df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f580  00000000  00000000  000c293b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00241ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  00241f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240002cc 	.word	0x240002cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a420 	.word	0x0800a420

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240002d0 	.word	0x240002d0
 80002d4:	0800a420 	.word	0x0800a420

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <IIR_Filter_Init>:
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
		arm_fir_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], PCM_CHUNK_SIZE);
	}
}

void IIR_Filter_Init(dsp_buffer_iir_t* dsp, float *coeff){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e016      	b.n	8000742 <IIR_Filter_Init+0x3e>
		arm_biquad_cascade_df2T_init_f32(&dsp[i].Filter_inst, STAGES, &coeff[0], dsp[i].state);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f44f 7292 	mov.w	r2, #292	; 0x124
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4618      	mov	r0, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f44f 7292 	mov.w	r2, #292	; 0x124
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	330c      	adds	r3, #12
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	2123      	movs	r1, #35	; 0x23
 8000738:	f009 fc9c 	bl	800a074 <arm_biquad_cascade_df2T_init_f32>
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9e5      	bls.n	8000714 <IIR_Filter_Init+0x10>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <IIR_Filter>:

void IIR_Filter(dsp_buffer_iir_t* dsp, float (*input)[PCM_CHUNK_SIZE], float (*output)[PCM_CHUNK_SIZE]){
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	e018      	b.n	8000796 <IIR_Filter+0x44>
		arm_biquad_cascade_df2T_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], PCM_CHUNK_SIZE);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	f44f 7292 	mov.w	r2, #292	; 0x124
 800076a:	fb02 f303 	mul.w	r3, r2, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4413      	add	r3, r2
 8000772:	4618      	mov	r0, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	031b      	lsls	r3, r3, #12
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	4413      	add	r3, r2
 800077c:	4619      	mov	r1, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	031b      	lsls	r3, r3, #12
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	461a      	mov	r2, r3
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	f009 fab2 	bl	8009cf4 <arm_biquad_cascade_df2T_f32>
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d9e3      	bls.n	8000764 <IIR_Filter+0x12>
	}

}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <Clean>:


#include "helper.h"


void Clean(uint32_t *buffer, uint32_t byte){
 80007a8:	b480      	push	{r7}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)&buffer[0], byte);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	617a      	str	r2, [r7, #20]
 80007b8:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd1d      	ble.n	80007fc <Clean+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f003 021f 	and.w	r2, r3, #31
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4413      	add	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <Clean+0x64>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3320      	adds	r3, #32
 80007e2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3b20      	subs	r3, #32
 80007e8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf2      	bgt.n	80007d6 <Clean+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f6:	f3bf 8f6f 	isb	sy
}
 80007fa:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80007fc:	bf00      	nop
}
 80007fe:	bf00      	nop
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000816:	4b74      	ldr	r3, [pc, #464]	; (80009e8 <main+0x1d8>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000822:	f3bf 8f4f 	dsb	sy
}
 8000826:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000828:	f3bf 8f6f 	isb	sy
}
 800082c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <main+0x1d8>)
 8000830:	2200      	movs	r2, #0
 8000832:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000836:	f3bf 8f4f 	dsb	sy
}
 800083a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
}
 8000840:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000842:	4b69      	ldr	r3, [pc, #420]	; (80009e8 <main+0x1d8>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a68      	ldr	r2, [pc, #416]	; (80009e8 <main+0x1d8>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800084e:	f3bf 8f4f 	dsb	sy
}
 8000852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000854:	f3bf 8f6f 	isb	sy
}
 8000858:	e000      	b.n	800085c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800085a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x1d8>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d138      	bne.n	80008da <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000868:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <main+0x1d8>)
 800086a:	2200      	movs	r2, #0
 800086c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000876:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <main+0x1d8>)
 8000878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800087c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	0b5b      	lsrs	r3, r3, #13
 8000882:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000886:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000890:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	015a      	lsls	r2, r3, #5
 8000896:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800089a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a0:	4951      	ldr	r1, [pc, #324]	; (80009e8 <main+0x1d8>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1ef      	bne.n	8000892 <main+0x82>
    } while(sets-- != 0U);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e5      	bne.n	8000888 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008bc:	f3bf 8f4f 	dsb	sy
}
 80008c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <main+0x1d8>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a48      	ldr	r2, [pc, #288]	; (80009e8 <main+0x1d8>)
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ce:	f3bf 8f4f 	dsb	sy
}
 80008d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
}
 80008d8:	e000      	b.n	80008dc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008da:	bf00      	nop
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f001 fb4a 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 fa46 	bl	8000d70 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <main+0x1dc>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a40      	ldr	r2, [pc, #256]	; (80009ec <main+0x1dc>)
 80008ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <main+0x1dc>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000902:	2000      	movs	r0, #0
 8000904:	f005 f9d6 	bl	8005cb4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f005 f9ec 	bl	8005ce8 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 fce8 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000914:	f000 fc96 	bl	8001244 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000918:	f000 faae 	bl	8000e78 <MX_DFSDM1_Init>
  MX_USART3_UART_Init();
 800091c:	f000 fc44 	bl	80011a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <main+0x1e0>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <main+0x1e0>)
 8000926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092a:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55;
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0x1e4>)
 800092e:	4a32      	ldr	r2, [pc, #200]	; (80009f8 <main+0x1e8>)
 8000930:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <main+0x1e4>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <main+0x1e4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <main+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]

  IIR_Filter_Init(&dsp_iir[0], &coeff_iir[0]);
 8000946:	492d      	ldr	r1, [pc, #180]	; (80009fc <main+0x1ec>)
 8000948:	482d      	ldr	r0, [pc, #180]	; (8000a00 <main+0x1f0>)
 800094a:	f7ff fedb 	bl	8000704 <IIR_Filter_Init>

  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, &pcmBuffer->topRightChannel[0],    2*PCM_CHUNK_SIZE);
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <main+0x1f4>)
 8000950:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000958:	4619      	mov	r1, r3
 800095a:	482b      	ldr	r0, [pc, #172]	; (8000a08 <main+0x1f8>)
 800095c:	f001 fed6 	bl	800270c <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, &pcmBuffer->topLeftChannel[0], 	2*PCM_CHUNK_SIZE);
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <main+0x1f4>)
 8000962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000966:	4619      	mov	r1, r3
 8000968:	4828      	ldr	r0, [pc, #160]	; (8000a0c <main+0x1fc>)
 800096a:	f001 fecf 	bl	800270c <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, &pcmBuffer->bottomRightChannel[0], 2*PCM_CHUNK_SIZE);
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <main+0x1f4>)
 8000970:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000978:	4619      	mov	r1, r3
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <main+0x200>)
 800097c:	f001 fec6 	bl	800270c <HAL_DFSDM_FilterRegularStart_DMA>
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &pcmBuffer->bottomLeftChannel[0],  2*PCM_CHUNK_SIZE);
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <main+0x1f4>)
 8000982:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800098a:	4619      	mov	r1, r3
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <main+0x204>)
 800098e:	f001 febd 	bl	800270c <HAL_DFSDM_FilterRegularStart_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){

	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <main+0x208>)
 8000994:	789b      	ldrb	r3, [r3, #2]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	f040 80f2 	bne.w	8000b82 <main+0x372>
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <main+0x208>)
 80009a0:	78db      	ldrb	r3, [r3, #3]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f040 80ec 	bne.w	8000b82 <main+0x372>
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <main+0x208>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	f040 80e6 	bne.w	8000b82 <main+0x372>
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <main+0x208>)
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	f040 80e0 	bne.w	8000b82 <main+0x372>
		  DWT->CYCCNT = 0;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <main+0x1e4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
		  channelFlag.topLeftChannelFlag	 = NONE;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <main+0x208>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		  channelFlag.topRightChannelFlag	 = NONE;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <main+0x208>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	705a      	strb	r2, [r3, #1]
		  channelFlag.bottomLeftChannelFlag  = NONE;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <main+0x208>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	709a      	strb	r2, [r3, #2]
		  channelFlag.bottomRightChannelFlag = NONE;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0x208>)
 80009dc:	2200      	movs	r2, #0
 80009de:	70da      	strb	r2, [r3, #3]

		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e053      	b.n	8000a8e <main+0x27e>
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	58024400 	.word	0x58024400
 80009f0:	e000edf0 	.word	0xe000edf0
 80009f4:	e0001000 	.word	0xe0001000
 80009f8:	c5acce55 	.word	0xc5acce55
 80009fc:	24000008 	.word	0x24000008
 8000a00:	240002ec 	.word	0x240002ec
 8000a04:	30020000 	.word	0x30020000
 8000a08:	24000b30 	.word	0x24000b30
 8000a0c:	24000a64 	.word	0x24000a64
 8000a10:	24000bfc 	.word	0x24000bfc
 8000a14:	24000960 	.word	0x24000960
 8000a18:	240002e8 	.word	0x240002e8
			  pcmBuffer->pcmBuffer_q15[0][i] = (int16_t)(pcmBuffer->bottomLeftChannel [i] >> 8);
 8000a1c:	4a6e      	ldr	r2, [pc, #440]	; (8000bd8 <main+0x3c8>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	121b      	asrs	r3, r3, #8
 8000a2a:	4a6b      	ldr	r2, [pc, #428]	; (8000bd8 <main+0x3c8>)
 8000a2c:	b219      	sxth	r1, r3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[1][i] = (int16_t)(pcmBuffer->bottomRightChannel[i] >> 8);
 8000a38:	4a67      	ldr	r2, [pc, #412]	; (8000bd8 <main+0x3c8>)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a44:	121b      	asrs	r3, r3, #8
 8000a46:	4a64      	ldr	r2, [pc, #400]	; (8000bd8 <main+0x3c8>)
 8000a48:	b219      	sxth	r1, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000a50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[2][i] = (int16_t)(pcmBuffer->topLeftChannel	  [i] >> 8);
 8000a54:	4a60      	ldr	r2, [pc, #384]	; (8000bd8 <main+0x3c8>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	121b      	asrs	r3, r3, #8
 8000a5e:	4a5e      	ldr	r2, [pc, #376]	; (8000bd8 <main+0x3c8>)
 8000a60:	b219      	sxth	r1, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 8000a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[3][i] = (int16_t)(pcmBuffer->topRightChannel	  [i] >> 8);
 8000a6c:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <main+0x3c8>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	121b      	asrs	r3, r3, #8
 8000a7a:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <main+0x3c8>)
 8000a7c:	b219      	sxth	r1, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8000a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a94:	d3c2      	bcc.n	8000a1c <main+0x20c>
		  }

		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[0][0], &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <main+0x3c8>)
 8000a98:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <main+0x3c8>)
 8000a9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8000aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 fc0e 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[1][0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <main+0x3c8>)
 8000aae:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 8000ab2:	4a49      	ldr	r2, [pc, #292]	; (8000bd8 <main+0x3c8>)
 8000ab4:	f502 4110 	add.w	r1, r2, #36864	; 0x9000
 8000ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000abc:	4618      	mov	r0, r3
 8000abe:	f009 fc03 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[2][0], &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
 8000ac2:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <main+0x3c8>)
 8000ac4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8000ac8:	4a43      	ldr	r2, [pc, #268]	; (8000bd8 <main+0x3c8>)
 8000aca:	f502 4120 	add.w	r1, r2, #40960	; 0xa000
 8000ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 fbf8 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[3][0], &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <main+0x3c8>)
 8000ada:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000ade:	4a3e      	ldr	r2, [pc, #248]	; (8000bd8 <main+0x3c8>)
 8000ae0:	f502 4130 	add.w	r1, r2, #45056	; 0xb000
 8000ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f009 fbed 	bl	800a2c8 <arm_q15_to_float>

		  IIR_Filter(&dsp_iir[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <main+0x3c8>)
 8000af0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000af4:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <main+0x3c8>)
 8000af6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8000afa:	4619      	mov	r1, r3
 8000afc:	4837      	ldr	r0, [pc, #220]	; (8000bdc <main+0x3cc>)
 8000afe:	f7ff fe28 	bl	8000752 <IIR_Filter>

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[0][0], PCM_CHUNK_SIZE);
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <main+0x3c8>)
 8000b04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000b08:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <main+0x3c8>)
 8000b0a:	f502 4140 	add.w	r1, r2, #49152	; 0xc000
 8000b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 faca 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[1][0], &pcmBuffer->pcmBuffer_q15[1][0], PCM_CHUNK_SIZE);
 8000b18:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <main+0x3c8>)
 8000b1a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000b1e:	4a2e      	ldr	r2, [pc, #184]	; (8000bd8 <main+0x3c8>)
 8000b20:	f502 4148 	add.w	r1, r2, #51200	; 0xc800
 8000b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f009 fabf 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[2][0], &pcmBuffer->pcmBuffer_q15[2][0], PCM_CHUNK_SIZE);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <main+0x3c8>)
 8000b30:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <main+0x3c8>)
 8000b36:	f502 4150 	add.w	r1, r2, #53248	; 0xd000
 8000b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 fab4 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[3][0], &pcmBuffer->pcmBuffer_q15[3][0], PCM_CHUNK_SIZE);
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <main+0x3c8>)
 8000b46:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <main+0x3c8>)
 8000b4c:	f502 4158 	add.w	r1, r2, #55296	; 0xd800
 8000b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b54:	4618      	mov	r0, r3
 8000b56:	f009 faa9 	bl	800a0ac <arm_float_to_q15>

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <main+0x3c8>)
 8000b5c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe1f 	bl	80007a8 <Clean>

		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <main+0x3c8>)
 8000b6c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b74:	4619      	mov	r1, r3
 8000b76:	481a      	ldr	r0, [pc, #104]	; (8000be0 <main+0x3d0>)
 8000b78:	f007 fc72 	bl	8008460 <HAL_UART_Transmit_DMA>

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE7);
 8000b7c:	2007      	movs	r0, #7
 8000b7e:	f001 fa97 	bl	80020b0 <HAL_EXTI_GenerateSWInterrupt>
	  }

	  if(channelFlag.bottomLeftChannelFlag == FULL && channelFlag.bottomRightChannelFlag == FULL && channelFlag.topLeftChannelFlag == FULL && channelFlag.topRightChannelFlag == FULL){
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <main+0x3d4>)
 8000b84:	789b      	ldrb	r3, [r3, #2]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	f47f af02 	bne.w	8000992 <main+0x182>
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <main+0x3d4>)
 8000b90:	78db      	ldrb	r3, [r3, #3]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	f47f aefc 	bne.w	8000992 <main+0x182>
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <main+0x3d4>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	f47f aef6 	bne.w	8000992 <main+0x182>
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <main+0x3d4>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	f47f aef0 	bne.w	8000992 <main+0x182>
		  DWT->CYCCNT = 0;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <main+0x3d8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
		  channelFlag.topLeftChannelFlag		= NONE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <main+0x3d4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		  channelFlag.topRightChannelFlag       = NONE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <main+0x3d4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	705a      	strb	r2, [r3, #1]
		  channelFlag.bottomLeftChannelFlag 	= NONE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <main+0x3d4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	709a      	strb	r2, [r3, #2]
		  channelFlag.bottomRightChannelFlag 	= NONE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <main+0x3d4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	70da      	strb	r2, [r3, #3]

		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	e04b      	b.n	8000c6e <main+0x45e>
 8000bd6:	bf00      	nop
 8000bd8:	30020000 	.word	0x30020000
 8000bdc:	240002ec 	.word	0x240002ec
 8000be0:	240007e0 	.word	0x240007e0
 8000be4:	240002e8 	.word	0x240002e8
 8000be8:	e0001000 	.word	0xe0001000
			  pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER]    [i] = (int16_t)(pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE  + i] >> 8);
 8000bec:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <main+0x554>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	121b      	asrs	r3, r3, #8
 8000bfe:	4a59      	ldr	r2, [pc, #356]	; (8000d64 <main+0x554>)
 8000c00:	b219      	sxth	r1, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 1][i] = (int16_t)(pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE + i] >> 8);
 8000c0c:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <main+0x554>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c14:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	121b      	asrs	r3, r3, #8
 8000c1e:	4a51      	ldr	r2, [pc, #324]	; (8000d64 <main+0x554>)
 8000c20:	b219      	sxth	r1, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	f503 43e8 	add.w	r3, r3, #29696	; 0x7400
 8000c28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 2][i] = (int16_t)(pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE     + i] >> 8);
 8000c2c:	4a4d      	ldr	r2, [pc, #308]	; (8000d64 <main+0x554>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	121b      	asrs	r3, r3, #8
 8000c3a:	4a4a      	ldr	r2, [pc, #296]	; (8000d64 <main+0x554>)
 8000c3c:	b219      	sxth	r1, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8000c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 3][i] = (int16_t)(pcmBuffer->topRightChannel[PCM_CHUNK_SIZE    + i] >> 8);
 8000c48:	4a46      	ldr	r2, [pc, #280]	; (8000d64 <main+0x554>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	121b      	asrs	r3, r3, #8
 8000c5a:	4a42      	ldr	r2, [pc, #264]	; (8000d64 <main+0x554>)
 8000c5c:	b219      	sxth	r1, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c74:	d3ba      	bcc.n	8000bec <main+0x3dc>
		  }

		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER]    [0], &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <main+0x554>)
 8000c78:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000c7c:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <main+0x554>)
 8000c7e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	4618      	mov	r0, r3
 8000c88:	f009 fb1e 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 1][0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <main+0x554>)
 8000c8e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8000c92:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <main+0x554>)
 8000c94:	f502 4110 	add.w	r1, r2, #36864	; 0x9000
 8000c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 fb13 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 2][0], &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <main+0x554>)
 8000ca4:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000ca8:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <main+0x554>)
 8000caa:	f502 4120 	add.w	r1, r2, #40960	; 0xa000
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f009 fb08 	bl	800a2c8 <arm_q15_to_float>
		  arm_q15_to_float(&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 3][0], &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <main+0x554>)
 8000cba:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <main+0x554>)
 8000cc0:	f502 4130 	add.w	r1, r2, #45056	; 0xb000
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f009 fafd 	bl	800a2c8 <arm_q15_to_float>

		  IIR_Filter(&dsp_iir[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <main+0x554>)
 8000cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000cd4:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <main+0x554>)
 8000cd6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4822      	ldr	r0, [pc, #136]	; (8000d68 <main+0x558>)
 8000cde:	f7ff fd38 	bl	8000752 <IIR_Filter>

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER]    [0], PCM_CHUNK_SIZE);
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <main+0x554>)
 8000ce4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <main+0x554>)
 8000cea:	f502 4160 	add.w	r1, r2, #57344	; 0xe000
 8000cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f009 f9da 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[1][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 1][0], PCM_CHUNK_SIZE);
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <main+0x554>)
 8000cfa:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <main+0x554>)
 8000d00:	f502 4168 	add.w	r1, r2, #59392	; 0xe800
 8000d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f009 f9cf 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[2][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 2][0], PCM_CHUNK_SIZE);
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <main+0x554>)
 8000d10:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <main+0x554>)
 8000d16:	f502 4170 	add.w	r1, r2, #61440	; 0xf000
 8000d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 f9c4 	bl	800a0ac <arm_float_to_q15>
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[3][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 3][0], PCM_CHUNK_SIZE);
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <main+0x554>)
 8000d26:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <main+0x554>)
 8000d2c:	f502 4178 	add.w	r1, r2, #63488	; 0xf800
 8000d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d34:	4618      	mov	r0, r3
 8000d36:	f009 f9b9 	bl	800a0ac <arm_float_to_q15>

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <main+0x554>)
 8000d3c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd2f 	bl	80007a8 <Clean>

		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <main+0x554>)
 8000d4c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <main+0x55c>)
 8000d58:	f007 fb82 	bl	8008460 <HAL_UART_Transmit_DMA>

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE8);
 8000d5c:	2008      	movs	r0, #8
 8000d5e:	f001 f9a7 	bl	80020b0 <HAL_EXTI_GenerateSWInterrupt>
	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
 8000d62:	e616      	b.n	8000992 <main+0x182>
 8000d64:	30020000 	.word	0x30020000
 8000d68:	240002ec 	.word	0x240002ec
 8000d6c:	240007e0 	.word	0x240007e0

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09c      	sub	sp, #112	; 0x70
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	224c      	movs	r2, #76	; 0x4c
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f009 fb46 	bl	800a410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2220      	movs	r2, #32
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f009 fb40 	bl	800a410 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d90:	2004      	movs	r0, #4
 8000d92:	f004 ffbd 	bl	8005d10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <SystemClock_Config+0xfc>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <SystemClock_Config+0xfc>)
 8000da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <SystemClock_Config+0xfc>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <SystemClock_Config+0x100>)
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <SystemClock_Config+0x100>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <SystemClock_Config+0x100>)
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc8:	bf00      	nop
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <SystemClock_Config+0xfc>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd6:	d1f8      	bne.n	8000dca <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <SystemClock_Config+0x104>)
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <SystemClock_Config+0x104>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000dfe:	23f0      	movs	r3, #240	; 0xf0
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e06:	2304      	movs	r3, #4
 8000e08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 ffd0 	bl	8005dc4 <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e2a:	f000 fc55 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	233f      	movs	r3, #63	; 0x3f
 8000e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2303      	movs	r3, #3
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f005 fbc5 	bl	80065e4 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e60:	f000 fc3a 	bl	80016d8 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3770      	adds	r7, #112	; 0x70
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024800 	.word	0x58024800
 8000e70:	58000400 	.word	0x58000400
 8000e74:	58024400 	.word	0x58024400

08000e78 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e7c:	4ba5      	ldr	r3, [pc, #660]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e7e:	4aa6      	ldr	r2, [pc, #664]	; (8001118 <MX_DFSDM1_Init+0x2a0>)
 8000e80:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e82:	4ba4      	ldr	r3, [pc, #656]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e88:	4ba2      	ldr	r3, [pc, #648]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e8e:	4ba1      	ldr	r3, [pc, #644]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000e94:	4b9f      	ldr	r3, [pc, #636]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e9a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000e9c:	4b9d      	ldr	r3, [pc, #628]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 2;
 8000ea2:	4b9c      	ldr	r3, [pc, #624]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000ea8:	489a      	ldr	r0, [pc, #616]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 8000eaa:	f001 fb0d 	bl	80024c8 <HAL_DFSDM_FilterInit>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000eb4:	f000 fc10 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000eb8:	4b98      	ldr	r3, [pc, #608]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000eba:	4a99      	ldr	r2, [pc, #612]	; (8001120 <MX_DFSDM1_Init+0x2a8>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000ebe:	4b97      	ldr	r3, [pc, #604]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000ec4:	4b95      	ldr	r3, [pc, #596]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000eca:	4b94      	ldr	r3, [pc, #592]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000ed0:	4b92      	ldr	r3, [pc, #584]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ed2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ed6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000ed8:	4b90      	ldr	r3, [pc, #576]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000eda:	2240      	movs	r2, #64	; 0x40
 8000edc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 2;
 8000ede:	4b8f      	ldr	r3, [pc, #572]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000ee4:	488d      	ldr	r0, [pc, #564]	; (800111c <MX_DFSDM1_Init+0x2a4>)
 8000ee6:	f001 faef 	bl	80024c8 <HAL_DFSDM_FilterInit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_DFSDM1_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 fbf2 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8000ef4:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000ef6:	4a8c      	ldr	r2, [pc, #560]	; (8001128 <MX_DFSDM1_Init+0x2b0>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000efa:	4b8a      	ldr	r3, [pc, #552]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 8000f00:	4b88      	ldr	r3, [pc, #544]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 8000f06:	4b87      	ldr	r3, [pc, #540]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000f0c:	4b85      	ldr	r3, [pc, #532]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f0e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f12:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
 8000f14:	4b83      	ldr	r3, [pc, #524]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f16:	2240      	movs	r2, #64	; 0x40
 8000f18:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 2;
 8000f1a:	4b82      	ldr	r3, [pc, #520]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8000f20:	4880      	ldr	r0, [pc, #512]	; (8001124 <MX_DFSDM1_Init+0x2ac>)
 8000f22:	f001 fad1 	bl	80024c8 <HAL_DFSDM_FilterInit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_DFSDM1_Init+0xb8>
  {
    Error_Handler();
 8000f2c:	f000 fbd4 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000f30:	4b7e      	ldr	r3, [pc, #504]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f32:	4a7f      	ldr	r2, [pc, #508]	; (8001130 <MX_DFSDM1_Init+0x2b8>)
 8000f34:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000f36:	4b7d      	ldr	r3, [pc, #500]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
 8000f3c:	4b7b      	ldr	r3, [pc, #492]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = ENABLE;
 8000f42:	4b7a      	ldr	r3, [pc, #488]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000f48:	4b78      	ldr	r3, [pc, #480]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f4a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f4e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 64;
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 2;
 8000f56:	4b75      	ldr	r3, [pc, #468]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 8000f5c:	4873      	ldr	r0, [pc, #460]	; (800112c <MX_DFSDM1_Init+0x2b4>)
 8000f5e:	f001 fab3 	bl	80024c8 <HAL_DFSDM_FilterInit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_DFSDM1_Init+0xf4>
  {
    Error_Handler();
 8000f68:	f000 fbb6 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000f6c:	4b71      	ldr	r3, [pc, #452]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f6e:	4a72      	ldr	r2, [pc, #456]	; (8001138 <MX_DFSDM1_Init+0x2c0>)
 8000f70:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000f72:	4b70      	ldr	r3, [pc, #448]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000f78:	4b6e      	ldr	r3, [pc, #440]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 20;
 8000f80:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f82:	2214      	movs	r2, #20
 8000f84:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f86:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000f92:	4b68      	ldr	r3, [pc, #416]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000f9a:	4b66      	ldr	r3, [pc, #408]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 650;
 8000fb2:	4b60      	ldr	r3, [pc, #384]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fb4:	f240 228a 	movw	r2, #650	; 0x28a
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 4;
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000fc0:	485c      	ldr	r0, [pc, #368]	; (8001134 <MX_DFSDM1_Init+0x2bc>)
 8000fc2:	f001 f9a5 	bl	8002310 <HAL_DFSDM_ChannelInit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_DFSDM1_Init+0x158>
  {
    Error_Handler();
 8000fcc:	f000 fb84 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000fd0:	4b5a      	ldr	r3, [pc, #360]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <MX_DFSDM1_Init+0x2c8>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
 8000fe4:	4b55      	ldr	r3, [pc, #340]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000fe6:	2214      	movs	r2, #20
 8000fe8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ff0:	4b52      	ldr	r3, [pc, #328]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ff6:	4b51      	ldr	r3, [pc, #324]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8001004:	2204      	movs	r2, #4
 8001006:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800100e:	4b4b      	ldr	r3, [pc, #300]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 660;
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8001016:	f44f 7225 	mov.w	r2, #660	; 0x294
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 4;
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 800101e:	2204      	movs	r2, #4
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001022:	4846      	ldr	r0, [pc, #280]	; (800113c <MX_DFSDM1_Init+0x2c4>)
 8001024:	f001 f974 	bl	8002310 <HAL_DFSDM_ChannelInit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_DFSDM1_Init+0x1ba>
  {
    Error_Handler();
 800102e:	f000 fb53 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <MX_DFSDM1_Init+0x2d0>)
 8001036:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 800103a:	2201      	movs	r2, #1
 800103c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001044:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001048:	2214      	movs	r2, #20
 800104a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 800105a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001060:	4b38      	ldr	r3, [pc, #224]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001066:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001068:	2204      	movs	r2, #4
 800106a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001074:	2201      	movs	r2, #1
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 600;
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 800107a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 4;
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001082:	2204      	movs	r2, #4
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <MX_DFSDM1_Init+0x2cc>)
 8001088:	f001 f942 	bl	8002310 <HAL_DFSDM_ChannelInit>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_DFSDM1_Init+0x21e>
  {
    Error_Handler();
 8001092:	f000 fb21 	bl	80016d8 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <MX_DFSDM1_Init+0x2d8>)
 800109a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 20;
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010ac:	2214      	movs	r2, #20
 80010ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 500;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 4;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_DFSDM1_Init+0x2d4>)
 80010ea:	f001 f911 	bl	8002310 <HAL_DFSDM_ChannelInit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DFSDM1_Init+0x280>
  {
    Error_Handler();
 80010f4:	f000 faf0 	bl	80016d8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80010f8:	2201      	movs	r2, #1
 80010fa:	2101      	movs	r1, #1
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_DFSDM1_Init+0x29c>)
 80010fe:	f001 fabf 	bl	8002680 <HAL_DFSDM_FilterConfigRegChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_DFSDM1_Init+0x294>
  {
    Error_Handler();
 8001108:	f000 fae6 	bl	80016d8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800110c:	2201      	movs	r2, #1
 800110e:	4911      	ldr	r1, [pc, #68]	; (8001154 <MX_DFSDM1_Init+0x2dc>)
 8001110:	e022      	b.n	8001158 <MX_DFSDM1_Init+0x2e0>
 8001112:	bf00      	nop
 8001114:	24000960 	.word	0x24000960
 8001118:	40017100 	.word	0x40017100
 800111c:	24000bfc 	.word	0x24000bfc
 8001120:	40017180 	.word	0x40017180
 8001124:	24000a64 	.word	0x24000a64
 8001128:	40017200 	.word	0x40017200
 800112c:	24000b30 	.word	0x24000b30
 8001130:	40017280 	.word	0x40017280
 8001134:	24000c50 	.word	0x24000c50
 8001138:	40017000 	.word	0x40017000
 800113c:	240007a8 	.word	0x240007a8
 8001140:	40017020 	.word	0x40017020
 8001144:	24000c88 	.word	0x24000c88
 8001148:	40017040 	.word	0x40017040
 800114c:	240009b4 	.word	0x240009b4
 8001150:	40017060 	.word	0x40017060
 8001154:	00010002 	.word	0x00010002
 8001158:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_DFSDM1_Init+0x31c>)
 800115a:	f001 fa91 	bl	8002680 <HAL_DFSDM_FilterConfigRegChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_DFSDM1_Init+0x2f0>
  {
    Error_Handler();
 8001164:	f000 fab8 	bl	80016d8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001168:	2201      	movs	r2, #1
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <MX_DFSDM1_Init+0x320>)
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_DFSDM1_Init+0x324>)
 800116e:	f001 fa87 	bl	8002680 <HAL_DFSDM_FilterConfigRegChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_DFSDM1_Init+0x304>
  {
    Error_Handler();
 8001178:	f000 faae 	bl	80016d8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800117c:	2201      	movs	r2, #1
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <MX_DFSDM1_Init+0x328>)
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_DFSDM1_Init+0x32c>)
 8001182:	f001 fa7d 	bl	8002680 <HAL_DFSDM_FilterConfigRegChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DFSDM1_Init+0x318>
  {
    Error_Handler();
 800118c:	f000 faa4 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000bfc 	.word	0x24000bfc
 8001198:	00020004 	.word	0x00020004
 800119c:	24000a64 	.word	0x24000a64
 80011a0:	00030008 	.word	0x00030008
 80011a4:	24000b30 	.word	0x24000b30

080011a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011ae:	4a23      	ldr	r2, [pc, #140]	; (800123c <MX_USART3_UART_Init+0x94>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 7000000;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <MX_USART3_UART_Init+0x98>)
 80011b6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011cc:	220c      	movs	r2, #12
 80011ce:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_USART3_UART_Init+0x90>)
 80011f0:	f007 f8e6 	bl	80083c0 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80011fa:	f000 fa6d 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_USART3_UART_Init+0x90>)
 8001202:	f008 fcac 	bl	8009b5e <HAL_UARTEx_SetTxFifoThreshold>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800120c:	f000 fa64 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_USART3_UART_Init+0x90>)
 8001214:	f008 fce1 	bl	8009bda <HAL_UARTEx_SetRxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800121e:	f000 fa5b 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART3_UART_Init+0x90>)
 8001224:	f008 fc62 	bl	8009aec <HAL_UARTEx_DisableFifoMode>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800122e:	f000 fa53 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	240007e0 	.word	0x240007e0
 800123c:	40004800 	.word	0x40004800
 8001240:	006acfc0 	.word	0x006acfc0

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_DMA_Init+0x9c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <MX_DMA_Init+0x9c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_DMA_Init+0x9c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_DMA_Init+0x9c>)
 800126a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_DMA_Init+0x9c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_DMA_Init+0x9c>)
 800127a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	200b      	movs	r0, #11
 800128c:	f001 f80b 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001290:	200b      	movs	r0, #11
 8001292:	f001 f822 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	200c      	movs	r0, #12
 800129c:	f001 f803 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012a0:	200c      	movs	r0, #12
 80012a2:	f001 f81a 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	200d      	movs	r0, #13
 80012ac:	f000 fffb 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012b0:	200d      	movs	r0, #13
 80012b2:	f001 f812 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200e      	movs	r0, #14
 80012bc:	f000 fff3 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012c0:	200e      	movs	r0, #14
 80012c2:	f001 f80a 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2038      	movs	r0, #56	; 0x38
 80012cc:	f000 ffeb 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012d0:	2038      	movs	r0, #56	; 0x38
 80012d2:	f001 f802 	bl	80022da <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024400 	.word	0x58024400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_GPIO_Init+0x8c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <MX_GPIO_Init+0x8c>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_GPIO_Init+0x8c>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_GPIO_Init+0x8c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	4a18      	ldr	r2, [pc, #96]	; (8001370 <MX_GPIO_Init+0x8c>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_GPIO_Init+0x8c>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_GPIO_Init+0x8c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	4a10      	ldr	r2, [pc, #64]	; (8001370 <MX_GPIO_Init+0x8c>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_GPIO_Init+0x8c>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_GPIO_Init+0x8c>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <MX_GPIO_Init+0x8c>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_GPIO_Init+0x8c>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	58024400 	.word	0x58024400

08001374 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 8001374:	b480      	push	{r7}
 8001376:	b093      	sub	sp, #76	; 0x4c
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

		 if(hdfsdm_filter == &hdfsdm1_filter3){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a63      	ldr	r2, [pc, #396]	; (800150c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d12c      	bne.n	80013de <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x6a>
			channelFlag.topRightChannelFlag 	= HALF;
 8001384:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001386:	2201      	movs	r2, #1
 8001388:	705a      	strb	r2, [r3, #1]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[0], 4*PCM_CHUNK_SIZE);
 800138a:	4b62      	ldr	r3, [pc, #392]	; (8001514 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 800138c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8001398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800139a:	2b00      	cmp	r3, #0
 800139c:	f340 80a9 	ble.w	80014f2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80013a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a2:	f003 021f 	and.w	r2, r3, #31
 80013a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a8:	4413      	add	r3, r2
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80013ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 80013b0:	f3bf 8f4f 	dsb	sy
}
 80013b4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 80013b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ba:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80013be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c0:	3320      	adds	r3, #32
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80013c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c6:	3b20      	subs	r3, #32
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 80013ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dcf2      	bgt.n	80013b6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  __ASM volatile ("dsb 0xF":::"memory");
 80013d0:	f3bf 8f4f 	dsb	sy
}
 80013d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d6:	f3bf 8f6f 	isb	sy
}
 80013da:	bf00      	nop
}
 80013dc:	e089      	b.n	80014f2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17e>

	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4e      	ldr	r2, [pc, #312]	; (800151c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d129      	bne.n	800143a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc6>
			channelFlag.topLeftChannelFlag 	= HALF;
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[0], 4*PCM_CHUNK_SIZE);
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 80013f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dd7c      	ble.n	80014f6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x182>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	f003 021f 	and.w	r2, r3, #31
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	4413      	add	r3, r2
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 800140c:	f3bf 8f4f 	dsb	sy
}
 8001410:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001412:	4a41      	ldr	r2, [pc, #260]	; (8001518 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	3320      	adds	r3, #32
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	3b20      	subs	r3, #32
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	dcf2      	bgt.n	8001412 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x9e>
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001432:	f3bf 8f6f 	isb	sy
}
 8001436:	bf00      	nop
}
 8001438:	e05d      	b.n	80014f6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x182>
	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a38      	ldr	r2, [pc, #224]	; (8001520 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12b      	bne.n	800149a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x126>
			channelFlag.bottomRightChannelFlag 	= HALF;
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 8001444:	2201      	movs	r2, #1
 8001446:	70da      	strb	r2, [r3, #3]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[0], 4*PCM_CHUNK_SIZE);
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 800144a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd4e      	ble.n	80014fa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x186>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	f003 021f 	and.w	r2, r3, #31
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	4413      	add	r3, r2
 8001466:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800146c:	f3bf 8f4f 	dsb	sy
}
 8001470:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	3320      	adds	r3, #32
 800147e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3b20      	subs	r3, #32
 8001484:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dcf2      	bgt.n	8001472 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfe>
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001492:	f3bf 8f6f 	isb	sy
}
 8001496:	bf00      	nop
}
 8001498:	e02f      	b.n	80014fa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x186>
	}
	else{
			channelFlag.bottomLeftChannelFlag 	= HALF;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>)
 800149c:	2201      	movs	r2, #1
 800149e:	709a      	strb	r2, [r3, #2]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[0], 4*PCM_CHUNK_SIZE);
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
 80014a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dd24      	ble.n	80014fe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 021f 	and.w	r2, r3, #31
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c4:	f3bf 8f4f 	dsb	sy
}
 80014c8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3320      	adds	r3, #32
 80014d6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3b20      	subs	r3, #32
 80014dc:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dcf2      	bgt.n	80014ca <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x156>
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ea:	f3bf 8f6f 	isb	sy
}
 80014ee:	bf00      	nop
}
 80014f0:	e005      	b.n	80014fe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18a>
 80014f2:	bf00      	nop
 80014f4:	e004      	b.n	8001500 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 80014f6:	bf00      	nop
 80014f8:	e002      	b.n	8001500 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 80014fa:	bf00      	nop
 80014fc:	e000      	b.n	8001500 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 80014fe:	bf00      	nop
	}

}
 8001500:	bf00      	nop
 8001502:	374c      	adds	r7, #76	; 0x4c
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	24000b30 	.word	0x24000b30
 8001510:	240002e8 	.word	0x240002e8
 8001514:	30020000 	.word	0x30020000
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	24000a64 	.word	0x24000a64
 8001520:	24000bfc 	.word	0x24000bfc

08001524 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 8001524:	b480      	push	{r7}
 8001526:	b093      	sub	sp, #76	; 0x4c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

		 if(hdfsdm_filter == &hdfsdm1_filter3){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a64      	ldr	r2, [pc, #400]	; (80016c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d12c      	bne.n	800158e <HAL_DFSDM_FilterRegConvCpltCallback+0x6a>
			channelFlag.topRightChannelFlag = FULL;
 8001534:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001536:	2202      	movs	r2, #2
 8001538:	705a      	strb	r2, [r3, #1]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 800153c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8001548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	f340 80ab 	ble.w	80016a6 <HAL_DFSDM_FilterRegConvCpltCallback+0x182>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001552:	f003 021f 	and.w	r2, r3, #31
 8001556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001558:	4413      	add	r3, r2
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8001560:	f3bf 8f4f 	dsb	sy
}
 8001564:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001566:	4a59      	ldr	r2, [pc, #356]	; (80016cc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001570:	3320      	adds	r3, #32
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001576:	3b20      	subs	r3, #32
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 800157a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcf2      	bgt.n	8001566 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001586:	f3bf 8f6f 	isb	sy
}
 800158a:	bf00      	nop
}
 800158c:	e08b      	b.n	80016a6 <HAL_DFSDM_FilterRegConvCpltCallback+0x182>
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ac>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12b      	bne.n	80015ee <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
			channelFlag.topLeftChannelFlag 	= FULL;
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 800159c:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 800159e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 80015aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd7c      	ble.n	80016aa <HAL_DFSDM_FilterRegConvCpltCallback+0x186>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	f003 021f 	and.w	r2, r3, #31
 80015b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b8:	4413      	add	r3, r2
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80015bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80015c6:	4a41      	ldr	r2, [pc, #260]	; (80016cc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	3320      	adds	r3, #32
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	3b20      	subs	r3, #32
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dcf2      	bgt.n	80015c6 <HAL_DFSDM_FilterRegConvCpltCallback+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015e0:	f3bf 8f4f 	dsb	sy
}
 80015e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e6:	f3bf 8f6f 	isb	sy
}
 80015ea:	bf00      	nop
}
 80015ec:	e05d      	b.n	80016aa <HAL_DFSDM_FilterRegConvCpltCallback+0x186>

	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_DFSDM_FilterRegConvCpltCallback+0x12a>
			channelFlag.bottomRightChannelFlag 	= FULL;
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	70da      	strb	r2, [r3, #3]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 80015fe:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dd4e      	ble.n	80016ae <HAL_DFSDM_FilterRegConvCpltCallback+0x18a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f003 021f 	and.w	r2, r3, #31
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	4413      	add	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001620:	f3bf 8f4f 	dsb	sy
}
 8001624:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3320      	adds	r3, #32
 8001632:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3b20      	subs	r3, #32
 8001638:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dcf2      	bgt.n	8001626 <HAL_DFSDM_FilterRegConvCpltCallback+0x102>
  __ASM volatile ("dsb 0xF":::"memory");
 8001640:	f3bf 8f4f 	dsb	sy
}
 8001644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001646:	f3bf 8f6f 	isb	sy
}
 800164a:	bf00      	nop
}
 800164c:	e02f      	b.n	80016ae <HAL_DFSDM_FilterRegConvCpltCallback+0x18a>
	}
	else{
			channelFlag.bottomLeftChannelFlag 	= FULL;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>)
 8001650:	2202      	movs	r2, #2
 8001652:	709a      	strb	r2, [r3, #2]
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>)
 8001656:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dd24      	ble.n	80016b2 <HAL_DFSDM_FilterRegConvCpltCallback+0x18e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 021f 	and.w	r2, r3, #31
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001678:	f3bf 8f4f 	dsb	sy
}
 800167c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_DFSDM_FilterRegConvCpltCallback+0x1a8>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3320      	adds	r3, #32
 800168a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3b20      	subs	r3, #32
 8001690:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dcf2      	bgt.n	800167e <HAL_DFSDM_FilterRegConvCpltCallback+0x15a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001698:	f3bf 8f4f 	dsb	sy
}
 800169c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800169e:	f3bf 8f6f 	isb	sy
}
 80016a2:	bf00      	nop
}
 80016a4:	e005      	b.n	80016b2 <HAL_DFSDM_FilterRegConvCpltCallback+0x18e>
 80016a6:	bf00      	nop
 80016a8:	e004      	b.n	80016b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80016aa:	bf00      	nop
 80016ac:	e002      	b.n	80016b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x190>
 80016b2:	bf00      	nop
	}

}
 80016b4:	bf00      	nop
 80016b6:	374c      	adds	r7, #76	; 0x4c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	24000b30 	.word	0x24000b30
 80016c4:	240002e8 	.word	0x240002e8
 80016c8:	30020000 	.word	0x30020000
 80016cc:	e000ed00 	.word	0xe000ed00
 80016d0:	24000a64 	.word	0x24000a64
 80016d4:	24000bfc 	.word	0x24000bfc

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_MspInit+0x34>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_MspInit+0x34>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_MspInit+0x34>)
 80016fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001708:	2004      	movs	r0, #4
 800170a:	f000 fdc1 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	58024400 	.word	0x58024400

0800171c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0ba      	sub	sp, #232	; 0xe8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	22bc      	movs	r2, #188	; 0xbc
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fe67 	bl	800a410 <memset>
  if(DFSDM1_Init == 0)
 8001742:	4bb4      	ldr	r3, [pc, #720]	; (8001a14 <HAL_DFSDM_FilterMspInit+0x2f8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80ca 	bne.w	80018e0 <HAL_DFSDM_FilterMspInit+0x1c4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 800174c:	4bb2      	ldr	r3, [pc, #712]	; (8001a18 <HAL_DFSDM_FilterMspInit+0x2fc>)
 800174e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001750:	2305      	movs	r3, #5
 8001752:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001754:	23c0      	movs	r3, #192	; 0xc0
 8001756:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001758:	2305      	movs	r3, #5
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001760:	2302      	movs	r3, #2
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001770:	2301      	movs	r3, #1
 8001772:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fabc 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_DFSDM_FilterMspInit+0x72>
    {
      Error_Handler();
 800178a:	f7ff ffa5 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800178e:	4ba3      	ldr	r3, [pc, #652]	; (8001a1c <HAL_DFSDM_FilterMspInit+0x300>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4aa1      	ldr	r2, [pc, #644]	; (8001a1c <HAL_DFSDM_FilterMspInit+0x300>)
 8001796:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001798:	4ba0      	ldr	r3, [pc, #640]	; (8001a1c <HAL_DFSDM_FilterMspInit+0x300>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10e      	bne.n	80017be <HAL_DFSDM_FilterMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017a0:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a6:	4a9e      	ldr	r2, [pc, #632]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017b0:	4b9b      	ldr	r3, [pc, #620]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	4b98      	ldr	r3, [pc, #608]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a96      	ldr	r2, [pc, #600]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b94      	ldr	r3, [pc, #592]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	4a8f      	ldr	r2, [pc, #572]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ec:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	4a87      	ldr	r2, [pc, #540]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x304>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE4     ------> DFSDM1_DATIN3
    PB1     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001818:	2310      	movs	r3, #16
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800183a:	4619      	mov	r1, r3
 800183c:	4879      	ldr	r0, [pc, #484]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x308>)
 800183e:	f004 f889 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800185a:	2306      	movs	r3, #6
 800185c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001864:	4619      	mov	r1, r3
 8001866:	4870      	ldr	r0, [pc, #448]	; (8001a28 <HAL_DFSDM_FilterMspInit+0x30c>)
 8001868:	f004 f874 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186c:	2308      	movs	r3, #8
 800186e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001884:	2303      	movs	r3, #3
 8001886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800188e:	4619      	mov	r1, r3
 8001890:	4866      	ldr	r0, [pc, #408]	; (8001a2c <HAL_DFSDM_FilterMspInit+0x310>)
 8001892:	f004 f85f 	bl	8005954 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	206e      	movs	r0, #110	; 0x6e
 800189c:	f000 fd03 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80018a0:	206e      	movs	r0, #110	; 0x6e
 80018a2:	f000 fd1a 	bl	80022da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT1_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	206f      	movs	r0, #111	; 0x6f
 80018ac:	f000 fcfb 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT1_IRQn);
 80018b0:	206f      	movs	r0, #111	; 0x6f
 80018b2:	f000 fd12 	bl	80022da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2070      	movs	r0, #112	; 0x70
 80018bc:	f000 fcf3 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 80018c0:	2070      	movs	r0, #112	; 0x70
 80018c2:	f000 fd0a 	bl	80022da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DFSDM1_FLT3_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2071      	movs	r0, #113	; 0x71
 80018cc:	f000 fceb 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT3_IRQn);
 80018d0:	2071      	movs	r0, #113	; 0x71
 80018d2:	f000 fd02 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018d6:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_DFSDM_FilterMspInit+0x2f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_DFSDM_FilterMspInit+0x2f8>)
 80018de:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_DFSDM_FilterMspInit+0x314>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d136      	bne.n	8001958 <HAL_DFSDM_FilterMspInit+0x23c>
    hdma_dfsdm1_flt0.Instance = DMA1_Stream0;
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_DFSDM_FilterMspInit+0x31c>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 80018f2:	2265      	movs	r2, #101	; 0x65
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001908:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800190a:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 800190c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001910:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001918:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001922:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001928:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001930:	4840      	ldr	r0, [pc, #256]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001932:	f001 f9d5 	bl	8002ce0 <HAL_DMA_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_DFSDM_FilterMspInit+0x224>
    {
      Error_Handler();
 800193c:	f7ff fecc 	bl	80016d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3c      	ldr	r2, [pc, #240]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
 8001946:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x318>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <HAL_DFSDM_FilterMspInit+0x320>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d136      	bne.n	80019d0 <HAL_DFSDM_FilterMspInit+0x2b4>
    hdma_dfsdm1_flt1.Instance = DMA1_Stream1;
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 8001964:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <HAL_DFSDM_FilterMspInit+0x328>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_DFSDM1_FLT1;
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 800196a:	2266      	movs	r2, #102	; 0x66
 800196c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001974:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 800197c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001980:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 8001984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001988:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 800198c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001990:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 8001994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001998:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 800199c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a2:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019aa:	f001 f999 	bl	8002ce0 <HAL_DMA_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_DFSDM_FilterMspInit+0x29c>
    {
      Error_Handler();
 80019b4:	f7ff fe90 	bl	80016d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_DFSDM_FilterMspInit+0x324>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_DFSDM_FilterMspInit+0x32c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d157      	bne.n	8001a8a <HAL_DFSDM_FilterMspInit+0x36e>
    hdma_dfsdm1_flt2.Instance = DMA1_Stream2;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019dc:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_DFSDM_FilterMspInit+0x334>)
 80019de:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019e2:	2267      	movs	r2, #103	; 0x67
 80019e4:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f8:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 80019fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 8001a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a08:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_CIRCULAR;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x330>)
 8001a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	e01f      	b.n	8001a54 <HAL_DFSDM_FilterMspInit+0x338>
 8001a14:	24000780 	.word	0x24000780
 8001a18:	00200100 	.word	0x00200100
 8001a1c:	2400077c 	.word	0x2400077c
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58021000 	.word	0x58021000
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	58020c00 	.word	0x58020c00
 8001a30:	40017100 	.word	0x40017100
 8001a34:	24000b84 	.word	0x24000b84
 8001a38:	40020010 	.word	0x40020010
 8001a3c:	40017180 	.word	0x40017180
 8001a40:	24000ab8 	.word	0x24000ab8
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40017200 	.word	0x40017200
 8001a4c:	240008e8 	.word	0x240008e8
 8001a50:	40020040 	.word	0x40020040
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 8001a62:	482a      	ldr	r0, [pc, #168]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a64:	f001 f93c 	bl	8002ce0 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_DFSDM_FilterMspInit+0x356>
    {
      Error_Handler();
 8001a6e:	f7ff fe33 	bl	80016d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
 8001a84:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <HAL_DFSDM_FilterMspInit+0x3f0>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT3 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_DFSDM_FilterMspInit+0x3f4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d136      	bne.n	8001b02 <HAL_DFSDM_FilterMspInit+0x3e6>
    hdma_dfsdm1_flt3.Instance = DMA1_Stream3;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_DFSDM_FilterMspInit+0x3fc>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt3.Init.Request = DMA_REQUEST_DFSDM1_FLT3;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001a9c:	2268      	movs	r2, #104	; 0x68
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt3.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001ab6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac2:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt3.Init.Mode = DMA_CIRCULAR;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aca:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt3.Init.Priority = DMA_PRIORITY_HIGH;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad2:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt3) != HAL_OK)
 8001ada:	480e      	ldr	r0, [pc, #56]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001adc:	f001 f900 	bl	8002ce0 <HAL_DMA_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_DFSDM_FilterMspInit+0x3ce>
    {
      Error_Handler();
 8001ae6:	f7ff fdf7 	bl	80016d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt3);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001af0:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt3);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <HAL_DFSDM_FilterMspInit+0x3f8>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001b02:	bf00      	nop
 8001b04:	37e8      	adds	r7, #232	; 0xe8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	240008e8 	.word	0x240008e8
 8001b10:	40017280 	.word	0x40017280
 8001b14:	24000870 	.word	0x24000870
 8001b18:	40020058 	.word	0x40020058

08001b1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ba      	sub	sp, #232	; 0xe8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	22bc      	movs	r2, #188	; 0xbc
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f008 fc67 	bl	800a410 <memset>
  if(DFSDM1_Init == 0)
 8001b42:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_DFSDM_ChannelMspInit+0x18c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 80aa 	bne.w	8001ca0 <HAL_DFSDM_ChannelMspInit+0x184>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001b4c:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x190>)
 8001b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001b50:	2305      	movs	r3, #5
 8001b52:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001b58:	2305      	movs	r3, #5
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001b70:	2301      	movs	r3, #1
 8001b72:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 f8bc 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_DFSDM_ChannelMspInit+0x72>
    {
      Error_Handler();
 8001b8a:	f7ff fda5 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_DFSDM_ChannelMspInit+0x194>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_DFSDM_ChannelMspInit+0x194>)
 8001b96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_DFSDM_ChannelMspInit+0x194>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10e      	bne.n	8001bbe <HAL_DFSDM_ChannelMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba6:	4a43      	ldr	r2, [pc, #268]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	4a34      	ldr	r2, [pc, #208]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_DFSDM_ChannelMspInit+0x198>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE4     ------> DFSDM1_DATIN3
    PB1     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c18:	2310      	movs	r3, #16
 8001c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001c30:	2303      	movs	r3, #3
 8001c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481e      	ldr	r0, [pc, #120]	; (8001cb8 <HAL_DFSDM_ChannelMspInit+0x19c>)
 8001c3e:	f003 fe89 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4815      	ldr	r0, [pc, #84]	; (8001cbc <HAL_DFSDM_ChannelMspInit+0x1a0>)
 8001c68:	f003 fe74 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <HAL_DFSDM_ChannelMspInit+0x1a4>)
 8001c92:	f003 fe5f 	bl	8005954 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_DFSDM_ChannelMspInit+0x18c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a02      	ldr	r2, [pc, #8]	; (8001ca8 <HAL_DFSDM_ChannelMspInit+0x18c>)
 8001c9e:	6013      	str	r3, [r2, #0]
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	37e8      	adds	r7, #232	; 0xe8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	24000780 	.word	0x24000780
 8001cac:	00200100 	.word	0x00200100
 8001cb0:	2400077c 	.word	0x2400077c
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	58021000 	.word	0x58021000
 8001cbc:	58020400 	.word	0x58020400
 8001cc0:	58020c00 	.word	0x58020c00

08001cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0b8      	sub	sp, #224	; 0xe0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	22bc      	movs	r2, #188	; 0xbc
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f008 fb93 	bl	800a410 <memset>
  if(huart->Instance==USART3)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_UART_MspInit+0x12c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d178      	bne.n	8001de6 <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fffa 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d0e:	f7ff fce3 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d18:	4a36      	ldr	r2, [pc, #216]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_UART_MspInit+0x130>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d72:	4619      	mov	r1, r3
 8001d74:	4820      	ldr	r0, [pc, #128]	; (8001df8 <HAL_UART_MspInit+0x134>)
 8001d76:	f003 fded 	bl	8005954 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_UART_MspInit+0x13c>)
 8001d7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d82:	222e      	movs	r2, #46	; 0x2e
 8001d84:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d88:	2240      	movs	r2, #64	; 0x40
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d98:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001dae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001db2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001dba:	4810      	ldr	r0, [pc, #64]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001dbc:	f000 ff90 	bl	8002ce0 <HAL_DMA_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001dc6:	f7ff fc87 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001dce:	679a      	str	r2, [r3, #120]	; 0x78
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_UART_MspInit+0x138>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2027      	movs	r0, #39	; 0x27
 8001ddc:	f000 fa63 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001de0:	2027      	movs	r0, #39	; 0x27
 8001de2:	f000 fa7a 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	37e0      	adds	r7, #224	; 0xe0
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40004800 	.word	0x40004800
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58020c00 	.word	0x58020c00
 8001dfc:	240009ec 	.word	0x240009ec
 8001e00:	40020410 	.word	0x40020410

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f000 f902 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA1_Stream0_IRQHandler+0x10>)
 8001e5e:	f002 fa67 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000b84 	.word	0x24000b84

08001e6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA1_Stream1_IRQHandler+0x10>)
 8001e72:	f002 fa5d 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000ab8 	.word	0x24000ab8

08001e80 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <DMA1_Stream2_IRQHandler+0x10>)
 8001e86:	f002 fa53 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	240008e8 	.word	0x240008e8

08001e94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt3);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA1_Stream3_IRQHandler+0x10>)
 8001e9a:	f002 fa49 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000870 	.word	0x24000870

08001ea8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <USART3_IRQHandler+0x10>)
 8001eae:	f006 fb57 	bl	8008560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	240007e0 	.word	0x240007e0

08001ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA2_Stream0_IRQHandler+0x10>)
 8001ec2:	f002 fa35 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	240009ec 	.word	0x240009ec

08001ed0 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001ed6:	f000 fc9d 	bl	8002814 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24000960 	.word	0x24000960

08001ee4 <DFSDM1_FLT1_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter1 global interrupt.
  */
void DFSDM1_FLT1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT1_IRQn 0 */

  /* USER CODE END DFSDM1_FLT1_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DFSDM1_FLT1_IRQHandler+0x10>)
 8001eea:	f000 fc93 	bl	8002814 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT1_IRQn 1 */

  /* USER CODE END DFSDM1_FLT1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	24000bfc 	.word	0x24000bfc

08001ef8 <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <DFSDM1_FLT2_IRQHandler+0x10>)
 8001efe:	f000 fc89 	bl	8002814 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	24000a64 	.word	0x24000a64

08001f0c <DFSDM1_FLT3_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter3 global interrupt.
  */
void DFSDM1_FLT3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT3_IRQn 0 */

  /* USER CODE END DFSDM1_FLT3_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter3);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DFSDM1_FLT3_IRQHandler+0x10>)
 8001f12:	f000 fc7f 	bl	8002814 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT3_IRQn 1 */

  /* USER CODE END DFSDM1_FLT3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000b30 	.word	0x24000b30

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f24:	f7fe fb54 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	; (8001f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f008 fa3b 	bl	800a3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7fe fc5d 	bl	8000810 <main>
  bx  lr
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f60:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8001f64:	0800a488 	.word	0x0800a488
  ldr r2, =_sbss
 8001f68:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8001f6c:	24000cc4 	.word	0x24000cc4

08001f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC3_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 f988 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f80:	f004 fce6 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_Init+0x68>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	4913      	ldr	r1, [pc, #76]	; (8001fe0 <HAL_Init+0x6c>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_Init+0x68>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_Init+0x6c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <HAL_Init+0x70>)
 8001fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_Init+0x74>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f814 	bl	8001fec <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e002      	b.n	8001fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fb89 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	0800a438 	.word	0x0800a438
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24000000 	.word	0x24000000

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_InitTick+0x60>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e021      	b.n	8002044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_InitTick+0x64>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_InitTick+0x60>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f96d 	bl	80022f6 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 f937 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_InitTick+0x68>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	240002c8 	.word	0x240002c8
 8002050:	24000000 	.word	0x24000000
 8002054:	240002c4 	.word	0x240002c4

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	240002c8 	.word	0x240002c8
 800207c:	24000cc0 	.word	0x24000cc0

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	24000cc0 	.word	0x24000cc0

08002098 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetREVID+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0c1b      	lsrs	r3, r3, #16
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	5c001000 	.word	0x5c001000

080020b0 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80020c0:	4413      	add	r3, r2
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	0158      	lsls	r0, r3, #5
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_EXTI_GenerateSWInterrupt+0x3c>)
 80020d6:	4403      	add	r3, r0
 80020d8:	4618      	mov	r0, r3
 80020da:	ea41 0302 	orr.w	r3, r1, r2
 80020de:	6003      	str	r3, [r0, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	58000008 	.word	0x58000008

080020f0 <__NVIC_SetPriorityGrouping>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <__NVIC_SetPriorityGrouping+0x40>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	4313      	orrs	r3, r2
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x40>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00
 8002134:	05fa0000 	.word	0x05fa0000

08002138 <__NVIC_GetPriorityGrouping>:
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff29 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff40 	bl	8002138 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff90 	bl	80021e4 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5f 	bl	8002190 <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff33 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa4 	bl	800224c <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0b4      	b.n	800248c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002322:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <HAL_DFSDM_ChannelInit+0x184>)
 8002324:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_DFSDM_ChannelInit+0x188>)
 8002328:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 800232a:	4b5c      	ldr	r3, [pc, #368]	; (800249c <HAL_DFSDM_ChannelInit+0x18c>)
 800232c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fc32 	bl	8002b9c <DFSDM_GetChannelFromInstance>
 8002338:	4603      	mov	r3, r0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0a0      	b.n	800248c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fbe6 	bl	8001b1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d125      	bne.n	80023ae <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	3b01      	subs	r3, #1
 800239a:	041b      	lsls	r3, r3, #16
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80023bc:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023cc:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023d2:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020f 	bic.w	r2, r2, #15
 80023ea:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002412:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f002 0207 	and.w	r2, r2, #7
 800243e:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fb8f 	bl	8002b9c <DFSDM_GetChannelFromInstance>
 800247e:	4603      	mov	r3, r0
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	24000784 	.word	0x24000784
 8002498:	24000788 	.word	0x24000788
 800249c:	40017000 	.word	0x40017000

080024a0 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0c8      	b.n	800266c <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 80024da:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_DFSDM_FilterInit+0x1ac>)
 80024dc:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d109      	bne.n	80024fc <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d003      	beq.n	80024f8 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b7      	b.n	800266c <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff f901 	bl	800171c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002528:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7a1b      	ldrb	r3, [r3, #8]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002552:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7a5b      	ldrb	r3, [r3, #9]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e007      	b.n	800257e <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_DFSDM_FilterInit+0x1b0>)
 800258a:	400b      	ands	r3, r1
 800258c:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d108      	bne.n	80025a8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7c1b      	ldrb	r3, [r3, #16]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0210 	orr.w	r2, r2, #16
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0210 	bic.w	r2, r2, #16
 80025d0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7c5b      	ldrb	r3, [r3, #17]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0220 	bic.w	r2, r2, #32
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6959      	ldr	r1, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_DFSDM_FilterInit+0x1b4>)
 8002608:	400b      	ands	r3, r1
 800260a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6959      	ldr	r1, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	3b01      	subs	r3, #1
 800261c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800261e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002626:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7c1a      	ldrb	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40017100 	.word	0x40017100
 8002678:	ffff80f7 	.word	0xffff80f7
 800267c:	1c00ff00 	.word	0x1c00ff00

08002680 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02c      	beq.n	80026f4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026a0:	2bff      	cmp	r3, #255	; 0xff
 80026a2:	d027      	beq.n	80026f4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80026b0:	400b      	ands	r3, r1
 80026b2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10d      	bne.n	80026d6 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e00a      	b.n	80026ec <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
 80026f2:	e001      	b.n	80026f8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	f8fbffff 	.word	0xf8fbffff

0800270c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
 800272c:	e066      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273c:	d002      	beq.n	8002744 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e05b      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d002      	beq.n	800276a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
 8002768:	e048      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d102      	bne.n	800278c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
 800278a:	e037      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d004      	beq.n	80027a0 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800279c:	2b03      	cmp	r3, #3
 800279e:	d12b      	bne.n	80027f8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80027ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d101      	bne.n	80027c0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 80027be:	e000      	b.n	80027c2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80027c0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	331c      	adds	r3, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f000 fdde 	bl	8003398 <HAL_DMA_Start_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	22ff      	movs	r2, #255	; 0xff
 80027e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027ee:	e005      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa1f 	bl	8002c34 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027f6:	e001      	b.n	80027fc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	08002b5d 	.word	0x08002b5d
 800280c:	08002b79 	.word	0x08002b79
 8002810:	08002b41 	.word	0x08002b41

08002814 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  const DFSDM_Filter_TypeDef   *filter0Instance;
  uint32_t channelNumber;

  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61fb      	str	r3, [r7, #28]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
    channelHandleTable = a_dfsdm2ChannelHandle;
    filter0Instance    = DFSDM2_Filter0;
    channelNumber      = DFSDM2_CHANNEL_NUMBER;
  }
#else /* DFSDM2_Channel0 */
  channelHandleTable = a_dfsdm1ChannelHandle;
 800282c:	4b9e      	ldr	r3, [pc, #632]	; (8002aa8 <HAL_DFSDM_IRQHandler+0x294>)
 800282e:	617b      	str	r3, [r7, #20]
  filter0Instance    = DFSDM1_Filter0;
 8002830:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <HAL_DFSDM_IRQHandler+0x298>)
 8002832:	613b      	str	r3, [r7, #16]
  channelNumber      = DFSDM1_CHANNEL_NUMBER;
 8002834:	2308      	movs	r3, #8
 8002836:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check if overrun occurs during regular conversion */
  if(((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00f      	beq.n	8002862 <HAL_DFSDM_IRQHandler+0x4e>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
  if(((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_DFSDM_IRQHandler+0x4e>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2208      	movs	r2, #8
 8002852:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f966 	bl	8002b2c <HAL_DFSDM_FilterErrorCallback>
 8002860:	e149      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00f      	beq.n	800288c <HAL_DFSDM_IRQHandler+0x78>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0304 	and.w	r3, r3, #4
  else if(((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_DFSDM_IRQHandler+0x78>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2204      	movs	r2, #4
 800287c:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f951 	bl	8002b2c <HAL_DFSDM_FilterErrorCallback>
 800288a:	e134      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if end of regular conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <HAL_DFSDM_IRQHandler+0xce>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0302 	and.w	r3, r3, #2
  else if(((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_DFSDM_IRQHandler+0xce>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fe fe3f 	bl	8001524 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8122 	bne.w	8002af4 <HAL_DFSDM_IRQHandler+0x2e0>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 811d 	bne.w	8002af4 <HAL_DFSDM_IRQHandler+0x2e0>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0202 	bic.w	r2, r2, #2
 80028c8:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d101      	bne.n	80028d8 <HAL_DFSDM_IRQHandler+0xc4>
 80028d4:	2201      	movs	r2, #1
 80028d6:	e000      	b.n	80028da <HAL_DFSDM_IRQHandler+0xc6>
 80028d8:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80028e0:	e108      	b.n	8002af4 <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if end of injected conversion */
  else if(((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d034      	beq.n	8002956 <HAL_DFSDM_IRQHandler+0x142>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0301 	and.w	r3, r3, #1
  else if(((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02f      	beq.n	8002956 <HAL_DFSDM_IRQHandler+0x142>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f902 	bl	8002b00 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	649a      	str	r2, [r3, #72]	; 0x48
    if(hdfsdm_filter->InjConvRemaining == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80f3 	bne.w	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
    {
      /* End of conversion if trigger is software */
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_DFSDM_IRQHandler+0x12a>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 800292e:	2b03      	cmp	r3, #3
 8002930:	d101      	bne.n	8002936 <HAL_DFSDM_IRQHandler+0x122>
 8002932:	2201      	movs	r2, #1
 8002934:	e000      	b.n	8002938 <HAL_DFSDM_IRQHandler+0x124>
 8002936:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_DFSDM_IRQHandler+0x13a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	e000      	b.n	8002950 <HAL_DFSDM_IRQHandler+0x13c>
 800294e:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6493      	str	r3, [r2, #72]	; 0x48
    if(hdfsdm_filter->InjConvRemaining == 0U)
 8002954:	e0cf      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
    }
  }
  /* Check if analog watchdog occurs */
  else if(((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d03f      	beq.n	80029e0 <HAL_DFSDM_IRQHandler+0x1cc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0310 	and.w	r3, r3, #16
  else if(((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8002966:	2b00      	cmp	r3, #0
 8002968:	d03a      	beq.n	80029e0 <HAL_DFSDM_IRQHandler+0x1cc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_DFSDM_IRQHandler+0x16e>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DFSDM_IRQHandler+0x170>
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
    if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_DFSDM_IRQHandler+0x18c>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    }
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 8002992:	e005      	b.n	80029a0 <HAL_DFSDM_IRQHandler+0x18c>
    {
      channel++;
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	3301      	adds	r3, #1
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
      reg = reg >> 1;
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_DFSDM_IRQHandler+0x1a0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3ef      	bcc.n	8002994 <HAL_DFSDM_IRQHandler+0x180>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_DFSDM_IRQHandler+0x1b2>
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	3308      	adds	r3, #8
 80029be:	2201      	movs	r2, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	e003      	b.n	80029ce <HAL_DFSDM_IRQHandler+0x1ba>
 80029c6:	2201      	movs	r2, #1
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f89b 	bl	8002b14 <HAL_DFSDM_FilterAwdCallback>
  {
 80029de:	e08a      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
#endif
  }
  /* Check if clock absence occurs */
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d145      	bne.n	8002a76 <HAL_DFSDM_IRQHandler+0x262>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d040      	beq.n	8002a76 <HAL_DFSDM_IRQHandler+0x262>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03b      	beq.n	8002a76 <HAL_DFSDM_IRQHandler+0x262>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (channel < channelNumber)
 8002a0e:	e02d      	b.n	8002a6c <HAL_DFSDM_IRQHandler+0x258>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (channelHandleTable[channel] != NULL))
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d022      	beq.n	8002a60 <HAL_DFSDM_IRQHandler+0x24c>
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4413      	add	r3, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <HAL_DFSDM_IRQHandler+0x24c>
      {
        /* Check clock absence has been enabled for this channel */
        if ((channelHandleTable[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4413      	add	r3, r2
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_DFSDM_IRQHandler+0x24c>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	f103 0210 	add.w	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          channelHandleTable[channel]->CkabCallback(channelHandleTable[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(channelHandleTable[channel]);
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4413      	add	r3, r2
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fd20 	bl	80024a0 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	3301      	adds	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (channel < channelNumber)
 8002a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3cd      	bcc.n	8002a10 <HAL_DFSDM_IRQHandler+0x1fc>
  {
 8002a74:	e03f      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
    }
  }
  /* Check if short circuit detection occurs */
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d13a      	bne.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if((hdfsdm_filter->Instance == filter0Instance) && \
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d035      	beq.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d030      	beq.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0e1b      	lsrs	r3, r3, #24
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 8002aa4:	e00a      	b.n	8002abc <HAL_DFSDM_IRQHandler+0x2a8>
 8002aa6:	bf00      	nop
 8002aa8:	24000788 	.word	0x24000788
 8002aac:	40017100 	.word	0x40017100
    {
      channel++;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    while (((reg & 1U) == 0U) && (channel < (channelNumber - 1U)))
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_DFSDM_IRQHandler+0x2bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3ef      	bcc.n	8002ab0 <HAL_DFSDM_IRQHandler+0x29c>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f103 0218 	add.w	r2, r3, #24
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    channelHandleTable[channel]->ScdCallback(channelHandleTable[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(channelHandleTable[channel]);
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4413      	add	r3, r2
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fce1 	bl	80024b4 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8002af2:	e000      	b.n	8002af6 <HAL_DFSDM_IRQHandler+0x2e2>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002af4:	bf00      	nop
}
 8002af6:	bf00      	nop
 8002af8:	3738      	adds	r7, #56	; 0x38
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop

08002b00 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7fe fc10 	bl	8001374 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7fe fcda 	bl	8001524 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff ffcd 	bl	8002b2c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e02b      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <DFSDM_GetChannelFromInstance+0x80>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d102      	bne.n	8002bc0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e024      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <DFSDM_GetChannelFromInstance+0x84>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e01d      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <DFSDM_GetChannelFromInstance+0x88>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d102      	bne.n	8002bdc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e016      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <DFSDM_GetChannelFromInstance+0x8c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002be4:	2304      	movs	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e00f      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <DFSDM_GetChannelFromInstance+0x90>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d102      	bne.n	8002bf8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e008      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <DFSDM_GetChannelFromInstance+0x94>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002c00:	2306      	movs	r3, #6
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e001      	b.n	8002c0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002c06:	2307      	movs	r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40017000 	.word	0x40017000
 8002c1c:	40017020 	.word	0x40017020
 8002c20:	40017040 	.word	0x40017040
 8002c24:	40017060 	.word	0x40017060
 8002c28:	40017080 	.word	0x40017080
 8002c2c:	400170a0 	.word	0x400170a0
 8002c30:	400170c0 	.word	0x400170c0

08002c34 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e033      	b.n	8002cbe <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c74:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d116      	bne.n	8002cbe <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0202 	orr.w	r2, r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <DFSDM_RegConvStart+0x84>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	e000      	b.n	8002cba <DFSDM_RegConvStart+0x86>
 8002cb8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <DFSDM_RegConvStart+0x98>
 8002cc8:	2202      	movs	r2, #2
 8002cca:	e000      	b.n	8002cce <DFSDM_RegConvStart+0x9a>
 8002ccc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f9ca 	bl	8002080 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e316      	b.n	8003326 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a66      	ldr	r2, [pc, #408]	; (8002e98 <HAL_DMA_Init+0x1b8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_DMA_Init+0x1bc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a63      	ldr	r2, [pc, #396]	; (8002ea0 <HAL_DMA_Init+0x1c0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a62      	ldr	r2, [pc, #392]	; (8002ea4 <HAL_DMA_Init+0x1c4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a60      	ldr	r2, [pc, #384]	; (8002ea8 <HAL_DMA_Init+0x1c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5f      	ldr	r2, [pc, #380]	; (8002eac <HAL_DMA_Init+0x1cc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <HAL_DMA_Init+0x1d0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5c      	ldr	r2, [pc, #368]	; (8002eb4 <HAL_DMA_Init+0x1d4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <HAL_DMA_Init+0x1d8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a59      	ldr	r2, [pc, #356]	; (8002ebc <HAL_DMA_Init+0x1dc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_DMA_Init+0x1e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_DMA_Init+0x1e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_DMA_Init+0x1e8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a53      	ldr	r2, [pc, #332]	; (8002ecc <HAL_DMA_Init+0x1ec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_DMA_Init+0x1f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a50      	ldr	r2, [pc, #320]	; (8002ed4 <HAL_DMA_Init+0x1f4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA_Init+0xbc>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_DMA_Init+0xbe>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 813b 	beq.w	800301a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_DMA_Init+0x1b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_DMA_Init+0x1bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_DMA_Init+0x1c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_DMA_Init+0x1c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_DMA_Init+0x1c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_DMA_Init+0x1cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <HAL_DMA_Init+0x1d0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_DMA_Init+0x1d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	; (8002eb8 <HAL_DMA_Init+0x1d8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <HAL_DMA_Init+0x1dc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_DMA_Init+0x1e0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_DMA_Init+0x1e4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <HAL_DMA_Init+0x1e8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_DMA_Init+0x1ec>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <HAL_DMA_Init+0x1f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_DMA_Init+0x1f4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <HAL_DMA_Init+0x186>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_DMA_Init+0x196>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e76:	e02f      	b.n	8002ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e78:	f7ff f902 	bl	8002080 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d928      	bls.n	8002ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e246      	b.n	8003326 <HAL_DMA_Init+0x646>
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1c8      	bne.n	8002e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_DMA_Init+0x420>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4313      	orrs	r3, r2
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f3c:	4b71      	ldr	r3, [pc, #452]	; (8003104 <HAL_DMA_Init+0x424>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b71      	ldr	r3, [pc, #452]	; (8003108 <HAL_DMA_Init+0x428>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d328      	bcc.n	8002f9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b28      	cmp	r3, #40	; 0x28
 8002f50:	d903      	bls.n	8002f5a <HAL_DMA_Init+0x27a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b2e      	cmp	r3, #46	; 0x2e
 8002f58:	d917      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f60:	d903      	bls.n	8002f6a <HAL_DMA_Init+0x28a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b42      	cmp	r3, #66	; 0x42
 8002f68:	d90f      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b46      	cmp	r3, #70	; 0x46
 8002f70:	d903      	bls.n	8002f7a <HAL_DMA_Init+0x29a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b48      	cmp	r3, #72	; 0x48
 8002f78:	d907      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b4e      	cmp	r3, #78	; 0x4e
 8002f80:	d905      	bls.n	8002f8e <HAL_DMA_Init+0x2ae>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b52      	cmp	r3, #82	; 0x52
 8002f88:	d801      	bhi.n	8002f8e <HAL_DMA_Init+0x2ae>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_Init+0x2b0>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d117      	bne.n	8002ff6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 fb31 	bl	8005640 <DMA_CheckFifoParam>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e197      	b.n	8003326 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f002 fa6c 	bl	80054dc <DMA_CalcBaseAndBitshift>
 8003004:	4603      	mov	r3, r0
 8003006:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	223f      	movs	r2, #63	; 0x3f
 8003012:	409a      	lsls	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e0cd      	b.n	80031b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <HAL_DMA_Init+0x42c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a39      	ldr	r2, [pc, #228]	; (8003110 <HAL_DMA_Init+0x430>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_Init+0x38a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_DMA_Init+0x434>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a36      	ldr	r2, [pc, #216]	; (8003118 <HAL_DMA_Init+0x438>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a35      	ldr	r2, [pc, #212]	; (800311c <HAL_DMA_Init+0x43c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Init+0x38a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a33      	ldr	r2, [pc, #204]	; (8003120 <HAL_DMA_Init+0x440>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a32      	ldr	r2, [pc, #200]	; (8003124 <HAL_DMA_Init+0x444>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	; (8003128 <HAL_DMA_Init+0x448>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_DMA_Init+0x38e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_DMA_Init+0x390>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_DMA_Init+0x42c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d021      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_DMA_Init+0x430>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01c      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_DMA_Init+0x434>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d017      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_DMA_Init+0x438>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_DMA_Init+0x43c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00d      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_DMA_Init+0x440>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_DMA_Init+0x444>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_DMA_Init+0x448>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_DMA_Init+0x44c>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d020      	beq.n	8003130 <HAL_DMA_Init+0x450>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d102      	bne.n	80030fc <HAL_DMA_Init+0x41c>
 80030f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030fa:	e01a      	b.n	8003132 <HAL_DMA_Init+0x452>
 80030fc:	2300      	movs	r3, #0
 80030fe:	e018      	b.n	8003132 <HAL_DMA_Init+0x452>
 8003100:	fe10803f 	.word	0xfe10803f
 8003104:	5c001000 	.word	0x5c001000
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	58025408 	.word	0x58025408
 8003110:	5802541c 	.word	0x5802541c
 8003114:	58025430 	.word	0x58025430
 8003118:	58025444 	.word	0x58025444
 800311c:	58025458 	.word	0x58025458
 8003120:	5802546c 	.word	0x5802546c
 8003124:	58025480 	.word	0x58025480
 8003128:	58025494 	.word	0x58025494
 800312c:	fffe000f 	.word	0xfffe000f
 8003130:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003160:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b6e      	ldr	r3, [pc, #440]	; (8003330 <HAL_DMA_Init+0x650>)
 8003178:	4413      	add	r3, r2
 800317a:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <HAL_DMA_Init+0x654>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f002 f9a7 	bl	80054dc <DMA_CalcBaseAndBitshift>
 800318e:	4603      	mov	r3, r0
 8003190:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	e008      	b.n	80031b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0b7      	b.n	8003326 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	; (8003338 <HAL_DMA_Init+0x658>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d072      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_DMA_Init+0x65c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d06d      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_DMA_Init+0x660>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d068      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	; (8003344 <HAL_DMA_Init+0x664>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d063      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	; (8003348 <HAL_DMA_Init+0x668>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d05e      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	; (800334c <HAL_DMA_Init+0x66c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d059      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	; (8003350 <HAL_DMA_Init+0x670>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d054      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a54      	ldr	r2, [pc, #336]	; (8003354 <HAL_DMA_Init+0x674>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04f      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a53      	ldr	r2, [pc, #332]	; (8003358 <HAL_DMA_Init+0x678>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a51      	ldr	r2, [pc, #324]	; (800335c <HAL_DMA_Init+0x67c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_DMA_Init+0x680>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <HAL_DMA_Init+0x684>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4d      	ldr	r2, [pc, #308]	; (8003368 <HAL_DMA_Init+0x688>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_DMA_Init+0x68c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <HAL_DMA_Init+0x690>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a48      	ldr	r2, [pc, #288]	; (8003374 <HAL_DMA_Init+0x694>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a47      	ldr	r2, [pc, #284]	; (8003378 <HAL_DMA_Init+0x698>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a45      	ldr	r2, [pc, #276]	; (800337c <HAL_DMA_Init+0x69c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a44      	ldr	r2, [pc, #272]	; (8003380 <HAL_DMA_Init+0x6a0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a42      	ldr	r2, [pc, #264]	; (8003384 <HAL_DMA_Init+0x6a4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_DMA_Init+0x6a8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_DMA_Init+0x6ac>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <HAL_DMA_Init+0x6b0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_DMA_Init+0x6b4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_Init+0x5ca>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_DMA_Init+0x5cc>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d032      	beq.n	8003316 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f002 fa41 	bl	8005738 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d102      	bne.n	80032c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_DMA_Init+0x624>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d80c      	bhi.n	8003304 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f002 fabe 	bl	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	e008      	b.n	8003316 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	a7fdabf8 	.word	0xa7fdabf8
 8003334:	cccccccd 	.word	0xcccccccd
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494

08003398 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e226      	b.n	8003802 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Start_IT+0x2a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e21f      	b.n	8003802 <HAL_DMA_Start_IT+0x46a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 820a 	bne.w	80037ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a68      	ldr	r2, [pc, #416]	; (800358c <HAL_DMA_Start_IT+0x1f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a66      	ldr	r2, [pc, #408]	; (8003590 <HAL_DMA_Start_IT+0x1f8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_DMA_Start_IT+0x1fc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_DMA_Start_IT+0x200>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a62      	ldr	r2, [pc, #392]	; (800359c <HAL_DMA_Start_IT+0x204>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_DMA_Start_IT+0x208>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5f      	ldr	r2, [pc, #380]	; (80035a4 <HAL_DMA_Start_IT+0x20c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5d      	ldr	r2, [pc, #372]	; (80035a8 <HAL_DMA_Start_IT+0x210>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_DMA_Start_IT+0x214>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5a      	ldr	r2, [pc, #360]	; (80035b0 <HAL_DMA_Start_IT+0x218>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a59      	ldr	r2, [pc, #356]	; (80035b4 <HAL_DMA_Start_IT+0x21c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_DMA_Start_IT+0x220>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_DMA_Start_IT+0x224>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <HAL_DMA_Start_IT+0x228>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_DMA_Start_IT+0x22c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a51      	ldr	r2, [pc, #324]	; (80035c8 <HAL_DMA_Start_IT+0x230>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <HAL_DMA_Start_IT+0x100>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_DMA_Start_IT+0x110>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 fe68 	bl	8005184 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_DMA_Start_IT+0x1f4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d04a      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a33      	ldr	r2, [pc, #204]	; (8003590 <HAL_DMA_Start_IT+0x1f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d045      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_DMA_Start_IT+0x1fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d040      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_DMA_Start_IT+0x200>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d03b      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2e      	ldr	r2, [pc, #184]	; (800359c <HAL_DMA_Start_IT+0x204>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d036      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <HAL_DMA_Start_IT+0x208>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_DMA_Start_IT+0x20c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02c      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <HAL_DMA_Start_IT+0x210>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d027      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <HAL_DMA_Start_IT+0x214>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_DMA_Start_IT+0x218>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <HAL_DMA_Start_IT+0x21c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <HAL_DMA_Start_IT+0x220>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_DMA_Start_IT+0x224>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_DMA_Start_IT+0x228>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <HAL_DMA_Start_IT+0x22c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <HAL_DMA_Start_IT+0x230>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Start_IT+0x1c0>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_DMA_Start_IT+0x1c2>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 021e 	bic.w	r2, r3, #30
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0216 	orr.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03e      	beq.n	80035f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0208 	orr.w	r2, r2, #8
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e035      	b.n	80035f8 <HAL_DMA_Start_IT+0x260>
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020e 	bic.w	r2, r3, #14
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 020a 	orr.w	r2, r2, #10
 80035de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0204 	orr.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a83      	ldr	r2, [pc, #524]	; (800380c <HAL_DMA_Start_IT+0x474>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d072      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a82      	ldr	r2, [pc, #520]	; (8003810 <HAL_DMA_Start_IT+0x478>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d06d      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_DMA_Start_IT+0x47c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d068      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7f      	ldr	r2, [pc, #508]	; (8003818 <HAL_DMA_Start_IT+0x480>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d063      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7d      	ldr	r2, [pc, #500]	; (800381c <HAL_DMA_Start_IT+0x484>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d05e      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7c      	ldr	r2, [pc, #496]	; (8003820 <HAL_DMA_Start_IT+0x488>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d059      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7a      	ldr	r2, [pc, #488]	; (8003824 <HAL_DMA_Start_IT+0x48c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d054      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a79      	ldr	r2, [pc, #484]	; (8003828 <HAL_DMA_Start_IT+0x490>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04f      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a77      	ldr	r2, [pc, #476]	; (800382c <HAL_DMA_Start_IT+0x494>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a76      	ldr	r2, [pc, #472]	; (8003830 <HAL_DMA_Start_IT+0x498>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a74      	ldr	r2, [pc, #464]	; (8003834 <HAL_DMA_Start_IT+0x49c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	; (8003838 <HAL_DMA_Start_IT+0x4a0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a71      	ldr	r2, [pc, #452]	; (800383c <HAL_DMA_Start_IT+0x4a4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a70      	ldr	r2, [pc, #448]	; (8003840 <HAL_DMA_Start_IT+0x4a8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <HAL_DMA_Start_IT+0x4ac>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6d      	ldr	r2, [pc, #436]	; (8003848 <HAL_DMA_Start_IT+0x4b0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6b      	ldr	r2, [pc, #428]	; (800384c <HAL_DMA_Start_IT+0x4b4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <HAL_DMA_Start_IT+0x4b8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a68      	ldr	r2, [pc, #416]	; (8003854 <HAL_DMA_Start_IT+0x4bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a67      	ldr	r2, [pc, #412]	; (8003858 <HAL_DMA_Start_IT+0x4c0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	; (800385c <HAL_DMA_Start_IT+0x4c4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a64      	ldr	r2, [pc, #400]	; (8003860 <HAL_DMA_Start_IT+0x4c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a62      	ldr	r2, [pc, #392]	; (8003864 <HAL_DMA_Start_IT+0x4cc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a61      	ldr	r2, [pc, #388]	; (8003868 <HAL_DMA_Start_IT+0x4d0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Start_IT+0x354>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_DMA_Start_IT+0x356>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01a      	beq.n	8003728 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	; (800380c <HAL_DMA_Start_IT+0x474>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a36      	ldr	r2, [pc, #216]	; (8003810 <HAL_DMA_Start_IT+0x478>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	; (8003814 <HAL_DMA_Start_IT+0x47c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a33      	ldr	r2, [pc, #204]	; (8003818 <HAL_DMA_Start_IT+0x480>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	; (800381c <HAL_DMA_Start_IT+0x484>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a30      	ldr	r2, [pc, #192]	; (8003820 <HAL_DMA_Start_IT+0x488>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <HAL_DMA_Start_IT+0x48c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_DMA_Start_IT+0x490>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <HAL_DMA_Start_IT+0x494>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_DMA_Start_IT+0x498>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <HAL_DMA_Start_IT+0x49c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_DMA_Start_IT+0x4a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <HAL_DMA_Start_IT+0x4a4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_DMA_Start_IT+0x4a8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a22      	ldr	r2, [pc, #136]	; (8003844 <HAL_DMA_Start_IT+0x4ac>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_DMA_Start_IT+0x4b0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <HAL_DMA_Start_IT+0x442>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e012      	b.n	8003800 <HAL_DMA_Start_IT+0x468>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e009      	b.n	8003800 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
 800384c:	58025408 	.word	0x58025408
 8003850:	5802541c 	.word	0x5802541c
 8003854:	58025430 	.word	0x58025430
 8003858:	58025444 	.word	0x58025444
 800385c:	58025458 	.word	0x58025458
 8003860:	5802546c 	.word	0x5802546c
 8003864:	58025480 	.word	0x58025480
 8003868:	58025494 	.word	0x58025494

0800386c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003874:	f7fe fc04 	bl	8002080 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e2dc      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e2cd      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a76      	ldr	r2, [pc, #472]	; (8003a80 <HAL_DMA_Abort+0x214>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a74      	ldr	r2, [pc, #464]	; (8003a84 <HAL_DMA_Abort+0x218>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a73      	ldr	r2, [pc, #460]	; (8003a88 <HAL_DMA_Abort+0x21c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a71      	ldr	r2, [pc, #452]	; (8003a8c <HAL_DMA_Abort+0x220>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a70      	ldr	r2, [pc, #448]	; (8003a90 <HAL_DMA_Abort+0x224>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <HAL_DMA_Abort+0x228>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6d      	ldr	r2, [pc, #436]	; (8003a98 <HAL_DMA_Abort+0x22c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6b      	ldr	r2, [pc, #428]	; (8003a9c <HAL_DMA_Abort+0x230>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_DMA_Abort+0x234>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <HAL_DMA_Abort+0x238>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_DMA_Abort+0x23c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	; (8003aac <HAL_DMA_Abort+0x240>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a64      	ldr	r2, [pc, #400]	; (8003ab0 <HAL_DMA_Abort+0x244>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a62      	ldr	r2, [pc, #392]	; (8003ab4 <HAL_DMA_Abort+0x248>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <HAL_DMA_Abort+0x24c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5f      	ldr	r2, [pc, #380]	; (8003abc <HAL_DMA_Abort+0x250>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Abort+0xda>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_DMA_Abort+0xdc>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 021e 	bic.w	r2, r2, #30
 800395a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e00a      	b.n	800398a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3c      	ldr	r2, [pc, #240]	; (8003a80 <HAL_DMA_Abort+0x214>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d072      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <HAL_DMA_Abort+0x218>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d06d      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_DMA_Abort+0x21c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d068      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <HAL_DMA_Abort+0x220>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d063      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_DMA_Abort+0x224>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d05e      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_DMA_Abort+0x228>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d059      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_DMA_Abort+0x22c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d054      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_DMA_Abort+0x230>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04f      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_DMA_Abort+0x234>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_DMA_Abort+0x238>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <HAL_DMA_Abort+0x23c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <HAL_DMA_Abort+0x240>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_DMA_Abort+0x244>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_DMA_Abort+0x248>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_DMA_Abort+0x24c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_DMA_Abort+0x250>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <HAL_DMA_Abort+0x254>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_DMA_Abort+0x258>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_DMA_Abort+0x25c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_DMA_Abort+0x260>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_DMA_Abort+0x264>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_DMA_Abort+0x268>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_DMA_Abort+0x26c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_DMA_Abort+0x270>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d132      	bne.n	8003ae0 <HAL_DMA_Abort+0x274>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e031      	b.n	8003ae2 <HAL_DMA_Abort+0x276>
 8003a7e:	bf00      	nop
 8003a80:	40020010 	.word	0x40020010
 8003a84:	40020028 	.word	0x40020028
 8003a88:	40020040 	.word	0x40020040
 8003a8c:	40020058 	.word	0x40020058
 8003a90:	40020070 	.word	0x40020070
 8003a94:	40020088 	.word	0x40020088
 8003a98:	400200a0 	.word	0x400200a0
 8003a9c:	400200b8 	.word	0x400200b8
 8003aa0:	40020410 	.word	0x40020410
 8003aa4:	40020428 	.word	0x40020428
 8003aa8:	40020440 	.word	0x40020440
 8003aac:	40020458 	.word	0x40020458
 8003ab0:	40020470 	.word	0x40020470
 8003ab4:	40020488 	.word	0x40020488
 8003ab8:	400204a0 	.word	0x400204a0
 8003abc:	400204b8 	.word	0x400204b8
 8003ac0:	58025408 	.word	0x58025408
 8003ac4:	5802541c 	.word	0x5802541c
 8003ac8:	58025430 	.word	0x58025430
 8003acc:	58025444 	.word	0x58025444
 8003ad0:	58025458 	.word	0x58025458
 8003ad4:	5802546c 	.word	0x5802546c
 8003ad8:	58025480 	.word	0x58025480
 8003adc:	58025494 	.word	0x58025494
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6d      	ldr	r2, [pc, #436]	; (8003cb0 <HAL_DMA_Abort+0x444>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a6b      	ldr	r2, [pc, #428]	; (8003cb4 <HAL_DMA_Abort+0x448>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6a      	ldr	r2, [pc, #424]	; (8003cb8 <HAL_DMA_Abort+0x44c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a68      	ldr	r2, [pc, #416]	; (8003cbc <HAL_DMA_Abort+0x450>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a67      	ldr	r2, [pc, #412]	; (8003cc0 <HAL_DMA_Abort+0x454>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <HAL_DMA_Abort+0x458>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a64      	ldr	r2, [pc, #400]	; (8003cc8 <HAL_DMA_Abort+0x45c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a62      	ldr	r2, [pc, #392]	; (8003ccc <HAL_DMA_Abort+0x460>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a61      	ldr	r2, [pc, #388]	; (8003cd0 <HAL_DMA_Abort+0x464>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5f      	ldr	r2, [pc, #380]	; (8003cd4 <HAL_DMA_Abort+0x468>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_DMA_Abort+0x46c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_DMA_Abort+0x470>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5b      	ldr	r2, [pc, #364]	; (8003ce0 <HAL_DMA_Abort+0x474>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a59      	ldr	r2, [pc, #356]	; (8003ce4 <HAL_DMA_Abort+0x478>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_DMA_Abort+0x47c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_DMA_Abort+0x480>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <HAL_DMA_Abort+0x33c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e007      	b.n	8003bb8 <HAL_DMA_Abort+0x34c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bb8:	e013      	b.n	8003be2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bba:	f7fe fa61 	bl	8002080 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d90c      	bls.n	8003be2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e12d      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2f      	ldr	r2, [pc, #188]	; (8003cb0 <HAL_DMA_Abort+0x444>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <HAL_DMA_Abort+0x448>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <HAL_DMA_Abort+0x44c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <HAL_DMA_Abort+0x450>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <HAL_DMA_Abort+0x454>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <HAL_DMA_Abort+0x458>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <HAL_DMA_Abort+0x45c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_DMA_Abort+0x460>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <HAL_DMA_Abort+0x464>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_DMA_Abort+0x468>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a20      	ldr	r2, [pc, #128]	; (8003cd8 <HAL_DMA_Abort+0x46c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_DMA_Abort+0x470>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_DMA_Abort+0x474>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_DMA_Abort+0x478>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_DMA_Abort+0x47c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_DMA_Abort+0x480>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Abort+0x426>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_Abort+0x428>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02b      	beq.n	8003cf0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e02a      	b.n	8003d06 <HAL_DMA_Abort+0x49a>
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <HAL_DMA_Abort+0x5dc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d072      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_DMA_Abort+0x5e0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d06d      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_DMA_Abort+0x5e4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d068      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_DMA_Abort+0x5e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d063      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a49      	ldr	r2, [pc, #292]	; (8003e58 <HAL_DMA_Abort+0x5ec>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d05e      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a47      	ldr	r2, [pc, #284]	; (8003e5c <HAL_DMA_Abort+0x5f0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d059      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a46      	ldr	r2, [pc, #280]	; (8003e60 <HAL_DMA_Abort+0x5f4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d054      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_DMA_Abort+0x5f8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04f      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <HAL_DMA_Abort+0x5fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a41      	ldr	r2, [pc, #260]	; (8003e6c <HAL_DMA_Abort+0x600>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <HAL_DMA_Abort+0x604>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <HAL_DMA_Abort+0x608>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_DMA_Abort+0x60c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_DMA_Abort+0x610>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_DMA_Abort+0x614>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <HAL_DMA_Abort+0x618>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <HAL_DMA_Abort+0x61c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_DMA_Abort+0x620>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <HAL_DMA_Abort+0x624>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a32      	ldr	r2, [pc, #200]	; (8003e94 <HAL_DMA_Abort+0x628>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a31      	ldr	r2, [pc, #196]	; (8003e98 <HAL_DMA_Abort+0x62c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <HAL_DMA_Abort+0x630>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	; (8003ea0 <HAL_DMA_Abort+0x634>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <HAL_DMA_Abort+0x638>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Abort+0x58e>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_DMA_Abort+0x590>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e08:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e20:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e2a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
 8003e88:	58025408 	.word	0x58025408
 8003e8c:	5802541c 	.word	0x5802541c
 8003e90:	58025430 	.word	0x58025430
 8003e94:	58025444 	.word	0x58025444
 8003e98:	58025458 	.word	0x58025458
 8003e9c:	5802546c 	.word	0x5802546c
 8003ea0:	58025480 	.word	0x58025480
 8003ea4:	58025494 	.word	0x58025494

08003ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e205      	b.n	80042c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e1fa      	b.n	80042c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a8c      	ldr	r2, [pc, #560]	; (8004108 <HAL_DMA_Abort_IT+0x260>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d04a      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a8b      	ldr	r2, [pc, #556]	; (800410c <HAL_DMA_Abort_IT+0x264>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d045      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a89      	ldr	r2, [pc, #548]	; (8004110 <HAL_DMA_Abort_IT+0x268>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d040      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a88      	ldr	r2, [pc, #544]	; (8004114 <HAL_DMA_Abort_IT+0x26c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d03b      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a86      	ldr	r2, [pc, #536]	; (8004118 <HAL_DMA_Abort_IT+0x270>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d036      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a85      	ldr	r2, [pc, #532]	; (800411c <HAL_DMA_Abort_IT+0x274>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d031      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_DMA_Abort_IT+0x278>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02c      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a82      	ldr	r2, [pc, #520]	; (8004124 <HAL_DMA_Abort_IT+0x27c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d027      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a80      	ldr	r2, [pc, #512]	; (8004128 <HAL_DMA_Abort_IT+0x280>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d022      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_DMA_Abort_IT+0x284>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d01d      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_DMA_Abort_IT+0x288>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d018      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_DMA_Abort_IT+0x28c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d013      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7a      	ldr	r2, [pc, #488]	; (8004138 <HAL_DMA_Abort_IT+0x290>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00e      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a79      	ldr	r2, [pc, #484]	; (800413c <HAL_DMA_Abort_IT+0x294>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a77      	ldr	r2, [pc, #476]	; (8004140 <HAL_DMA_Abort_IT+0x298>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a76      	ldr	r2, [pc, #472]	; (8004144 <HAL_DMA_Abort_IT+0x29c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Abort_IT+0xcc>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_DMA_Abort_IT+0xce>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d065      	beq.n	8004046 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a60      	ldr	r2, [pc, #384]	; (8004108 <HAL_DMA_Abort_IT+0x260>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04a      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5e      	ldr	r2, [pc, #376]	; (800410c <HAL_DMA_Abort_IT+0x264>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d045      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <HAL_DMA_Abort_IT+0x268>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d040      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5b      	ldr	r2, [pc, #364]	; (8004114 <HAL_DMA_Abort_IT+0x26c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5a      	ldr	r2, [pc, #360]	; (8004118 <HAL_DMA_Abort_IT+0x270>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d036      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_DMA_Abort_IT+0x274>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a57      	ldr	r2, [pc, #348]	; (8004120 <HAL_DMA_Abort_IT+0x278>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d02c      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a55      	ldr	r2, [pc, #340]	; (8004124 <HAL_DMA_Abort_IT+0x27c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a54      	ldr	r2, [pc, #336]	; (8004128 <HAL_DMA_Abort_IT+0x280>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_DMA_Abort_IT+0x284>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a51      	ldr	r2, [pc, #324]	; (8004130 <HAL_DMA_Abort_IT+0x288>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4f      	ldr	r2, [pc, #316]	; (8004134 <HAL_DMA_Abort_IT+0x28c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4e      	ldr	r2, [pc, #312]	; (8004138 <HAL_DMA_Abort_IT+0x290>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_DMA_Abort_IT+0x294>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4b      	ldr	r2, [pc, #300]	; (8004140 <HAL_DMA_Abort_IT+0x298>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_Abort_IT+0x17a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a49      	ldr	r2, [pc, #292]	; (8004144 <HAL_DMA_Abort_IT+0x29c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <HAL_DMA_Abort_IT+0x18c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e147      	b.n	80042c4 <HAL_DMA_Abort_IT+0x41c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e13e      	b.n	80042c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020e 	bic.w	r2, r2, #14
 8004054:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2b      	ldr	r2, [pc, #172]	; (8004108 <HAL_DMA_Abort_IT+0x260>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04a      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a29      	ldr	r2, [pc, #164]	; (800410c <HAL_DMA_Abort_IT+0x264>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d045      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a28      	ldr	r2, [pc, #160]	; (8004110 <HAL_DMA_Abort_IT+0x268>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <HAL_DMA_Abort_IT+0x26c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03b      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a25      	ldr	r2, [pc, #148]	; (8004118 <HAL_DMA_Abort_IT+0x270>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d036      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_DMA_Abort_IT+0x274>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d031      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_DMA_Abort_IT+0x278>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d02c      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <HAL_DMA_Abort_IT+0x27c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_DMA_Abort_IT+0x280>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_DMA_Abort_IT+0x284>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_DMA_Abort_IT+0x288>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_DMA_Abort_IT+0x28c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a19      	ldr	r2, [pc, #100]	; (8004138 <HAL_DMA_Abort_IT+0x290>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_DMA_Abort_IT+0x294>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_DMA_Abort_IT+0x298>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x24e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <HAL_DMA_Abort_IT+0x29c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d128      	bne.n	8004148 <HAL_DMA_Abort_IT+0x2a0>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e027      	b.n	8004158 <HAL_DMA_Abort_IT+0x2b0>
 8004108:	40020010 	.word	0x40020010
 800410c:	40020028 	.word	0x40020028
 8004110:	40020040 	.word	0x40020040
 8004114:	40020058 	.word	0x40020058
 8004118:	40020070 	.word	0x40020070
 800411c:	40020088 	.word	0x40020088
 8004120:	400200a0 	.word	0x400200a0
 8004124:	400200b8 	.word	0x400200b8
 8004128:	40020410 	.word	0x40020410
 800412c:	40020428 	.word	0x40020428
 8004130:	40020440 	.word	0x40020440
 8004134:	40020458 	.word	0x40020458
 8004138:	40020470 	.word	0x40020470
 800413c:	40020488 	.word	0x40020488
 8004140:	400204a0 	.word	0x400204a0
 8004144:	400204b8 	.word	0x400204b8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_DMA_Abort_IT+0x428>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d072      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <HAL_DMA_Abort_IT+0x42c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d06d      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_DMA_Abort_IT+0x430>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d068      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_DMA_Abort_IT+0x434>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d063      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_DMA_Abort_IT+0x438>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d05e      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a55      	ldr	r2, [pc, #340]	; (80042e4 <HAL_DMA_Abort_IT+0x43c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d059      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a53      	ldr	r2, [pc, #332]	; (80042e8 <HAL_DMA_Abort_IT+0x440>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d054      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_DMA_Abort_IT+0x444>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04f      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a50      	ldr	r2, [pc, #320]	; (80042f0 <HAL_DMA_Abort_IT+0x448>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d04a      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4f      	ldr	r2, [pc, #316]	; (80042f4 <HAL_DMA_Abort_IT+0x44c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d045      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a4d      	ldr	r2, [pc, #308]	; (80042f8 <HAL_DMA_Abort_IT+0x450>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d040      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a4c      	ldr	r2, [pc, #304]	; (80042fc <HAL_DMA_Abort_IT+0x454>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d03b      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <HAL_DMA_Abort_IT+0x458>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d036      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a49      	ldr	r2, [pc, #292]	; (8004304 <HAL_DMA_Abort_IT+0x45c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d031      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a47      	ldr	r2, [pc, #284]	; (8004308 <HAL_DMA_Abort_IT+0x460>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02c      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a46      	ldr	r2, [pc, #280]	; (800430c <HAL_DMA_Abort_IT+0x464>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d027      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a44      	ldr	r2, [pc, #272]	; (8004310 <HAL_DMA_Abort_IT+0x468>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a43      	ldr	r2, [pc, #268]	; (8004314 <HAL_DMA_Abort_IT+0x46c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01d      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <HAL_DMA_Abort_IT+0x470>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a40      	ldr	r2, [pc, #256]	; (800431c <HAL_DMA_Abort_IT+0x474>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3e      	ldr	r2, [pc, #248]	; (8004320 <HAL_DMA_Abort_IT+0x478>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <HAL_DMA_Abort_IT+0x47c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3b      	ldr	r2, [pc, #236]	; (8004328 <HAL_DMA_Abort_IT+0x480>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_DMA_Abort_IT+0x3a0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3a      	ldr	r2, [pc, #232]	; (800432c <HAL_DMA_Abort_IT+0x484>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_DMA_Abort_IT+0x3a4>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_DMA_Abort_IT+0x3a6>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2201      	movs	r2, #1
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004280:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004298:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
 8004310:	58025408 	.word	0x58025408
 8004314:	5802541c 	.word	0x5802541c
 8004318:	58025430 	.word	0x58025430
 800431c:	58025444 	.word	0x58025444
 8004320:	58025458 	.word	0x58025458
 8004324:	5802546c 	.word	0x5802546c
 8004328:	58025480 	.word	0x58025480
 800432c:	58025494 	.word	0x58025494

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800433c:	4b67      	ldr	r3, [pc, #412]	; (80044dc <HAL_DMA_IRQHandler+0x1ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a67      	ldr	r2, [pc, #412]	; (80044e0 <HAL_DMA_IRQHandler+0x1b0>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5f      	ldr	r2, [pc, #380]	; (80044e4 <HAL_DMA_IRQHandler+0x1b4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a5d      	ldr	r2, [pc, #372]	; (80044e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5c      	ldr	r2, [pc, #368]	; (80044ec <HAL_DMA_IRQHandler+0x1bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5a      	ldr	r2, [pc, #360]	; (80044f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a59      	ldr	r2, [pc, #356]	; (80044f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a57      	ldr	r2, [pc, #348]	; (80044f8 <HAL_DMA_IRQHandler+0x1c8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a56      	ldr	r2, [pc, #344]	; (80044fc <HAL_DMA_IRQHandler+0x1cc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a54      	ldr	r2, [pc, #336]	; (8004500 <HAL_DMA_IRQHandler+0x1d0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a53      	ldr	r2, [pc, #332]	; (8004504 <HAL_DMA_IRQHandler+0x1d4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a51      	ldr	r2, [pc, #324]	; (8004508 <HAL_DMA_IRQHandler+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a50      	ldr	r2, [pc, #320]	; (800450c <HAL_DMA_IRQHandler+0x1dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_DMA_IRQHandler+0x1e0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4d      	ldr	r2, [pc, #308]	; (8004514 <HAL_DMA_IRQHandler+0x1e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4b      	ldr	r2, [pc, #300]	; (8004518 <HAL_DMA_IRQHandler+0x1e8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4a      	ldr	r2, [pc, #296]	; (800451c <HAL_DMA_IRQHandler+0x1ec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a48      	ldr	r2, [pc, #288]	; (8004520 <HAL_DMA_IRQHandler+0x1f0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_DMA_IRQHandler+0xd6>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_DMA_IRQHandler+0xd8>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 842b 	beq.w	8004c64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2208      	movs	r2, #8
 8004418:	409a      	lsls	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80a2 	beq.w	8004568 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <HAL_DMA_IRQHandler+0x1b4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_DMA_IRQHandler+0x1bc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <HAL_DMA_IRQHandler+0x1c8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_DMA_IRQHandler+0x1cc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_DMA_IRQHandler+0x1d0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_DMA_IRQHandler+0x1d4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	; (8004508 <HAL_DMA_IRQHandler+0x1d8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_DMA_IRQHandler+0x1dc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <HAL_DMA_IRQHandler+0x1e0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_DMA_IRQHandler+0x1e4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_DMA_IRQHandler+0x1e8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_DMA_IRQHandler+0x1ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a18      	ldr	r2, [pc, #96]	; (8004520 <HAL_DMA_IRQHandler+0x1f0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d12f      	bne.n	8004524 <HAL_DMA_IRQHandler+0x1f4>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02e      	b.n	8004538 <HAL_DMA_IRQHandler+0x208>
 80044da:	bf00      	nop
 80044dc:	24000000 	.word	0x24000000
 80044e0:	1b4e81b5 	.word	0x1b4e81b5
 80044e4:	40020010 	.word	0x40020010
 80044e8:	40020028 	.word	0x40020028
 80044ec:	40020040 	.word	0x40020040
 80044f0:	40020058 	.word	0x40020058
 80044f4:	40020070 	.word	0x40020070
 80044f8:	40020088 	.word	0x40020088
 80044fc:	400200a0 	.word	0x400200a0
 8004500:	400200b8 	.word	0x400200b8
 8004504:	40020410 	.word	0x40020410
 8004508:	40020428 	.word	0x40020428
 800450c:	40020440 	.word	0x40020440
 8004510:	40020458 	.word	0x40020458
 8004514:	40020470 	.word	0x40020470
 8004518:	40020488 	.word	0x40020488
 800451c:	400204a0 	.word	0x400204a0
 8004520:	400204b8 	.word	0x400204b8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2208      	movs	r2, #8
 8004556:	409a      	lsls	r2, r3
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d06e      	beq.n	800465c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a69      	ldr	r2, [pc, #420]	; (8004728 <HAL_DMA_IRQHandler+0x3f8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d04a      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a67      	ldr	r2, [pc, #412]	; (800472c <HAL_DMA_IRQHandler+0x3fc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d045      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a66      	ldr	r2, [pc, #408]	; (8004730 <HAL_DMA_IRQHandler+0x400>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d040      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a64      	ldr	r2, [pc, #400]	; (8004734 <HAL_DMA_IRQHandler+0x404>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d03b      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a63      	ldr	r2, [pc, #396]	; (8004738 <HAL_DMA_IRQHandler+0x408>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d036      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a61      	ldr	r2, [pc, #388]	; (800473c <HAL_DMA_IRQHandler+0x40c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a60      	ldr	r2, [pc, #384]	; (8004740 <HAL_DMA_IRQHandler+0x410>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d02c      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5e      	ldr	r2, [pc, #376]	; (8004744 <HAL_DMA_IRQHandler+0x414>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d027      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <HAL_DMA_IRQHandler+0x418>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5b      	ldr	r2, [pc, #364]	; (800474c <HAL_DMA_IRQHandler+0x41c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <HAL_DMA_IRQHandler+0x420>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a58      	ldr	r2, [pc, #352]	; (8004754 <HAL_DMA_IRQHandler+0x424>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_DMA_IRQHandler+0x428>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a55      	ldr	r2, [pc, #340]	; (800475c <HAL_DMA_IRQHandler+0x42c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a54      	ldr	r2, [pc, #336]	; (8004760 <HAL_DMA_IRQHandler+0x430>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a52      	ldr	r2, [pc, #328]	; (8004764 <HAL_DMA_IRQHandler+0x434>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10a      	bne.n	8004634 <HAL_DMA_IRQHandler+0x304>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e003      	b.n	800463c <HAL_DMA_IRQHandler+0x30c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f043 0202 	orr.w	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2204      	movs	r2, #4
 8004666:	409a      	lsls	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 808f 	beq.w	8004790 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_IRQHandler+0x3f8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d04a      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2a      	ldr	r2, [pc, #168]	; (800472c <HAL_DMA_IRQHandler+0x3fc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d045      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_DMA_IRQHandler+0x400>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d040      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <HAL_DMA_IRQHandler+0x404>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d03b      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_DMA_IRQHandler+0x408>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d036      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a24      	ldr	r2, [pc, #144]	; (800473c <HAL_DMA_IRQHandler+0x40c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d031      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_DMA_IRQHandler+0x410>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d02c      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a21      	ldr	r2, [pc, #132]	; (8004744 <HAL_DMA_IRQHandler+0x414>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d027      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a20      	ldr	r2, [pc, #128]	; (8004748 <HAL_DMA_IRQHandler+0x418>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_DMA_IRQHandler+0x41c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <HAL_DMA_IRQHandler+0x420>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_DMA_IRQHandler+0x424>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1a      	ldr	r2, [pc, #104]	; (8004758 <HAL_DMA_IRQHandler+0x428>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_DMA_IRQHandler+0x42c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_DMA_IRQHandler+0x430>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a15      	ldr	r2, [pc, #84]	; (8004764 <HAL_DMA_IRQHandler+0x434>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d12a      	bne.n	8004768 <HAL_DMA_IRQHandler+0x438>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e023      	b.n	8004770 <HAL_DMA_IRQHandler+0x440>
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2204      	movs	r2, #4
 800477e:	409a      	lsls	r2, r3
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2210      	movs	r2, #16
 800479a:	409a      	lsls	r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a6 	beq.w	80048f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a85      	ldr	r2, [pc, #532]	; (80049c0 <HAL_DMA_IRQHandler+0x690>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a83      	ldr	r2, [pc, #524]	; (80049c4 <HAL_DMA_IRQHandler+0x694>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a82      	ldr	r2, [pc, #520]	; (80049c8 <HAL_DMA_IRQHandler+0x698>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a80      	ldr	r2, [pc, #512]	; (80049cc <HAL_DMA_IRQHandler+0x69c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7f      	ldr	r2, [pc, #508]	; (80049d0 <HAL_DMA_IRQHandler+0x6a0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7d      	ldr	r2, [pc, #500]	; (80049d4 <HAL_DMA_IRQHandler+0x6a4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7c      	ldr	r2, [pc, #496]	; (80049d8 <HAL_DMA_IRQHandler+0x6a8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7a      	ldr	r2, [pc, #488]	; (80049dc <HAL_DMA_IRQHandler+0x6ac>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a79      	ldr	r2, [pc, #484]	; (80049e0 <HAL_DMA_IRQHandler+0x6b0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a77      	ldr	r2, [pc, #476]	; (80049e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a76      	ldr	r2, [pc, #472]	; (80049e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a74      	ldr	r2, [pc, #464]	; (80049ec <HAL_DMA_IRQHandler+0x6bc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a73      	ldr	r2, [pc, #460]	; (80049f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a71      	ldr	r2, [pc, #452]	; (80049f4 <HAL_DMA_IRQHandler+0x6c4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a70      	ldr	r2, [pc, #448]	; (80049f8 <HAL_DMA_IRQHandler+0x6c8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6e      	ldr	r2, [pc, #440]	; (80049fc <HAL_DMA_IRQHandler+0x6cc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10a      	bne.n	800485c <HAL_DMA_IRQHandler+0x52c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e009      	b.n	8004870 <HAL_DMA_IRQHandler+0x540>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03e      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2210      	movs	r2, #16
 800487e:	409a      	lsls	r2, r3
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d024      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
 80048b0:	e01f      	b.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
 80048c2:	e016      	b.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0208 	bic.w	r2, r2, #8
 80048e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2220      	movs	r2, #32
 80048fc:	409a      	lsls	r2, r3
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8110 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <HAL_DMA_IRQHandler+0x690>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <HAL_DMA_IRQHandler+0x694>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <HAL_DMA_IRQHandler+0x698>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a28      	ldr	r2, [pc, #160]	; (80049cc <HAL_DMA_IRQHandler+0x69c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <HAL_DMA_IRQHandler+0x6a0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <HAL_DMA_IRQHandler+0x6a4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <HAL_DMA_IRQHandler+0x6a8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_DMA_IRQHandler+0x6ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <HAL_DMA_IRQHandler+0x6b0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_DMA_IRQHandler+0x6bc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <HAL_DMA_IRQHandler+0x6c4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_DMA_IRQHandler+0x6c8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	; (80049fc <HAL_DMA_IRQHandler+0x6cc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d12b      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x6d0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02a      	b.n	8004a14 <HAL_DMA_IRQHandler+0x6e4>
 80049be:	bf00      	nop
 80049c0:	40020010 	.word	0x40020010
 80049c4:	40020028 	.word	0x40020028
 80049c8:	40020040 	.word	0x40020040
 80049cc:	40020058 	.word	0x40020058
 80049d0:	40020070 	.word	0x40020070
 80049d4:	40020088 	.word	0x40020088
 80049d8:	400200a0 	.word	0x400200a0
 80049dc:	400200b8 	.word	0x400200b8
 80049e0:	40020410 	.word	0x40020410
 80049e4:	40020428 	.word	0x40020428
 80049e8:	40020440 	.word	0x40020440
 80049ec:	40020458 	.word	0x40020458
 80049f0:	40020470 	.word	0x40020470
 80049f4:	40020488 	.word	0x40020488
 80049f8:	400204a0 	.word	0x400204a0
 80049fc:	400204b8 	.word	0x400204b8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8087 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	2220      	movs	r2, #32
 8004a24:	409a      	lsls	r2, r3
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d139      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0216 	bic.w	r2, r2, #22
 8004a44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x736>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0208 	bic.w	r2, r2, #8
 8004a74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	223f      	movs	r2, #63	; 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 834a 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
          }
          return;
 8004aa8:	e344      	b.n	8005134 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02c      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
 8004ad6:	e027      	b.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d023      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e01e      	b.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0210 	bic.w	r2, r2, #16
 8004b06:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8306 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8088 	beq.w	8004c50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <HAL_DMA_IRQHandler+0xa08>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a79      	ldr	r2, [pc, #484]	; (8004d3c <HAL_DMA_IRQHandler+0xa0c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a77      	ldr	r2, [pc, #476]	; (8004d40 <HAL_DMA_IRQHandler+0xa10>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a76      	ldr	r2, [pc, #472]	; (8004d44 <HAL_DMA_IRQHandler+0xa14>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a74      	ldr	r2, [pc, #464]	; (8004d48 <HAL_DMA_IRQHandler+0xa18>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a73      	ldr	r2, [pc, #460]	; (8004d4c <HAL_DMA_IRQHandler+0xa1c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a71      	ldr	r2, [pc, #452]	; (8004d50 <HAL_DMA_IRQHandler+0xa20>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a70      	ldr	r2, [pc, #448]	; (8004d54 <HAL_DMA_IRQHandler+0xa24>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6e      	ldr	r2, [pc, #440]	; (8004d58 <HAL_DMA_IRQHandler+0xa28>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6d      	ldr	r2, [pc, #436]	; (8004d5c <HAL_DMA_IRQHandler+0xa2c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a6b      	ldr	r2, [pc, #428]	; (8004d60 <HAL_DMA_IRQHandler+0xa30>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6a      	ldr	r2, [pc, #424]	; (8004d64 <HAL_DMA_IRQHandler+0xa34>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a68      	ldr	r2, [pc, #416]	; (8004d68 <HAL_DMA_IRQHandler+0xa38>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a67      	ldr	r2, [pc, #412]	; (8004d6c <HAL_DMA_IRQHandler+0xa3c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_DMA_IRQHandler+0xa40>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a64      	ldr	r2, [pc, #400]	; (8004d74 <HAL_DMA_IRQHandler+0xa44>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x8ca>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e007      	b.n	8004c0a <HAL_DMA_IRQHandler+0x8da>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d307      	bcc.n	8004c26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f2      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x8da>
 8004c24:	e000      	b.n	8004c28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c26:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c46:	e003      	b.n	8004c50 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8272 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
 8004c62:	e26c      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <HAL_DMA_IRQHandler+0xa48>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <HAL_DMA_IRQHandler+0xa4c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <HAL_DMA_IRQHandler+0xa50>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3f      	ldr	r2, [pc, #252]	; (8004d84 <HAL_DMA_IRQHandler+0xa54>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3d      	ldr	r2, [pc, #244]	; (8004d88 <HAL_DMA_IRQHandler+0xa58>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <HAL_DMA_IRQHandler+0xa5c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <HAL_DMA_IRQHandler+0xa60>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a39      	ldr	r2, [pc, #228]	; (8004d94 <HAL_DMA_IRQHandler+0xa64>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x988>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_DMA_IRQHandler+0x98a>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 823f 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80cd 	beq.w	8004e78 <HAL_DMA_IRQHandler+0xb48>
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80c7 	beq.w	8004e78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d049      	beq.n	8004d98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8210 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d20:	e20a      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8206 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d34:	e200      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	58025408 	.word	0x58025408
 8004d7c:	5802541c 	.word	0x5802541c
 8004d80:	58025430 	.word	0x58025430
 8004d84:	58025444 	.word	0x58025444
 8004d88:	58025458 	.word	0x58025458
 8004d8c:	5802546c 	.word	0x5802546c
 8004d90:	58025480 	.word	0x58025480
 8004d94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d160      	bne.n	8004e64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a8c      	ldr	r2, [pc, #560]	; (8004fd8 <HAL_DMA_IRQHandler+0xca8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a8a      	ldr	r2, [pc, #552]	; (8004fdc <HAL_DMA_IRQHandler+0xcac>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a89      	ldr	r2, [pc, #548]	; (8004fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a87      	ldr	r2, [pc, #540]	; (8004fe4 <HAL_DMA_IRQHandler+0xcb4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a86      	ldr	r2, [pc, #536]	; (8004fe8 <HAL_DMA_IRQHandler+0xcb8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a84      	ldr	r2, [pc, #528]	; (8004fec <HAL_DMA_IRQHandler+0xcbc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a83      	ldr	r2, [pc, #524]	; (8004ff0 <HAL_DMA_IRQHandler+0xcc0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a81      	ldr	r2, [pc, #516]	; (8004ff4 <HAL_DMA_IRQHandler+0xcc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a80      	ldr	r2, [pc, #512]	; (8004ff8 <HAL_DMA_IRQHandler+0xcc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a7e      	ldr	r2, [pc, #504]	; (8004ffc <HAL_DMA_IRQHandler+0xccc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7d      	ldr	r2, [pc, #500]	; (8005000 <HAL_DMA_IRQHandler+0xcd0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a7b      	ldr	r2, [pc, #492]	; (8005004 <HAL_DMA_IRQHandler+0xcd4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_DMA_IRQHandler+0xcd8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a78      	ldr	r2, [pc, #480]	; (800500c <HAL_DMA_IRQHandler+0xcdc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a77      	ldr	r2, [pc, #476]	; (8005010 <HAL_DMA_IRQHandler+0xce0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_DMA_IRQHandler+0xce4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_IRQHandler+0xb24>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0208 	bic.w	r2, r2, #8
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e007      	b.n	8004e64 <HAL_DMA_IRQHandler+0xb34>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8165 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	e15f      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2202      	movs	r2, #2
 8004e82:	409a      	lsls	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80c5 	beq.w	8005018 <HAL_DMA_IRQHandler+0xce8>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80bf 	beq.w	8005018 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 813a 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed0:	e134      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8130 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee4:	e12a      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d168      	bne.n	8004fc2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <HAL_DMA_IRQHandler+0xca8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a37      	ldr	r2, [pc, #220]	; (8004fdc <HAL_DMA_IRQHandler+0xcac>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d045      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d040      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <HAL_DMA_IRQHandler+0xcb4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d03b      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <HAL_DMA_IRQHandler+0xcb8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d036      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a31      	ldr	r2, [pc, #196]	; (8004fec <HAL_DMA_IRQHandler+0xcbc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d031      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <HAL_DMA_IRQHandler+0xcc0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <HAL_DMA_IRQHandler+0xcc4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d027      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <HAL_DMA_IRQHandler+0xcc8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <HAL_DMA_IRQHandler+0xccc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a29      	ldr	r2, [pc, #164]	; (8005000 <HAL_DMA_IRQHandler+0xcd0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a28      	ldr	r2, [pc, #160]	; (8005004 <HAL_DMA_IRQHandler+0xcd4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <HAL_DMA_IRQHandler+0xcd8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a25      	ldr	r2, [pc, #148]	; (800500c <HAL_DMA_IRQHandler+0xcdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a23      	ldr	r2, [pc, #140]	; (8005010 <HAL_DMA_IRQHandler+0xce0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xc60>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_DMA_IRQHandler+0xce4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d108      	bne.n	8004fa2 <HAL_DMA_IRQHandler+0xc72>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0214 	bic.w	r2, r2, #20
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e007      	b.n	8004fb2 <HAL_DMA_IRQHandler+0xc82>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 020a 	bic.w	r2, r2, #10
 8004fb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80b8 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd4:	e0b2      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
 8004fd6:	bf00      	nop
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2208      	movs	r2, #8
 8005022:	409a      	lsls	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8088 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8082 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a41      	ldr	r2, [pc, #260]	; (8005144 <HAL_DMA_IRQHandler+0xe14>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3f      	ldr	r2, [pc, #252]	; (8005148 <HAL_DMA_IRQHandler+0xe18>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3e      	ldr	r2, [pc, #248]	; (800514c <HAL_DMA_IRQHandler+0xe1c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <HAL_DMA_IRQHandler+0xe20>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <HAL_DMA_IRQHandler+0xe24>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a39      	ldr	r2, [pc, #228]	; (8005158 <HAL_DMA_IRQHandler+0xe28>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a38      	ldr	r2, [pc, #224]	; (800515c <HAL_DMA_IRQHandler+0xe2c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a36      	ldr	r2, [pc, #216]	; (8005160 <HAL_DMA_IRQHandler+0xe30>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a35      	ldr	r2, [pc, #212]	; (8005164 <HAL_DMA_IRQHandler+0xe34>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a33      	ldr	r2, [pc, #204]	; (8005168 <HAL_DMA_IRQHandler+0xe38>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a32      	ldr	r2, [pc, #200]	; (800516c <HAL_DMA_IRQHandler+0xe3c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a30      	ldr	r2, [pc, #192]	; (8005170 <HAL_DMA_IRQHandler+0xe40>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <HAL_DMA_IRQHandler+0xe44>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_DMA_IRQHandler+0xe48>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	; (800517c <HAL_DMA_IRQHandler+0xe4c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_DMA_IRQHandler+0xe50>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <HAL_DMA_IRQHandler+0xdbc>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 021c 	bic.w	r2, r2, #28
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e007      	b.n	80050fc <HAL_DMA_IRQHandler+0xdcc>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 020e 	bic.w	r2, r2, #14
 80050fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
 8005132:	e004      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800513e:	3728      	adds	r7, #40	; 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40020010 	.word	0x40020010
 8005148:	40020028 	.word	0x40020028
 800514c:	40020040 	.word	0x40020040
 8005150:	40020058 	.word	0x40020058
 8005154:	40020070 	.word	0x40020070
 8005158:	40020088 	.word	0x40020088
 800515c:	400200a0 	.word	0x400200a0
 8005160:	400200b8 	.word	0x400200b8
 8005164:	40020410 	.word	0x40020410
 8005168:	40020428 	.word	0x40020428
 800516c:	40020440 	.word	0x40020440
 8005170:	40020458 	.word	0x40020458
 8005174:	40020470 	.word	0x40020470
 8005178:	40020488 	.word	0x40020488
 800517c:	400204a0 	.word	0x400204a0
 8005180:	400204b8 	.word	0x400204b8

08005184 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a84      	ldr	r2, [pc, #528]	; (80053b4 <DMA_SetConfig+0x230>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d072      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a82      	ldr	r2, [pc, #520]	; (80053b8 <DMA_SetConfig+0x234>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d06d      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a81      	ldr	r2, [pc, #516]	; (80053bc <DMA_SetConfig+0x238>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d068      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7f      	ldr	r2, [pc, #508]	; (80053c0 <DMA_SetConfig+0x23c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d063      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7e      	ldr	r2, [pc, #504]	; (80053c4 <DMA_SetConfig+0x240>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d05e      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7c      	ldr	r2, [pc, #496]	; (80053c8 <DMA_SetConfig+0x244>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d059      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7b      	ldr	r2, [pc, #492]	; (80053cc <DMA_SetConfig+0x248>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d054      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a79      	ldr	r2, [pc, #484]	; (80053d0 <DMA_SetConfig+0x24c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04f      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a78      	ldr	r2, [pc, #480]	; (80053d4 <DMA_SetConfig+0x250>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a76      	ldr	r2, [pc, #472]	; (80053d8 <DMA_SetConfig+0x254>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <DMA_SetConfig+0x258>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <DMA_SetConfig+0x10a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a73      	ldr	r2, [pc, #460]	; (80053e0 <DMA_SetConfig+0x25c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a72      	ldr	r2, [pc, #456]	; (80053e4 <DMA_SetConfig+0x260>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a70      	ldr	r2, [pc, #448]	; (80053e8 <DMA_SetConfig+0x264>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <DMA_SetConfig+0x10a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6f      	ldr	r2, [pc, #444]	; (80053ec <DMA_SetConfig+0x268>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6d      	ldr	r2, [pc, #436]	; (80053f0 <DMA_SetConfig+0x26c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <DMA_SetConfig+0x10a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6c      	ldr	r2, [pc, #432]	; (80053f4 <DMA_SetConfig+0x270>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6a      	ldr	r2, [pc, #424]	; (80053f8 <DMA_SetConfig+0x274>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a69      	ldr	r2, [pc, #420]	; (80053fc <DMA_SetConfig+0x278>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <DMA_SetConfig+0x10a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a67      	ldr	r2, [pc, #412]	; (8005400 <DMA_SetConfig+0x27c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a66      	ldr	r2, [pc, #408]	; (8005404 <DMA_SetConfig+0x280>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a64      	ldr	r2, [pc, #400]	; (8005408 <DMA_SetConfig+0x284>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <DMA_SetConfig+0x10a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a63      	ldr	r2, [pc, #396]	; (800540c <DMA_SetConfig+0x288>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a61      	ldr	r2, [pc, #388]	; (8005410 <DMA_SetConfig+0x28c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <DMA_SetConfig+0x10e>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <DMA_SetConfig+0x110>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3e      	ldr	r2, [pc, #248]	; (80053b4 <DMA_SetConfig+0x230>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d04a      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3d      	ldr	r2, [pc, #244]	; (80053b8 <DMA_SetConfig+0x234>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d045      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3b      	ldr	r2, [pc, #236]	; (80053bc <DMA_SetConfig+0x238>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d040      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a3a      	ldr	r2, [pc, #232]	; (80053c0 <DMA_SetConfig+0x23c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d03b      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <DMA_SetConfig+0x240>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d036      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <DMA_SetConfig+0x244>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d031      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a35      	ldr	r2, [pc, #212]	; (80053cc <DMA_SetConfig+0x248>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02c      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a34      	ldr	r2, [pc, #208]	; (80053d0 <DMA_SetConfig+0x24c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d027      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a32      	ldr	r2, [pc, #200]	; (80053d4 <DMA_SetConfig+0x250>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d022      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a31      	ldr	r2, [pc, #196]	; (80053d8 <DMA_SetConfig+0x254>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d01d      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2f      	ldr	r2, [pc, #188]	; (80053dc <DMA_SetConfig+0x258>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2e      	ldr	r2, [pc, #184]	; (80053e0 <DMA_SetConfig+0x25c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <DMA_SetConfig+0x260>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <DMA_SetConfig+0x264>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a29      	ldr	r2, [pc, #164]	; (80053ec <DMA_SetConfig+0x268>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a28      	ldr	r2, [pc, #160]	; (80053f0 <DMA_SetConfig+0x26c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <DMA_SetConfig+0x1d4>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <DMA_SetConfig+0x1d6>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d05a      	beq.n	8005414 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	223f      	movs	r2, #63	; 0x3f
 8005368:	409a      	lsls	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800537c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d108      	bne.n	80053a0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800539e:	e087      	b.n	80054b0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
}
 80053b0:	e07e      	b.n	80054b0 <DMA_SetConfig+0x32c>
 80053b2:	bf00      	nop
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a28      	ldr	r2, [pc, #160]	; (80054bc <DMA_SetConfig+0x338>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <DMA_SetConfig+0x33c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d01d      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <DMA_SetConfig+0x340>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <DMA_SetConfig+0x344>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <DMA_SetConfig+0x348>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <DMA_SetConfig+0x34c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <DMA_SetConfig+0x350>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <DMA_SetConfig+0x2e0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <DMA_SetConfig+0x354>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d101      	bne.n	8005468 <DMA_SetConfig+0x2e4>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <DMA_SetConfig+0x2e6>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d020      	beq.n	80054b0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2201      	movs	r2, #1
 8005478:	409a      	lsls	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d108      	bne.n	80054a0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	60da      	str	r2, [r3, #12]
}
 800549e:	e007      	b.n	80054b0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	58025408 	.word	0x58025408
 80054c0:	5802541c 	.word	0x5802541c
 80054c4:	58025430 	.word	0x58025430
 80054c8:	58025444 	.word	0x58025444
 80054cc:	58025458 	.word	0x58025458
 80054d0:	5802546c 	.word	0x5802546c
 80054d4:	58025480 	.word	0x58025480
 80054d8:	58025494 	.word	0x58025494

080054dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a42      	ldr	r2, [pc, #264]	; (80055f4 <DMA_CalcBaseAndBitshift+0x118>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a41      	ldr	r2, [pc, #260]	; (80055f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3f      	ldr	r2, [pc, #252]	; (80055fc <DMA_CalcBaseAndBitshift+0x120>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a3e      	ldr	r2, [pc, #248]	; (8005600 <DMA_CalcBaseAndBitshift+0x124>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <DMA_CalcBaseAndBitshift+0x128>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <DMA_CalcBaseAndBitshift+0x12c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a39      	ldr	r2, [pc, #228]	; (800560c <DMA_CalcBaseAndBitshift+0x130>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a38      	ldr	r2, [pc, #224]	; (8005610 <DMA_CalcBaseAndBitshift+0x134>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a36      	ldr	r2, [pc, #216]	; (8005614 <DMA_CalcBaseAndBitshift+0x138>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a35      	ldr	r2, [pc, #212]	; (8005618 <DMA_CalcBaseAndBitshift+0x13c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a33      	ldr	r2, [pc, #204]	; (800561c <DMA_CalcBaseAndBitshift+0x140>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a32      	ldr	r2, [pc, #200]	; (8005620 <DMA_CalcBaseAndBitshift+0x144>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a30      	ldr	r2, [pc, #192]	; (8005624 <DMA_CalcBaseAndBitshift+0x148>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <DMA_CalcBaseAndBitshift+0x14c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <DMA_CalcBaseAndBitshift+0x150>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <DMA_CalcBaseAndBitshift+0x154>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <DMA_CalcBaseAndBitshift+0xac>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <DMA_CalcBaseAndBitshift+0xae>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d024      	beq.n	80055d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	3b10      	subs	r3, #16
 8005596:	4a27      	ldr	r2, [pc, #156]	; (8005634 <DMA_CalcBaseAndBitshift+0x158>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	4a24      	ldr	r2, [pc, #144]	; (8005638 <DMA_CalcBaseAndBitshift+0x15c>)
 80055a8:	5cd3      	ldrb	r3, [r2, r3]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d908      	bls.n	80055c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <DMA_CalcBaseAndBitshift+0x160>)
 80055be:	4013      	ands	r3, r2
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	659a      	str	r2, [r3, #88]	; 0x58
 80055c6:	e00d      	b.n	80055e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <DMA_CalcBaseAndBitshift+0x160>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6593      	str	r3, [r2, #88]	; 0x58
 80055d6:	e005      	b.n	80055e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40020010 	.word	0x40020010
 80055f8:	40020028 	.word	0x40020028
 80055fc:	40020040 	.word	0x40020040
 8005600:	40020058 	.word	0x40020058
 8005604:	40020070 	.word	0x40020070
 8005608:	40020088 	.word	0x40020088
 800560c:	400200a0 	.word	0x400200a0
 8005610:	400200b8 	.word	0x400200b8
 8005614:	40020410 	.word	0x40020410
 8005618:	40020428 	.word	0x40020428
 800561c:	40020440 	.word	0x40020440
 8005620:	40020458 	.word	0x40020458
 8005624:	40020470 	.word	0x40020470
 8005628:	40020488 	.word	0x40020488
 800562c:	400204a0 	.word	0x400204a0
 8005630:	400204b8 	.word	0x400204b8
 8005634:	aaaaaaab 	.word	0xaaaaaaab
 8005638:	0800a448 	.word	0x0800a448
 800563c:	fffffc00 	.word	0xfffffc00

08005640 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	2b03      	cmp	r3, #3
 800565a:	d858      	bhi.n	800570e <DMA_CheckFifoParam+0xce>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <DMA_CheckFifoParam+0x24>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005675 	.word	0x08005675
 8005668:	08005687 	.word	0x08005687
 800566c:	08005675 	.word	0x08005675
 8005670:	0800570f 	.word	0x0800570f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d048      	beq.n	8005712 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005684:	e045      	b.n	8005712 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800568e:	d142      	bne.n	8005716 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005694:	e03f      	b.n	8005716 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569e:	d123      	bne.n	80056e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d838      	bhi.n	800571a <DMA_CheckFifoParam+0xda>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <DMA_CheckFifoParam+0x70>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056c7 	.word	0x080056c7
 80056b8:	080056c1 	.word	0x080056c1
 80056bc:	080056d9 	.word	0x080056d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
        break;
 80056c4:	e030      	b.n	8005728 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d025      	beq.n	800571e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d6:	e022      	b.n	800571e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056e0:	d11f      	bne.n	8005722 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056e6:	e01c      	b.n	8005722 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d902      	bls.n	80056f6 <DMA_CheckFifoParam+0xb6>
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d003      	beq.n	80056fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056f4:	e018      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
        break;
 80056fa:	e015      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00e      	beq.n	8005726 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
    break;
 800570c:	e00b      	b.n	8005726 <DMA_CheckFifoParam+0xe6>
        break;
 800570e:	bf00      	nop
 8005710:	e00a      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e008      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005716:	bf00      	nop
 8005718:	e006      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
    break;
 8005726:	bf00      	nop
    }
  }

  return status;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop

08005738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a38      	ldr	r2, [pc, #224]	; (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a36      	ldr	r2, [pc, #216]	; (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a35      	ldr	r2, [pc, #212]	; (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a33      	ldr	r2, [pc, #204]	; (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a32      	ldr	r2, [pc, #200]	; (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a30      	ldr	r2, [pc, #192]	; (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01a      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	3b08      	subs	r3, #8
 80057a8:	4a28      	ldr	r2, [pc, #160]	; (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4b26      	ldr	r3, [pc, #152]	; (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a24      	ldr	r2, [pc, #144]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2201      	movs	r2, #1
 80057ce:	409a      	lsls	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057d4:	e024      	b.n	8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3b10      	subs	r3, #16
 80057de:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d806      	bhi.n	80057fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d902      	bls.n	80057fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3308      	adds	r3, #8
 80057fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	58025408 	.word	0x58025408
 8005830:	5802541c 	.word	0x5802541c
 8005834:	58025430 	.word	0x58025430
 8005838:	58025444 	.word	0x58025444
 800583c:	58025458 	.word	0x58025458
 8005840:	5802546c 	.word	0x5802546c
 8005844:	58025480 	.word	0x58025480
 8005848:	58025494 	.word	0x58025494
 800584c:	cccccccd 	.word	0xcccccccd
 8005850:	16009600 	.word	0x16009600
 8005854:	58025880 	.word	0x58025880
 8005858:	aaaaaaab 	.word	0xaaaaaaab
 800585c:	400204b8 	.word	0x400204b8
 8005860:	4002040f 	.word	0x4002040f
 8005864:	10008200 	.word	0x10008200
 8005868:	40020880 	.word	0x40020880

0800586c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04a      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d847      	bhi.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a25      	ldr	r2, [pc, #148]	; (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a24      	ldr	r2, [pc, #144]	; (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01d      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a22      	ldr	r2, [pc, #136]	; (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	; (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058f4:	671a      	str	r2, [r3, #112]	; 0x70
 80058f6:	e009      	b.n	800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a11      	ldr	r2, [pc, #68]	; (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800590a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	2201      	movs	r2, #1
 8005912:	409a      	lsls	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	58025408 	.word	0x58025408
 8005928:	5802541c 	.word	0x5802541c
 800592c:	58025430 	.word	0x58025430
 8005930:	58025444 	.word	0x58025444
 8005934:	58025458 	.word	0x58025458
 8005938:	5802546c 	.word	0x5802546c
 800593c:	58025480 	.word	0x58025480
 8005940:	58025494 	.word	0x58025494
 8005944:	1600963f 	.word	0x1600963f
 8005948:	58025940 	.word	0x58025940
 800594c:	1000823f 	.word	0x1000823f
 8005950:	40020940 	.word	0x40020940

08005954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005962:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_GPIO_Init+0x234>)
 8005964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005966:	e194      	b.n	8005c92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8186 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d00b      	beq.n	80059a0 <HAL_GPIO_Init+0x4c>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d007      	beq.n	80059a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005994:	2b11      	cmp	r3, #17
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b12      	cmp	r3, #18
 800599e:	d130      	bne.n	8005a02 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2203      	movs	r2, #3
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059d6:	2201      	movs	r2, #1
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0201 	and.w	r2, r3, #1
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0xee>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b12      	cmp	r3, #18
 8005a40:	d123      	bne.n	8005a8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	08da      	lsrs	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3208      	adds	r2, #8
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80e0 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ad2:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aea:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <HAL_GPIO_Init+0x23c>)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	3302      	adds	r3, #2
 8005af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	220f      	movs	r2, #15
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_GPIO_Init+0x240>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d052      	beq.n	8005bbc <HAL_GPIO_Init+0x268>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <HAL_GPIO_Init+0x244>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_GPIO_Init+0x22e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_GPIO_Init+0x248>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02b      	beq.n	8005b7e <HAL_GPIO_Init+0x22a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_GPIO_Init+0x24c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d025      	beq.n	8005b7a <HAL_GPIO_Init+0x226>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_GPIO_Init+0x250>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <HAL_GPIO_Init+0x222>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_GPIO_Init+0x254>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d019      	beq.n	8005b72 <HAL_GPIO_Init+0x21e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_GPIO_Init+0x258>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_GPIO_Init+0x21a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_GPIO_Init+0x25c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00d      	beq.n	8005b6a <HAL_GPIO_Init+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_GPIO_Init+0x260>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <HAL_GPIO_Init+0x212>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_GPIO_Init+0x264>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_GPIO_Init+0x20e>
 8005b5e:	2309      	movs	r3, #9
 8005b60:	e02d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b62:	230a      	movs	r3, #10
 8005b64:	e02b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b66:	2308      	movs	r3, #8
 8005b68:	e029      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	e027      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6e:	2306      	movs	r3, #6
 8005b70:	e025      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b72:	2305      	movs	r3, #5
 8005b74:	e023      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b76:	2304      	movs	r3, #4
 8005b78:	e021      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e01f      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e01d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e01b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b86:	bf00      	nop
 8005b88:	58000080 	.word	0x58000080
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	58000400 	.word	0x58000400
 8005b94:	58020000 	.word	0x58020000
 8005b98:	58020400 	.word	0x58020400
 8005b9c:	58020800 	.word	0x58020800
 8005ba0:	58020c00 	.word	0x58020c00
 8005ba4:	58021000 	.word	0x58021000
 8005ba8:	58021400 	.word	0x58021400
 8005bac:	58021800 	.word	0x58021800
 8005bb0:	58021c00 	.word	0x58021c00
 8005bb4:	58022000 	.word	0x58022000
 8005bb8:	58022400 	.word	0x58022400
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f002 0203 	and.w	r2, r2, #3
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	4093      	lsls	r3, r2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bce:	4938      	ldr	r1, [pc, #224]	; (8005cb0 <HAL_GPIO_Init+0x35c>)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f ae63 	bne.w	8005968 <HAL_GPIO_Init+0x14>
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	58000400 	.word	0x58000400

08005cb4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <HAL_HSEM_FastTake+0x2c>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3320      	adds	r3, #32
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <HAL_HSEM_FastTake+0x30>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d101      	bne.n	8005cd0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	58026400 	.word	0x58026400
 8005ce4:	80000300 	.word	0x80000300

08005ce8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005cf2:	4906      	ldr	r1, [pc, #24]	; (8005d0c <HAL_HSEM_Release+0x24>)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	58026400 	.word	0x58026400

08005d10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005d18:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	2b06      	cmp	r3, #6
 8005d22:	d00a      	beq.n	8005d3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d001      	beq.n	8005d36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e040      	b.n	8005db8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e03e      	b.n	8005db8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005d42:	491f      	ldr	r1, [pc, #124]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d4a:	f7fc f999 	bl	8002080 <HAL_GetTick>
 8005d4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d50:	e009      	b.n	8005d66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d52:	f7fc f995 	bl	8002080 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d60:	d901      	bls.n	8005d66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e028      	b.n	8005db8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d66:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	d1ee      	bne.n	8005d52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b1e      	cmp	r3, #30
 8005d78:	d008      	beq.n	8005d8c <HAL_PWREx_ConfigSupply+0x7c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d7e:	d005      	beq.n	8005d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b1d      	cmp	r3, #29
 8005d84:	d002      	beq.n	8005d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b2d      	cmp	r3, #45	; 0x2d
 8005d8a:	d114      	bne.n	8005db6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005d8c:	f7fc f978 	bl	8002080 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d92:	e009      	b.n	8005da8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d94:	f7fc f974 	bl	8002080 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da2:	d901      	bls.n	8005da8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e007      	b.n	8005db8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db4:	d1ee      	bne.n	8005d94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	58024800 	.word	0x58024800

08005dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08c      	sub	sp, #48	; 0x30
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e3ff      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8087 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de4:	4b99      	ldr	r3, [pc, #612]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dee:	4b97      	ldr	r3, [pc, #604]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d007      	beq.n	8005e0a <HAL_RCC_OscConfig+0x46>
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2b18      	cmp	r3, #24
 8005dfe:	d110      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d10b      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0a:	4b90      	ldr	r3, [pc, #576]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06c      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d168      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e3d9      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x76>
 8005e2c:	4b87      	ldr	r3, [pc, #540]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a86      	ldr	r2, [pc, #536]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e02e      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x98>
 8005e42:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a81      	ldr	r2, [pc, #516]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b7f      	ldr	r3, [pc, #508]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7e      	ldr	r2, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0xbc>
 8005e66:	4b79      	ldr	r3, [pc, #484]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a78      	ldr	r2, [pc, #480]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a75      	ldr	r2, [pc, #468]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e80:	4b72      	ldr	r3, [pc, #456]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a71      	ldr	r2, [pc, #452]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b6f      	ldr	r3, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6e      	ldr	r2, [pc, #440]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fc f8ee 	bl	8002080 <HAL_GetTick>
 8005ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fc f8ea 	bl	8002080 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e38d      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eba:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xe4>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fc f8da 	bl	8002080 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fc f8d6 	bl	8002080 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e379      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ee2:	4b5a      	ldr	r3, [pc, #360]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x10c>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80ae 	beq.w	800605c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f00:	4b52      	ldr	r3, [pc, #328]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f0a:	4b50      	ldr	r3, [pc, #320]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_RCC_OscConfig+0x162>
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	2b18      	cmp	r3, #24
 8005f1a:	d13a      	bne.n	8005f92 <HAL_RCC_OscConfig+0x1ce>
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d135      	bne.n	8005f92 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_RCC_OscConfig+0x17a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e34b      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3e:	f7fc f8ab 	bl	8002098 <HAL_GetREVID>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d817      	bhi.n	8005f7c <HAL_RCC_OscConfig+0x1b8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d108      	bne.n	8005f66 <HAL_RCC_OscConfig+0x1a2>
 8005f54:	4b3d      	ldr	r3, [pc, #244]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f5c:	4a3b      	ldr	r2, [pc, #236]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f64:	e07a      	b.n	800605c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	031b      	lsls	r3, r3, #12
 8005f74:	4935      	ldr	r1, [pc, #212]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7a:	e06f      	b.n	800605c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b33      	ldr	r3, [pc, #204]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	4930      	ldr	r1, [pc, #192]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f90:	e064      	b.n	800605c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d045      	beq.n	8006026 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 0219 	bic.w	r2, r3, #25
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	4929      	ldr	r1, [pc, #164]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fc f868 	bl	8002080 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb4:	f7fc f864 	bl	8002080 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e307      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc6:	4b21      	ldr	r3, [pc, #132]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd2:	f7fc f861 	bl	8002098 <HAL_GetREVID>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d817      	bhi.n	8006010 <HAL_RCC_OscConfig+0x24c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d108      	bne.n	8005ffa <HAL_RCC_OscConfig+0x236>
 8005fe8:	4b18      	ldr	r3, [pc, #96]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ff0:	4a16      	ldr	r2, [pc, #88]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	e030      	b.n	800605c <HAL_RCC_OscConfig+0x298>
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	031b      	lsls	r3, r3, #12
 8006008:	4910      	ldr	r1, [pc, #64]	; (800604c <HAL_RCC_OscConfig+0x288>)
 800600a:	4313      	orrs	r3, r2
 800600c:	604b      	str	r3, [r1, #4]
 800600e:	e025      	b.n	800605c <HAL_RCC_OscConfig+0x298>
 8006010:	4b0e      	ldr	r3, [pc, #56]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	490b      	ldr	r1, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8006020:	4313      	orrs	r3, r2
 8006022:	604b      	str	r3, [r1, #4]
 8006024:	e01a      	b.n	800605c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006026:	4b09      	ldr	r3, [pc, #36]	; (800604c <HAL_RCC_OscConfig+0x288>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a08      	ldr	r2, [pc, #32]	; (800604c <HAL_RCC_OscConfig+0x288>)
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fc f825 	bl	8002080 <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006038:	e00a      	b.n	8006050 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800603a:	f7fc f821 	bl	8002080 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d903      	bls.n	8006050 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e2c4      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
 800604c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006050:	4ba4      	ldr	r3, [pc, #656]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ee      	bne.n	800603a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a9 	beq.w	80061bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606a:	4b9e      	ldr	r3, [pc, #632]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006072:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006074:	4b9b      	ldr	r3, [pc, #620]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d007      	beq.n	8006090 <HAL_RCC_OscConfig+0x2cc>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2b18      	cmp	r3, #24
 8006084:	d13a      	bne.n	80060fc <HAL_RCC_OscConfig+0x338>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d135      	bne.n	80060fc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006090:	4b94      	ldr	r3, [pc, #592]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2e4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e296      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060a8:	f7fb fff6 	bl	8002098 <HAL_GetREVID>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d817      	bhi.n	80060e6 <HAL_RCC_OscConfig+0x322>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d108      	bne.n	80060d0 <HAL_RCC_OscConfig+0x30c>
 80060be:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060c6:	4a87      	ldr	r2, [pc, #540]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060ce:	e075      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d0:	4b84      	ldr	r3, [pc, #528]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	069b      	lsls	r3, r3, #26
 80060de:	4981      	ldr	r1, [pc, #516]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060e4:	e06a      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060e6:	4b7f      	ldr	r3, [pc, #508]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	061b      	lsls	r3, r3, #24
 80060f4:	497b      	ldr	r1, [pc, #492]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060fa:	e05f      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d042      	beq.n	800618a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006104:	4b77      	ldr	r3, [pc, #476]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a76      	ldr	r2, [pc, #472]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb ffb6 	bl	8002080 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006118:	f7fb ffb2 	bl	8002080 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e255      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800612a:	4b6e      	ldr	r3, [pc, #440]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006136:	f7fb ffaf 	bl	8002098 <HAL_GetREVID>
 800613a:	4603      	mov	r3, r0
 800613c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006140:	4293      	cmp	r3, r2
 8006142:	d817      	bhi.n	8006174 <HAL_RCC_OscConfig+0x3b0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	2b20      	cmp	r3, #32
 800614a:	d108      	bne.n	800615e <HAL_RCC_OscConfig+0x39a>
 800614c:	4b65      	ldr	r3, [pc, #404]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006154:	4a63      	ldr	r2, [pc, #396]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	e02e      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
 800615e:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	069b      	lsls	r3, r3, #26
 800616c:	495d      	ldr	r1, [pc, #372]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
 8006172:	e023      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
 8006174:	4b5b      	ldr	r3, [pc, #364]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	4958      	ldr	r1, [pc, #352]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006184:	4313      	orrs	r3, r2
 8006186:	60cb      	str	r3, [r1, #12]
 8006188:	e018      	b.n	80061bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800618a:	4b56      	ldr	r3, [pc, #344]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a55      	ldr	r2, [pc, #340]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fb ff73 	bl	8002080 <HAL_GetTick>
 800619a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800619e:	f7fb ff6f 	bl	8002080 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e212      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061b0:	4b4c      	ldr	r3, [pc, #304]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d036      	beq.n	8006236 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d019      	beq.n	8006204 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061d0:	4b44      	ldr	r3, [pc, #272]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80061d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d4:	4a43      	ldr	r2, [pc, #268]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fb ff50 	bl	8002080 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061e4:	f7fb ff4c 	bl	8002080 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e1ef      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061f6:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80061f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x420>
 8006202:	e018      	b.n	8006236 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006204:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006208:	4a36      	ldr	r2, [pc, #216]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fb ff36 	bl	8002080 <HAL_GetTick>
 8006214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006218:	f7fb ff32 	bl	8002080 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e1d5      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800622a:	4b2e      	ldr	r3, [pc, #184]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800622c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d036      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d019      	beq.n	800627e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800624a:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006254:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006256:	f7fb ff13 	bl	8002080 <HAL_GetTick>
 800625a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800625e:	f7fb ff0f 	bl	8002080 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e1b2      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006270:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCC_OscConfig+0x49a>
 800627c:	e018      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800627e:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 8006284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800628a:	f7fb fef9 	bl	8002080 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006292:	f7fb fef5 	bl	8002080 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e198      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062a4:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <HAL_RCC_OscConfig+0x520>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8085 	beq.w	80063c8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <HAL_RCC_OscConfig+0x524>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <HAL_RCC_OscConfig+0x524>)
 80062c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ca:	f7fb fed9 	bl	8002080 <HAL_GetTick>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d0:	e00c      	b.n	80062ec <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062d2:	f7fb fed5 	bl	8002080 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b64      	cmp	r3, #100	; 0x64
 80062de:	d905      	bls.n	80062ec <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e178      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
 80062e4:	58024400 	.word	0x58024400
 80062e8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ec:	4b96      	ldr	r3, [pc, #600]	; (8006548 <HAL_RCC_OscConfig+0x784>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ec      	beq.n	80062d2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d106      	bne.n	800630e <HAL_RCC_OscConfig+0x54a>
 8006300:	4b92      	ldr	r3, [pc, #584]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a91      	ldr	r2, [pc, #580]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
 800630c:	e02d      	b.n	800636a <HAL_RCC_OscConfig+0x5a6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10c      	bne.n	8006330 <HAL_RCC_OscConfig+0x56c>
 8006316:	4b8d      	ldr	r3, [pc, #564]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a8c      	ldr	r2, [pc, #560]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	6713      	str	r3, [r2, #112]	; 0x70
 8006322:	4b8a      	ldr	r3, [pc, #552]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	4a89      	ldr	r2, [pc, #548]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006328:	f023 0304 	bic.w	r3, r3, #4
 800632c:	6713      	str	r3, [r2, #112]	; 0x70
 800632e:	e01c      	b.n	800636a <HAL_RCC_OscConfig+0x5a6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b05      	cmp	r3, #5
 8006336:	d10c      	bne.n	8006352 <HAL_RCC_OscConfig+0x58e>
 8006338:	4b84      	ldr	r3, [pc, #528]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	4a83      	ldr	r2, [pc, #524]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	6713      	str	r3, [r2, #112]	; 0x70
 8006344:	4b81      	ldr	r3, [pc, #516]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	4a80      	ldr	r2, [pc, #512]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6713      	str	r3, [r2, #112]	; 0x70
 8006350:	e00b      	b.n	800636a <HAL_RCC_OscConfig+0x5a6>
 8006352:	4b7e      	ldr	r3, [pc, #504]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	4a7d      	ldr	r2, [pc, #500]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	6713      	str	r3, [r2, #112]	; 0x70
 800635e:	4b7b      	ldr	r3, [pc, #492]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4a7a      	ldr	r2, [pc, #488]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d015      	beq.n	800639e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006372:	f7fb fe85 	bl	8002080 <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006378:	e00a      	b.n	8006390 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fb fe81 	bl	8002080 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e122      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006390:	4b6e      	ldr	r3, [pc, #440]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0ee      	beq.n	800637a <HAL_RCC_OscConfig+0x5b6>
 800639c:	e014      	b.n	80063c8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fb fe6f 	bl	8002080 <HAL_GetTick>
 80063a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fb fe6b 	bl	8002080 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e10c      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063bc:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1ee      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8101 	beq.w	80065d4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063d2:	4b5e      	ldr	r3, [pc, #376]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063da:	2b18      	cmp	r3, #24
 80063dc:	f000 80bc 	beq.w	8006558 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	f040 8095 	bne.w	8006514 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ea:	4b58      	ldr	r3, [pc, #352]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a57      	ldr	r2, [pc, #348]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80063f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7fb fe43 	bl	8002080 <HAL_GetTick>
 80063fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fb fe3f 	bl	8002080 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e0e2      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006410:	4b4e      	ldr	r3, [pc, #312]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f0      	bne.n	80063fe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641c:	4b4b      	ldr	r3, [pc, #300]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800641e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006420:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCC_OscConfig+0x78c>)
 8006422:	4013      	ands	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800642c:	0112      	lsls	r2, r2, #4
 800642e:	430a      	orrs	r2, r1
 8006430:	4946      	ldr	r1, [pc, #280]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006432:	4313      	orrs	r3, r2
 8006434:	628b      	str	r3, [r1, #40]	; 0x28
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	3b01      	subs	r3, #1
 800643c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	3b01      	subs	r3, #1
 8006446:	025b      	lsls	r3, r3, #9
 8006448:	b29b      	uxth	r3, r3
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	3b01      	subs	r3, #1
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	3b01      	subs	r3, #1
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006466:	4939      	ldr	r1, [pc, #228]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006468:	4313      	orrs	r3, r2
 800646a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800646c:	4b37      	ldr	r3, [pc, #220]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4a36      	ldr	r2, [pc, #216]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006478:	4b34      	ldr	r3, [pc, #208]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800647a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647c:	4b35      	ldr	r3, [pc, #212]	; (8006554 <HAL_RCC_OscConfig+0x790>)
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006484:	00d2      	lsls	r2, r2, #3
 8006486:	4931      	ldr	r1, [pc, #196]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006488:	4313      	orrs	r3, r2
 800648a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800648c:	4b2f      	ldr	r3, [pc, #188]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f023 020c 	bic.w	r2, r3, #12
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	492c      	ldr	r1, [pc, #176]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800649a:	4313      	orrs	r3, r2
 800649c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	f023 0202 	bic.w	r2, r3, #2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	4928      	ldr	r1, [pc, #160]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064b0:	4b26      	ldr	r3, [pc, #152]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4b23      	ldr	r3, [pc, #140]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4a22      	ldr	r2, [pc, #136]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064c8:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a1f      	ldr	r2, [pc, #124]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_RCC_OscConfig+0x788>)
 80064e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fb fdc8 	bl	8002080 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fb fdc4 	bl	8002080 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e067      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x730>
 8006512:	e05f      	b.n	80065d4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <HAL_RCC_OscConfig+0x788>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a0c      	ldr	r2, [pc, #48]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800651a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800651e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb fdae 	bl	8002080 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fb fdaa 	bl	8002080 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e04d      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800653a:	4b04      	ldr	r3, [pc, #16]	; (800654c <HAL_RCC_OscConfig+0x788>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x764>
 8006546:	e045      	b.n	80065d4 <HAL_RCC_OscConfig+0x810>
 8006548:	58024800 	.word	0x58024800
 800654c:	58024400 	.word	0x58024400
 8006550:	fffffc0c 	.word	0xfffffc0c
 8006554:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006558:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <HAL_RCC_OscConfig+0x81c>)
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800655e:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <HAL_RCC_OscConfig+0x81c>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2b01      	cmp	r3, #1
 800656a:	d031      	beq.n	80065d0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f003 0203 	and.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d12a      	bne.n	80065d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d122      	bne.n	80065d0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d11a      	bne.n	80065d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	0a5b      	lsrs	r3, r3, #9
 800659e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d111      	bne.n	80065d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d108      	bne.n	80065d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	0e1b      	lsrs	r3, r3, #24
 80065c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3730      	adds	r7, #48	; 0x30
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400

080065e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e19c      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065f8:	4b8a      	ldr	r3, [pc, #552]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d910      	bls.n	8006628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b87      	ldr	r3, [pc, #540]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 020f 	bic.w	r2, r3, #15
 800660e:	4985      	ldr	r1, [pc, #532]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b83      	ldr	r3, [pc, #524]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e184      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	4b7b      	ldr	r3, [pc, #492]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006640:	429a      	cmp	r2, r3
 8006642:	d908      	bls.n	8006656 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006644:	4b78      	ldr	r3, [pc, #480]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4975      	ldr	r1, [pc, #468]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006652:	4313      	orrs	r3, r2
 8006654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d010      	beq.n	8006684 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	4b70      	ldr	r3, [pc, #448]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666e:	429a      	cmp	r2, r3
 8006670:	d908      	bls.n	8006684 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006672:	4b6d      	ldr	r3, [pc, #436]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	496a      	ldr	r1, [pc, #424]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006680:	4313      	orrs	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d010      	beq.n	80066b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	4b64      	ldr	r3, [pc, #400]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800669c:	429a      	cmp	r2, r3
 800669e:	d908      	bls.n	80066b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066a0:	4b61      	ldr	r3, [pc, #388]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	495e      	ldr	r1, [pc, #376]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d010      	beq.n	80066e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d908      	bls.n	80066e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066ce:	4b56      	ldr	r3, [pc, #344]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4953      	ldr	r1, [pc, #332]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d010      	beq.n	800670e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	4b4d      	ldr	r3, [pc, #308]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d908      	bls.n	800670e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fc:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f023 020f 	bic.w	r2, r3, #15
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4947      	ldr	r1, [pc, #284]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 800670a:	4313      	orrs	r3, r2
 800670c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d055      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800671a:	4b43      	ldr	r3, [pc, #268]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4940      	ldr	r1, [pc, #256]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006728:	4313      	orrs	r3, r2
 800672a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d107      	bne.n	8006744 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006734:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d121      	bne.n	8006784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0f6      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d107      	bne.n	800675c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800674c:	4b36      	ldr	r3, [pc, #216]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d115      	bne.n	8006784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0ea      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d107      	bne.n	8006774 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006764:	4b30      	ldr	r3, [pc, #192]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0de      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006774:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0d6      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f023 0207 	bic.w	r2, r3, #7
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4925      	ldr	r1, [pc, #148]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 8006792:	4313      	orrs	r3, r2
 8006794:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fb fc73 	bl	8002080 <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679e:	f7fb fc6f 	bl	8002080 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e0be      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b4:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d1eb      	bne.n	800679e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d010      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	429a      	cmp	r2, r3
 80067e0:	d208      	bcs.n	80067f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f023 020f 	bic.w	r2, r3, #15
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	490e      	ldr	r1, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d214      	bcs.n	800682c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 020f 	bic.w	r2, r3, #15
 800680a:	4906      	ldr	r1, [pc, #24]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b04      	ldr	r3, [pc, #16]	; (8006824 <HAL_RCC_ClockConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d005      	beq.n	800682c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e086      	b.n	8006932 <HAL_RCC_ClockConfig+0x34e>
 8006824:	52002000 	.word	0x52002000
 8006828:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d010      	beq.n	800685a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	4b3f      	ldr	r3, [pc, #252]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006844:	429a      	cmp	r2, r3
 8006846:	d208      	bcs.n	800685a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006848:	4b3c      	ldr	r3, [pc, #240]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	4939      	ldr	r1, [pc, #228]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 8006856:	4313      	orrs	r3, r2
 8006858:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d010      	beq.n	8006888 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	4b34      	ldr	r3, [pc, #208]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006872:	429a      	cmp	r2, r3
 8006874:	d208      	bcs.n	8006888 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006876:	4b31      	ldr	r3, [pc, #196]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	492e      	ldr	r1, [pc, #184]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 8006884:	4313      	orrs	r3, r2
 8006886:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d010      	beq.n	80068b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	4b28      	ldr	r3, [pc, #160]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d208      	bcs.n	80068b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068a4:	4b25      	ldr	r3, [pc, #148]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	4922      	ldr	r1, [pc, #136]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d010      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d208      	bcs.n	80068e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068d2:	4b1a      	ldr	r3, [pc, #104]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	4917      	ldr	r1, [pc, #92]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068e4:	f000 f834 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	4912      	ldr	r1, [pc, #72]	; (8006940 <HAL_RCC_ClockConfig+0x35c>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006902:	4b0e      	ldr	r3, [pc, #56]	; (800693c <HAL_RCC_ClockConfig+0x358>)
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <HAL_RCC_ClockConfig+0x35c>)
 800690c:	5cd3      	ldrb	r3, [r2, r3]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <HAL_RCC_ClockConfig+0x360>)
 800691a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x364>)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <HAL_RCC_ClockConfig+0x368>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fb fb60 	bl	8001fec <HAL_InitTick>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	0800a438 	.word	0x0800a438
 8006944:	24000004 	.word	0x24000004
 8006948:	24000000 	.word	0x24000000
 800694c:	240002c4 	.word	0x240002c4

08006950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006956:	4bb3      	ldr	r3, [pc, #716]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800695e:	2b18      	cmp	r3, #24
 8006960:	f200 8155 	bhi.w	8006c0e <HAL_RCC_GetSysClockFreq+0x2be>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	080069d1 	.word	0x080069d1
 8006970:	08006c0f 	.word	0x08006c0f
 8006974:	08006c0f 	.word	0x08006c0f
 8006978:	08006c0f 	.word	0x08006c0f
 800697c:	08006c0f 	.word	0x08006c0f
 8006980:	08006c0f 	.word	0x08006c0f
 8006984:	08006c0f 	.word	0x08006c0f
 8006988:	08006c0f 	.word	0x08006c0f
 800698c:	080069f7 	.word	0x080069f7
 8006990:	08006c0f 	.word	0x08006c0f
 8006994:	08006c0f 	.word	0x08006c0f
 8006998:	08006c0f 	.word	0x08006c0f
 800699c:	08006c0f 	.word	0x08006c0f
 80069a0:	08006c0f 	.word	0x08006c0f
 80069a4:	08006c0f 	.word	0x08006c0f
 80069a8:	08006c0f 	.word	0x08006c0f
 80069ac:	080069fd 	.word	0x080069fd
 80069b0:	08006c0f 	.word	0x08006c0f
 80069b4:	08006c0f 	.word	0x08006c0f
 80069b8:	08006c0f 	.word	0x08006c0f
 80069bc:	08006c0f 	.word	0x08006c0f
 80069c0:	08006c0f 	.word	0x08006c0f
 80069c4:	08006c0f 	.word	0x08006c0f
 80069c8:	08006c0f 	.word	0x08006c0f
 80069cc:	08006a03 	.word	0x08006a03
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d0:	4b94      	ldr	r3, [pc, #592]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069dc:	4b91      	ldr	r3, [pc, #580]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	4a90      	ldr	r2, [pc, #576]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80069ee:	e111      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069f0:	4b8d      	ldr	r3, [pc, #564]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069f2:	61bb      	str	r3, [r7, #24]
    break;
 80069f4:	e10e      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069f6:	4b8d      	ldr	r3, [pc, #564]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069f8:	61bb      	str	r3, [r7, #24]
    break;
 80069fa:	e10b      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80069fc:	4b8c      	ldr	r3, [pc, #560]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069fe:	61bb      	str	r3, [r7, #24]
    break;
 8006a00:	e108      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a02:	4b88      	ldr	r3, [pc, #544]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a0c:	4b85      	ldr	r3, [pc, #532]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a16:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a18:	4b82      	ldr	r3, [pc, #520]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a22:	4b80      	ldr	r3, [pc, #512]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	08db      	lsrs	r3, r3, #3
 8006a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80e1 	beq.w	8006c08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f000 8083 	beq.w	8006b54 <HAL_RCC_GetSysClockFreq+0x204>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f200 80a1 	bhi.w	8006b98 <HAL_RCC_GetSysClockFreq+0x248>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x114>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d056      	beq.n	8006b10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a62:	e099      	b.n	8006b98 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a64:	4b6f      	ldr	r3, [pc, #444]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02d      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a70:	4b6c      	ldr	r3, [pc, #432]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a6b      	ldr	r2, [pc, #428]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b62      	ldr	r3, [pc, #392]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006aca:	e087      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b51      	ldr	r3, [pc, #324]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0e:	e065      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b40      	ldr	r3, [pc, #256]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b52:	e043      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b96:	e021      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006baa:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bda:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006bdc:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	0a5b      	lsrs	r3, r3, #9
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	3301      	adds	r3, #1
 8006be8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c00:	ee17 3a90 	vmov	r3, s15
 8006c04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c06:	e005      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
    break;
 8006c0c:	e002      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c10:	61bb      	str	r3, [r7, #24]
    break;
 8006c12:	bf00      	nop
  }

  return sysclockfreq;
 8006c14:	69bb      	ldr	r3, [r7, #24]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3724      	adds	r7, #36	; 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400
 8006c28:	03d09000 	.word	0x03d09000
 8006c2c:	003d0900 	.word	0x003d0900
 8006c30:	007a1200 	.word	0x007a1200
 8006c34:	46000000 	.word	0x46000000
 8006c38:	4c742400 	.word	0x4c742400
 8006c3c:	4a742400 	.word	0x4a742400
 8006c40:	4af42400 	.word	0x4af42400

08006c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c4a:	f7ff fe81 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	490f      	ldr	r1, [pc, #60]	; (8006c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c5c:	5ccb      	ldrb	r3, [r1, r3]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	4a09      	ldr	r2, [pc, #36]	; (8006c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c72:	5cd3      	ldrb	r3, [r2, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c82:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	58024400 	.word	0x58024400
 8006c98:	0800a438 	.word	0x0800a438
 8006c9c:	24000004 	.word	0x24000004
 8006ca0:	24000000 	.word	0x24000000

08006ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ca8:	f7ff ffcc 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4904      	ldr	r1, [pc, #16]	; (8006ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	0800a438 	.word	0x0800a438

08006cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cd4:	f7ff ffb6 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	4904      	ldr	r1, [pc, #16]	; (8006cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ce6:	5ccb      	ldrb	r3, [r1, r3]
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	0800a438 	.word	0x0800a438

08006cfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d04:	2300      	movs	r3, #0
 8006d06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d08:	2300      	movs	r3, #0
 8006d0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d03f      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d20:	d02a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d26:	d824      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d2c:	d018      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d32:	d81e      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	d007      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d3e:	e018      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d40:	4bab      	ldr	r3, [pc, #684]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4aaa      	ldr	r2, [pc, #680]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d4c:	e015      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2102      	movs	r1, #2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f9cf 	bl	80080f8 <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d5e:	e00c      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	2102      	movs	r1, #2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 fa78 	bl	800825c <RCCEx_PLL3_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
      break;
 8006d76:	e000      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d80:	4b9b      	ldr	r3, [pc, #620]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8c:	4998      	ldr	r1, [pc, #608]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	650b      	str	r3, [r1, #80]	; 0x50
 8006d92:	e001      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d03d      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d826      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006dc9 	.word	0x08006dc9
 8006db8:	08006dd7 	.word	0x08006dd7
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	08006e01 	.word	0x08006e01
 8006dc4:	08006e01 	.word	0x08006e01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc8:	4b89      	ldr	r3, [pc, #548]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a88      	ldr	r2, [pc, #544]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dd4:	e015      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 f98b 	bl	80080f8 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006de6:	e00c      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3324      	adds	r3, #36	; 0x24
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fa34 	bl	800825c <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	e000      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e08:	4b79      	ldr	r3, [pc, #484]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	f023 0207 	bic.w	r2, r3, #7
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	4976      	ldr	r1, [pc, #472]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	650b      	str	r3, [r1, #80]	; 0x50
 8006e1a:	e001      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d042      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d02b      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d825      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e3e:	d028      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e40:	2bc0      	cmp	r3, #192	; 0xc0
 8006e42:	d821      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d016      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006e48:	2b80      	cmp	r3, #128	; 0x80
 8006e4a:	d81d      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d007      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006e54:	e018      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e56:	4b66      	ldr	r3, [pc, #408]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a65      	ldr	r2, [pc, #404]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e62:	e017      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 f944 	bl	80080f8 <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e74:	e00e      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3324      	adds	r3, #36	; 0x24
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 f9ed 	bl	800825c <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e86:	e005      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8c:	e002      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e9a:	4b55      	ldr	r3, [pc, #340]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea6:	4952      	ldr	r1, [pc, #328]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8006eac:	e001      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d049      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ec8:	d030      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ece:	d82a      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ed4:	d02c      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006ed6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006eda:	d824      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee0:	d018      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee6:	d81e      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ef0:	d007      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ef2:	e018      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef4:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	4a3d      	ldr	r2, [pc, #244]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f00:	e017      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 f8f5 	bl	80080f8 <RCCEx_PLL2_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f12:	e00e      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f99e 	bl	800825c <RCCEx_PLL3_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f24:	e005      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f38:	4b2d      	ldr	r3, [pc, #180]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f46:	492a      	ldr	r1, [pc, #168]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04c      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f68:	d030      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f6e:	d82a      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f74:	d02c      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f7a:	d824      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f80:	d018      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f86:	d81e      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f90:	d007      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006f92:	e018      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f94:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fa0:	e017      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 f8a5 	bl	80080f8 <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fb2:	e00e      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f94e 	bl	800825c <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc4:	e005      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fca:	e002      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006fcc:	bf00      	nop
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fe6:	4902      	ldr	r1, [pc, #8]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	658b      	str	r3, [r1, #88]	; 0x58
 8006fec:	e004      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006fee:	bf00      	nop
 8006ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d032      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007008:	2b30      	cmp	r3, #48	; 0x30
 800700a:	d01c      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800700c:	2b30      	cmp	r3, #48	; 0x30
 800700e:	d817      	bhi.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007010:	2b20      	cmp	r3, #32
 8007012:	d00c      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007014:	2b20      	cmp	r3, #32
 8007016:	d813      	bhi.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d016      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800701c:	2b10      	cmp	r3, #16
 800701e:	d10f      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007020:	4baf      	ldr	r3, [pc, #700]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4aae      	ldr	r2, [pc, #696]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800702c:	e00e      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3304      	adds	r3, #4
 8007032:	2102      	movs	r1, #2
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f85f 	bl	80080f8 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800703e:	e005      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
      break;
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800704a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007052:	4ba3      	ldr	r3, [pc, #652]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705e:	49a0      	ldr	r1, [pc, #640]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007060:	4313      	orrs	r3, r2
 8007062:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007064:	e001      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d047      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800707e:	d030      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007084:	d82a      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800708a:	d02c      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800708c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007090:	d824      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007096:	d018      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709c:	d81e      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d007      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80070a8:	e018      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070aa:	4b8d      	ldr	r3, [pc, #564]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	4a8c      	ldr	r2, [pc, #560]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070b6:	e017      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 f81a 	bl	80080f8 <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070c8:	e00e      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f8c3 	bl	800825c <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070da:	e005      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      break;
 80070e0:	e002      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80070e2:	bf00      	nop
 80070e4:	e000      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80070e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070ee:	4b7c      	ldr	r3, [pc, #496]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fa:	4979      	ldr	r1, [pc, #484]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007100:	e001      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d049      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800711a:	d02e      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800711c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007120:	d828      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007126:	d02a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800712c:	d822      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800712e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007132:	d026      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007138:	d81c      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800713a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713e:	d010      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007144:	d816      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01d      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714e:	d111      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	2101      	movs	r1, #1
 8007156:	4618      	mov	r0, r3
 8007158:	f000 ffce 	bl	80080f8 <RCCEx_PLL2_Config>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007160:	e012      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3324      	adds	r3, #36	; 0x24
 8007166:	2101      	movs	r1, #1
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f877 	bl	800825c <RCCEx_PLL3_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007172:	e009      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
      break;
 8007178:	e006      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800717a:	bf00      	nop
 800717c:	e004      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800717e:	bf00      	nop
 8007180:	e002      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007182:	bf00      	nop
 8007184:	e000      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800718e:	4b54      	ldr	r3, [pc, #336]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007192:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	4951      	ldr	r1, [pc, #324]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800719c:	4313      	orrs	r3, r2
 800719e:	650b      	str	r3, [r1, #80]	; 0x50
 80071a0:	e001      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04b      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071bc:	d02e      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80071be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071c2:	d828      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c8:	d02a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d822      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80071d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071d4:	d026      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80071d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071da:	d81c      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80071dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e0:	d010      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80071e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e6:	d816      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01d      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80071ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071f0:	d111      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	2101      	movs	r1, #1
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 ff7d 	bl	80080f8 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007202:	e012      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	2101      	movs	r1, #1
 800720a:	4618      	mov	r0, r3
 800720c:	f001 f826 	bl	800825c <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007214:	e009      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e006      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800721c:	bf00      	nop
 800721e:	e004      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007220:	bf00      	nop
 8007222:	e002      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007230:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007234:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800723e:	4928      	ldr	r1, [pc, #160]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007240:	4313      	orrs	r3, r2
 8007242:	658b      	str	r3, [r1, #88]	; 0x58
 8007244:	e001      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02f      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725e:	d00e      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007264:	d814      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d015      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800726a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726e:	d10f      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800727c:	e00c      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	2101      	movs	r1, #1
 8007284:	4618      	mov	r0, r3
 8007286:	f000 ff37 	bl	80080f8 <RCCEx_PLL2_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]
      break;
 8007294:	e000      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800729e:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072aa:	490d      	ldr	r1, [pc, #52]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	650b      	str	r3, [r1, #80]	; 0x50
 80072b0:	e001      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d033      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d81c      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	0800730b 	.word	0x0800730b
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	080072f3 	.word	0x080072f3
 80072dc:	0800730b 	.word	0x0800730b
 80072e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e4:	4bb8      	ldr	r3, [pc, #736]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	4ab7      	ldr	r2, [pc, #732]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80072f0:	e00c      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2102      	movs	r1, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fefd 	bl	80080f8 <RCCEx_PLL2_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
      break;
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800730a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007312:	4bad      	ldr	r3, [pc, #692]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	49aa      	ldr	r1, [pc, #680]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007320:	4313      	orrs	r3, r2
 8007322:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007324:	e001      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 8086 	beq.w	8007444 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007338:	4ba4      	ldr	r3, [pc, #656]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4aa3      	ldr	r2, [pc, #652]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800733e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007344:	f7fa fe9c 	bl	8002080 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800734a:	e009      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800734c:	f7fa fe98 	bl	8002080 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d902      	bls.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	75fb      	strb	r3, [r7, #23]
        break;
 800735e:	e005      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007360:	4b9a      	ldr	r3, [pc, #616]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ef      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d166      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007372:	4b95      	ldr	r3, [pc, #596]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800737c:	4053      	eors	r3, r2
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007386:	4b90      	ldr	r3, [pc, #576]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007390:	4b8d      	ldr	r3, [pc, #564]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007394:	4a8c      	ldr	r2, [pc, #560]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800739c:	4b8a      	ldr	r3, [pc, #552]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	4a89      	ldr	r2, [pc, #548]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073a8:	4a87      	ldr	r2, [pc, #540]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b8:	d115      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ba:	f7fa fe61 	bl	8002080 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073c0:	e00b      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fa fe5d 	bl	8002080 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d902      	bls.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	75fb      	strb	r3, [r7, #23]
            break;
 80073d8:	e005      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0ed      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d126      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073fa:	d10d      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80073fc:	4b72      	ldr	r3, [pc, #456]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800740a:	0919      	lsrs	r1, r3, #4
 800740c:	4b70      	ldr	r3, [pc, #448]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800740e:	400b      	ands	r3, r1
 8007410:	496d      	ldr	r1, [pc, #436]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	610b      	str	r3, [r1, #16]
 8007416:	e005      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007418:	4b6b      	ldr	r3, [pc, #428]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	4a6a      	ldr	r2, [pc, #424]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800741e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007422:	6113      	str	r3, [r2, #16]
 8007424:	4b68      	ldr	r3, [pc, #416]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800742e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007432:	4965      	ldr	r1, [pc, #404]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007434:	4313      	orrs	r3, r2
 8007436:	670b      	str	r3, [r1, #112]	; 0x70
 8007438:	e004      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	75bb      	strb	r3, [r7, #22]
 800743e:	e001      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d07e      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007454:	2b28      	cmp	r3, #40	; 0x28
 8007456:	d867      	bhi.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	0800752f 	.word	0x0800752f
 8007464:	08007529 	.word	0x08007529
 8007468:	08007529 	.word	0x08007529
 800746c:	08007529 	.word	0x08007529
 8007470:	08007529 	.word	0x08007529
 8007474:	08007529 	.word	0x08007529
 8007478:	08007529 	.word	0x08007529
 800747c:	08007529 	.word	0x08007529
 8007480:	08007505 	.word	0x08007505
 8007484:	08007529 	.word	0x08007529
 8007488:	08007529 	.word	0x08007529
 800748c:	08007529 	.word	0x08007529
 8007490:	08007529 	.word	0x08007529
 8007494:	08007529 	.word	0x08007529
 8007498:	08007529 	.word	0x08007529
 800749c:	08007529 	.word	0x08007529
 80074a0:	08007517 	.word	0x08007517
 80074a4:	08007529 	.word	0x08007529
 80074a8:	08007529 	.word	0x08007529
 80074ac:	08007529 	.word	0x08007529
 80074b0:	08007529 	.word	0x08007529
 80074b4:	08007529 	.word	0x08007529
 80074b8:	08007529 	.word	0x08007529
 80074bc:	08007529 	.word	0x08007529
 80074c0:	0800752f 	.word	0x0800752f
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007529 	.word	0x08007529
 80074cc:	08007529 	.word	0x08007529
 80074d0:	08007529 	.word	0x08007529
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007529 	.word	0x08007529
 80074dc:	08007529 	.word	0x08007529
 80074e0:	0800752f 	.word	0x0800752f
 80074e4:	08007529 	.word	0x08007529
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007529 	.word	0x08007529
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007529 	.word	0x08007529
 80074fc:	08007529 	.word	0x08007529
 8007500:	0800752f 	.word	0x0800752f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	2101      	movs	r1, #1
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fdf4 	bl	80080f8 <RCCEx_PLL2_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007514:	e00c      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3324      	adds	r3, #36	; 0x24
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fe9d 	bl	800825c <RCCEx_PLL3_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007526:	e003      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	75fb      	strb	r3, [r7, #23]
      break;
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800752e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007542:	4921      	ldr	r1, [pc, #132]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	654b      	str	r3, [r1, #84]	; 0x54
 8007548:	e001      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d03e      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755e:	2b05      	cmp	r3, #5
 8007560:	d820      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	080075ab 	.word	0x080075ab
 800756c:	08007581 	.word	0x08007581
 8007570:	08007593 	.word	0x08007593
 8007574:	080075ab 	.word	0x080075ab
 8007578:	080075ab 	.word	0x080075ab
 800757c:	080075ab 	.word	0x080075ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	2101      	movs	r1, #1
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fdb6 	bl	80080f8 <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007590:	e00c      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3324      	adds	r3, #36	; 0x24
 8007596:	2101      	movs	r1, #1
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fe5f 	bl	800825c <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075a2:	e003      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
      break;
 80075a8:	e000      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80075aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d110      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b6:	f023 0207 	bic.w	r2, r3, #7
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075be:	4902      	ldr	r1, [pc, #8]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	654b      	str	r3, [r1, #84]	; 0x54
 80075c4:	e008      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80075c6:	bf00      	nop
 80075c8:	58024400 	.word	0x58024400
 80075cc:	58024800 	.word	0x58024800
 80075d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d039      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d820      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007637 	.word	0x08007637
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	0800761f 	.word	0x0800761f
 8007600:	08007637 	.word	0x08007637
 8007604:	08007637 	.word	0x08007637
 8007608:	08007637 	.word	0x08007637
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	2101      	movs	r1, #1
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fd70 	bl	80080f8 <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800761c:	e00c      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3324      	adds	r3, #36	; 0x24
 8007622:	2101      	movs	r1, #1
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fe19 	bl	800825c <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	e000      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800763e:	4bb7      	ldr	r3, [pc, #732]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	f023 0207 	bic.w	r2, r3, #7
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764c:	49b3      	ldr	r1, [pc, #716]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800764e:	4313      	orrs	r3, r2
 8007650:	658b      	str	r3, [r1, #88]	; 0x58
 8007652:	e001      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d04b      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800766a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800766e:	d02e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007674:	d828      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d02a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d822      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007686:	d026      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800768c:	d81c      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800768e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007692:	d010      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007698:	d816      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01d      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800769e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a2:	d111      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3304      	adds	r3, #4
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd24 	bl	80080f8 <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076b4:	e012      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3324      	adds	r3, #36	; 0x24
 80076ba:	2102      	movs	r1, #2
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fdcd 	bl	800825c <RCCEx_PLL3_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076c6:	e009      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	75fb      	strb	r3, [r7, #23]
      break;
 80076cc:	e006      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80076ce:	bf00      	nop
 80076d0:	e004      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80076d2:	bf00      	nop
 80076d4:	e002      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80076d6:	bf00      	nop
 80076d8:	e000      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80076da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076e2:	4b8e      	ldr	r3, [pc, #568]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076f0:	498a      	ldr	r1, [pc, #552]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	654b      	str	r3, [r1, #84]	; 0x54
 80076f6:	e001      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d04b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800770e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007712:	d02e      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007718:	d828      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800771a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771e:	d02a      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007724:	d822      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800772a:	d026      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800772c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007730:	d81c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007736:	d010      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773c:	d816      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01d      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007746:	d111      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fcd2 	bl	80080f8 <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007758:	e012      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	2102      	movs	r1, #2
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fd7b 	bl	800825c <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800776a:	e009      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
      break;
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007772:	bf00      	nop
 8007774:	e004      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800777e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007786:	4b65      	ldr	r3, [pc, #404]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007794:	4961      	ldr	r1, [pc, #388]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007796:	4313      	orrs	r3, r2
 8007798:	658b      	str	r3, [r1, #88]	; 0x58
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d04b      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077b6:	d02e      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80077b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077bc:	d828      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80077be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c2:	d02a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80077c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c8:	d822      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80077ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077ce:	d026      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80077d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077d4:	d81c      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d010      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e0:	d816      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01d      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80077e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ea:	d111      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fc80 	bl	80080f8 <RCCEx_PLL2_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077fc:	e012      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	2102      	movs	r1, #2
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fd29 	bl	800825c <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800780e:	e009      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007816:	bf00      	nop
 8007818:	e004      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800781a:	bf00      	nop
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800782a:	4b3c      	ldr	r3, [pc, #240]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007838:	4938      	ldr	r1, [pc, #224]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800783a:	4313      	orrs	r3, r2
 800783c:	658b      	str	r3, [r1, #88]	; 0x58
 800783e:	e001      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785a:	d10a      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	2102      	movs	r1, #2
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fcfa 	bl	800825c <RCCEx_PLL3_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007880:	4926      	ldr	r1, [pc, #152]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007882:	4313      	orrs	r3, r2
 8007884:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01a      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789c:	d10a      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	2102      	movs	r1, #2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fcd9 	bl	800825c <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078b4:	4b19      	ldr	r3, [pc, #100]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c2:	4916      	ldr	r1, [pc, #88]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d036      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078de:	d01f      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80078e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e4:	d817      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80078ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ee:	d009      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80078f0:	e011      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fbfd 	bl	80080f8 <RCCEx_PLL2_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007902:	e00e      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3324      	adds	r3, #36	; 0x24
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fca6 	bl	800825c <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007914:	e005      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
      break;
 800791a:	e002      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800791c:	58024400 	.word	0x58024400
      break;
 8007920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007928:	4b93      	ldr	r3, [pc, #588]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007936:	4990      	ldr	r1, [pc, #576]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007938:	4313      	orrs	r3, r2
 800793a:	658b      	str	r3, [r1, #88]	; 0x58
 800793c:	e001      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d033      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007958:	d01c      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800795a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800795e:	d816      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007964:	d003      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800796a:	d007      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800796c:	e00f      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796e:	4b82      	ldr	r3, [pc, #520]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	4a81      	ldr	r2, [pc, #516]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800797a:	e00c      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3324      	adds	r3, #36	; 0x24
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fc6a 	bl	800825c <RCCEx_PLL3_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	75fb      	strb	r3, [r7, #23]
      break;
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800799c:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	4973      	ldr	r1, [pc, #460]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	654b      	str	r3, [r1, #84]	; 0x54
 80079b0:	e001      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d029      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80079ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ce:	d007      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80079d0:	e00f      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d2:	4b69      	ldr	r3, [pc, #420]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a68      	ldr	r2, [pc, #416]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80079de:	e00b      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fb86 	bl	80080f8 <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80079f0:	e002      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
      break;
 80079f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079fe:	4b5e      	ldr	r3, [pc, #376]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0a:	495b      	ldr	r1, [pc, #364]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a10:	e001      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3324      	adds	r3, #36	; 0x24
 8007a26:	2102      	movs	r1, #2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fc17 	bl	800825c <RCCEx_PLL3_Config>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d030      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a4c:	d017      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a52:	d811      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a58:	d013      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5e:	d80b      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d010      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6a:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	4a42      	ldr	r2, [pc, #264]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007a76:	e007      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7c:	e004      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a8e:	4b3a      	ldr	r3, [pc, #232]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9a:	4937      	ldr	r1, [pc, #220]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007aa0:	e001      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d008      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	492e      	ldr	r1, [pc, #184]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ad0:	4b29      	ldr	r3, [pc, #164]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ade:	4926      	ldr	r1, [pc, #152]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007af0:	4b21      	ldr	r3, [pc, #132]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007afc:	491e      	ldr	r1, [pc, #120]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b18:	6113      	str	r3, [r2, #16]
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b24:	4914      	ldr	r1, [pc, #80]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da08      	bge.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b3e:	490e      	ldr	r1, [pc, #56]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b50:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5e:	4906      	ldr	r1, [pc, #24]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007b64:	7dbb      	ldrb	r3, [r7, #22]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	58024400 	.word	0x58024400

08007b7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b80:	f7ff f860 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8007b84:	4602      	mov	r2, r0
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	091b      	lsrs	r3, r3, #4
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b92:	5ccb      	ldrb	r3, [r1, r3]
 8007b94:	f003 031f 	and.w	r3, r3, #31
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	0800a438 	.word	0x0800a438

08007ba8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b089      	sub	sp, #36	; 0x24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bb0:	4ba1      	ldr	r3, [pc, #644]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007bba:	4b9f      	ldr	r3, [pc, #636]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	0b1b      	lsrs	r3, r3, #12
 8007bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bc6:	4b9c      	ldr	r3, [pc, #624]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007bd2:	4b99      	ldr	r3, [pc, #612]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd6:	08db      	lsrs	r3, r3, #3
 8007bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8111 	beq.w	8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f000 8083 	beq.w	8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	f200 80a1 	bhi.w	8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d056      	beq.n	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c12:	e099      	b.n	8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c14:	4b88      	ldr	r3, [pc, #544]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d02d      	beq.n	8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c20:	4b85      	ldr	r3, [pc, #532]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	08db      	lsrs	r3, r3, #3
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	4a84      	ldr	r2, [pc, #528]	; (8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4a:	4b7b      	ldr	r3, [pc, #492]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c7a:	e087      	b.n	8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8e:	4b6a      	ldr	r3, [pc, #424]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cbe:	e065      	b.n	8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b59      	ldr	r3, [pc, #356]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d02:	e043      	b.n	8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b48      	ldr	r3, [pc, #288]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d46:	e021      	b.n	8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b37      	ldr	r3, [pc, #220]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007d8c:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	0a5b      	lsrs	r3, r3, #9
 8007d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007db2:	ee17 2a90 	vmov	r2, s15
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de0:	ee17 2a90 	vmov	r2, s15
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	0e1b      	lsrs	r3, r3, #24
 8007dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0e:	ee17 2a90 	vmov	r2, s15
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e16:	e008      	b.n	8007e2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	609a      	str	r2, [r3, #8]
}
 8007e2a:	bf00      	nop
 8007e2c:	3724      	adds	r7, #36	; 0x24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	46000000 	.word	0x46000000
 8007e44:	4c742400 	.word	0x4c742400
 8007e48:	4a742400 	.word	0x4a742400
 8007e4c:	4af42400 	.word	0x4af42400

08007e50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b089      	sub	sp, #36	; 0x24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e58:	4ba1      	ldr	r3, [pc, #644]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007e62:	4b9f      	ldr	r3, [pc, #636]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	0d1b      	lsrs	r3, r3, #20
 8007e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e6e:	4b9c      	ldr	r3, [pc, #624]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	0a1b      	lsrs	r3, r3, #8
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007e7a:	4b99      	ldr	r3, [pc, #612]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8111 	beq.w	80080c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	f000 8083 	beq.w	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	f200 80a1 	bhi.w	8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d056      	beq.n	8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007eba:	e099      	b.n	8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ebc:	4b88      	ldr	r3, [pc, #544]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d02d      	beq.n	8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec8:	4b85      	ldr	r3, [pc, #532]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	08db      	lsrs	r3, r3, #3
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	4a84      	ldr	r2, [pc, #528]	; (80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	ee07 3a90 	vmov	s15, r3
 8007ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef2:	4b7b      	ldr	r3, [pc, #492]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f06:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f22:	e087      	b.n	8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f36:	4b6a      	ldr	r3, [pc, #424]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f66:	e065      	b.n	8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7a:	4b59      	ldr	r3, [pc, #356]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007faa:	e043      	b.n	8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fbe:	4b48      	ldr	r3, [pc, #288]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fee:	e021      	b.n	8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008002:	4b37      	ldr	r3, [pc, #220]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008012:	ed97 6a03 	vldr	s12, [r7, #12]
 8008016:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800801a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008032:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008034:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	0a5b      	lsrs	r3, r3, #9
 800803a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800804a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800805a:	ee17 2a90 	vmov	r2, s15
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008062:	4b1f      	ldr	r3, [pc, #124]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	0c1b      	lsrs	r3, r3, #16
 8008068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800807c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008088:	ee17 2a90 	vmov	r2, s15
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008090:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	0e1b      	lsrs	r3, r3, #24
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b6:	ee17 2a90 	vmov	r2, s15
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080be:	e008      	b.n	80080d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	609a      	str	r2, [r3, #8]
}
 80080d2:	bf00      	nop
 80080d4:	3724      	adds	r7, #36	; 0x24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	58024400 	.word	0x58024400
 80080e4:	03d09000 	.word	0x03d09000
 80080e8:	46000000 	.word	0x46000000
 80080ec:	4c742400 	.word	0x4c742400
 80080f0:	4a742400 	.word	0x4a742400
 80080f4:	4af42400 	.word	0x4af42400

080080f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008106:	4b53      	ldr	r3, [pc, #332]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b03      	cmp	r3, #3
 8008110:	d101      	bne.n	8008116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e099      	b.n	800824a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008116:	4b4f      	ldr	r3, [pc, #316]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a4e      	ldr	r2, [pc, #312]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800811c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008122:	f7f9 ffad 	bl	8002080 <HAL_GetTick>
 8008126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008128:	e008      	b.n	800813c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800812a:	f7f9 ffa9 	bl	8002080 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e086      	b.n	800824a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800813c:	4b45      	ldr	r3, [pc, #276]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008148:	4b42      	ldr	r3, [pc, #264]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	031b      	lsls	r3, r3, #12
 8008156:	493f      	ldr	r1, [pc, #252]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008158:	4313      	orrs	r3, r2
 800815a:	628b      	str	r3, [r1, #40]	; 0x28
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	3b01      	subs	r3, #1
 8008162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	025b      	lsls	r3, r3, #9
 800816e:	b29b      	uxth	r3, r3
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	3b01      	subs	r3, #1
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	3b01      	subs	r3, #1
 8008186:	061b      	lsls	r3, r3, #24
 8008188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800818c:	4931      	ldr	r1, [pc, #196]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800818e:	4313      	orrs	r3, r2
 8008190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008192:	4b30      	ldr	r3, [pc, #192]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	492d      	ldr	r1, [pc, #180]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	f023 0220 	bic.w	r2, r3, #32
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	4928      	ldr	r1, [pc, #160]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081b6:	4b27      	ldr	r3, [pc, #156]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	4a26      	ldr	r2, [pc, #152]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	f023 0310 	bic.w	r3, r3, #16
 80081c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081c2:	4b24      	ldr	r3, [pc, #144]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <RCCEx_PLL2_Config+0x160>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	69d2      	ldr	r2, [r2, #28]
 80081ce:	00d2      	lsls	r2, r2, #3
 80081d0:	4920      	ldr	r1, [pc, #128]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081d6:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	4a1e      	ldr	r2, [pc, #120]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081dc:	f043 0310 	orr.w	r3, r3, #16
 80081e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a19      	ldr	r2, [pc, #100]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081f4:	e00f      	b.n	8008216 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081fc:	4b15      	ldr	r3, [pc, #84]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008208:	e005      	b.n	8008216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800820a:	4b12      	ldr	r3, [pc, #72]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	4a11      	ldr	r2, [pc, #68]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a0e      	ldr	r2, [pc, #56]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800821c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008222:	f7f9 ff2d 	bl	8002080 <HAL_GetTick>
 8008226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008228:	e008      	b.n	800823c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800822a:	f7f9 ff29 	bl	8002080 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d901      	bls.n	800823c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <RCCEx_PLL2_Config+0x15c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0f0      	beq.n	800822a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400
 8008258:	ffff0007 	.word	0xffff0007

0800825c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800826a:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d101      	bne.n	800827a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e099      	b.n	80083ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800827a:	4b4f      	ldr	r3, [pc, #316]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008286:	f7f9 fefb 	bl	8002080 <HAL_GetTick>
 800828a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800828c:	e008      	b.n	80082a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800828e:	f7f9 fef7 	bl	8002080 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e086      	b.n	80083ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082ac:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	051b      	lsls	r3, r3, #20
 80082ba:	493f      	ldr	r1, [pc, #252]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	628b      	str	r3, [r1, #40]	; 0x28
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	025b      	lsls	r3, r3, #9
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	3b01      	subs	r3, #1
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	061b      	lsls	r3, r3, #24
 80082ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082f0:	4931      	ldr	r1, [pc, #196]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082f6:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	492d      	ldr	r1, [pc, #180]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	4928      	ldr	r1, [pc, #160]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008316:	4313      	orrs	r3, r2
 8008318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800831a:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008326:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <RCCEx_PLL3_Config+0x160>)
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	69d2      	ldr	r2, [r2, #28]
 8008332:	00d2      	lsls	r2, r2, #3
 8008334:	4920      	ldr	r1, [pc, #128]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008336:	4313      	orrs	r3, r2
 8008338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800833a:	4b1f      	ldr	r3, [pc, #124]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a19      	ldr	r2, [pc, #100]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008358:	e00f      	b.n	800837a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d106      	bne.n	800836e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008360:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800836c:	e005      	b.n	800837a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a11      	ldr	r2, [pc, #68]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 8008380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008386:	f7f9 fe7b 	bl	8002080 <HAL_GetTick>
 800838a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800838c:	e008      	b.n	80083a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800838e:	f7f9 fe77 	bl	8002080 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e006      	b.n	80083ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <RCCEx_PLL3_Config+0x15c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f0      	beq.n	800838e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	58024400 	.word	0x58024400
 80083bc:	ffff0007 	.word	0xffff0007

080083c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e042      	b.n	8008458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7f9 fc6d 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2224      	movs	r2, #36	; 0x24
 80083ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0201 	bic.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fb90 	bl	8008b28 <UART_SetConfig>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e022      	b.n	8008458 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 f8e4 	bl	80095e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800842e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800843e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f96b 	bl	800972c <UART_CheckIdleState>
 8008456:	4603      	mov	r3, r0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008474:	2b20      	cmp	r3, #32
 8008476:	d168      	bne.n	800854a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <HAL_UART_Transmit_DMA+0x24>
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e061      	b.n	800854c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_UART_Transmit_DMA+0x36>
 8008492:	2302      	movs	r3, #2
 8008494:	e05a      	b.n	800854c <HAL_UART_Transmit_DMA+0xec>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2221      	movs	r2, #33	; 0x21
 80084c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d02c      	beq.n	8008526 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d0:	4a20      	ldr	r2, [pc, #128]	; (8008554 <HAL_UART_Transmit_DMA+0xf4>)
 80084d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d8:	4a1f      	ldr	r2, [pc, #124]	; (8008558 <HAL_UART_Transmit_DMA+0xf8>)
 80084da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e0:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_UART_Transmit_DMA+0xfc>)
 80084e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e8:	2200      	movs	r2, #0
 80084ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	4619      	mov	r1, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3328      	adds	r3, #40	; 0x28
 80084fc:	461a      	mov	r2, r3
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	f7fa ff4a 	bl	8003398 <HAL_DMA_Start_IT>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2210      	movs	r2, #16
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e012      	b.n	800854c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2240      	movs	r2, #64	; 0x40
 800852c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008544:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e000      	b.n	800854c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	08009965 	.word	0x08009965
 8008558:	080099b5 	.word	0x080099b5
 800855c:	080099d1 	.word	0x080099d1

08008560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	f640 030f 	movw	r3, #2063	; 0x80f
 8008586:	4013      	ands	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d118      	bne.n	80085c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d013      	beq.n	80085c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8282 	beq.w	8008abc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
      }
      return;
 80085c0:	e27c      	b.n	8008abc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 80ef 	beq.w	80087a8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4b73      	ldr	r3, [pc, #460]	; (800879c <HAL_UART_IRQHandler+0x23c>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4b72      	ldr	r3, [pc, #456]	; (80087a0 <HAL_UART_IRQHandler+0x240>)
 80085d8:	4013      	ands	r3, r2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80e4 	beq.w	80087a8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_UART_IRQHandler+0xac>
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2201      	movs	r2, #1
 80085fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008602:	f043 0201 	orr.w	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d010      	beq.n	8008638 <HAL_UART_IRQHandler+0xd8>
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2202      	movs	r2, #2
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862e:	f043 0204 	orr.w	r2, r3, #4
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d010      	beq.n	8008664 <HAL_UART_IRQHandler+0x104>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2204      	movs	r2, #4
 8008652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865a:	f043 0202 	orr.w	r2, r3, #2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d015      	beq.n	800869a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4b48      	ldr	r3, [pc, #288]	; (800879c <HAL_UART_IRQHandler+0x23c>)
 800867c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2208      	movs	r2, #8
 8008688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008690:	f043 0208 	orr.w	r2, r3, #8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d011      	beq.n	80086c8 <HAL_UART_IRQHandler+0x168>
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086be:	f043 0220 	orr.w	r2, r3, #32
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 81f6 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d104      	bne.n	80086f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008708:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b40      	cmp	r3, #64	; 0x40
 8008716:	d004      	beq.n	8008722 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871e:	2b00      	cmp	r3, #0
 8008720:	d031      	beq.n	8008786 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 f8ec 	bl	8009900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d123      	bne.n	800877e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008744:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d013      	beq.n	8008776 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008752:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <HAL_UART_IRQHandler+0x244>)
 8008754:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875a:	4618      	mov	r0, r3
 800875c:	f7fb fba4 	bl	8003ea8 <HAL_DMA_Abort_IT>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d017      	beq.n	8008796 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008774:	e00f      	b.n	8008796 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9c0 	bl	8008afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877c:	e00b      	b.n	8008796 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9bc 	bl	8008afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008784:	e007      	b.n	8008796 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9b8 	bl	8008afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008794:	e194      	b.n	8008ac0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008796:	bf00      	nop
    return;
 8008798:	e192      	b.n	8008ac0 <HAL_UART_IRQHandler+0x560>
 800879a:	bf00      	nop
 800879c:	10000001 	.word	0x10000001
 80087a0:	04000120 	.word	0x04000120
 80087a4:	08009a51 	.word	0x08009a51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	f040 810f 	bne.w	80089d0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8109 	beq.w	80089d0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8103 	beq.w	80089d0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2210      	movs	r2, #16
 80087d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b40      	cmp	r3, #64	; 0x40
 80087de:	f040 80bb 	bne.w	8008958 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a96      	ldr	r2, [pc, #600]	; (8008a44 <HAL_UART_IRQHandler+0x4e4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d059      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a94      	ldr	r2, [pc, #592]	; (8008a48 <HAL_UART_IRQHandler+0x4e8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d053      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a92      	ldr	r2, [pc, #584]	; (8008a4c <HAL_UART_IRQHandler+0x4ec>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d04d      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a90      	ldr	r2, [pc, #576]	; (8008a50 <HAL_UART_IRQHandler+0x4f0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d047      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a8e      	ldr	r2, [pc, #568]	; (8008a54 <HAL_UART_IRQHandler+0x4f4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d041      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a8c      	ldr	r2, [pc, #560]	; (8008a58 <HAL_UART_IRQHandler+0x4f8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d03b      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a8a      	ldr	r2, [pc, #552]	; (8008a5c <HAL_UART_IRQHandler+0x4fc>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d035      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a88      	ldr	r2, [pc, #544]	; (8008a60 <HAL_UART_IRQHandler+0x500>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d02f      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a86      	ldr	r2, [pc, #536]	; (8008a64 <HAL_UART_IRQHandler+0x504>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d029      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a84      	ldr	r2, [pc, #528]	; (8008a68 <HAL_UART_IRQHandler+0x508>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d023      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a82      	ldr	r2, [pc, #520]	; (8008a6c <HAL_UART_IRQHandler+0x50c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d01d      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a80      	ldr	r2, [pc, #512]	; (8008a70 <HAL_UART_IRQHandler+0x510>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d017      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a7e      	ldr	r2, [pc, #504]	; (8008a74 <HAL_UART_IRQHandler+0x514>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d011      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a7c      	ldr	r2, [pc, #496]	; (8008a78 <HAL_UART_IRQHandler+0x518>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a7a      	ldr	r2, [pc, #488]	; (8008a7c <HAL_UART_IRQHandler+0x51c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0x342>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a78      	ldr	r2, [pc, #480]	; (8008a80 <HAL_UART_IRQHandler+0x520>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d105      	bne.n	80088ae <HAL_UART_IRQHandler+0x34e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	e004      	b.n	80088b8 <HAL_UART_IRQHandler+0x358>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8101 	beq.w	8008ac4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c8:	893a      	ldrh	r2, [r7, #8]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	f080 80fa 	bcs.w	8008ac4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	893a      	ldrh	r2, [r7, #8]
 80088d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e2:	d02b      	beq.n	800893c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0201 	bic.w	r2, r2, #1
 8008902:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008912:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0210 	bic.w	r2, r2, #16
 8008930:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008936:	4618      	mov	r0, r3
 8008938:	f7fa ff98 	bl	800386c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008948:	b29b      	uxth	r3, r3
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8dd 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008956:	e0b5      	b.n	8008ac4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008964:	b29b      	uxth	r3, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80a8 	beq.w	8008ac8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008978:	897b      	ldrh	r3, [r7, #10]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 80a4 	beq.w	8008ac8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800898e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	4b3a      	ldr	r3, [pc, #232]	; (8008a84 <HAL_UART_IRQHandler+0x524>)
 800899c:	400b      	ands	r3, r1
 800899e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0210 	bic.w	r2, r2, #16
 80089c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089c4:	897b      	ldrh	r3, [r7, #10]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f8a1 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ce:	e07b      	b.n	8008ac8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00d      	beq.n	80089f6 <HAL_UART_IRQHandler+0x496>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 f85e 	bl	8009ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089f4:	e06b      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d057      	beq.n	8008acc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	4798      	blx	r3
    }
    return;
 8008a24:	e052      	b.n	8008acc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02b      	beq.n	8008a88 <HAL_UART_IRQHandler+0x528>
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d026      	beq.n	8008a88 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f81e 	bl	8009a7c <UART_EndTransmit_IT>
    return;
 8008a40:	e045      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
 8008a42:	bf00      	nop
 8008a44:	40020010 	.word	0x40020010
 8008a48:	40020028 	.word	0x40020028
 8008a4c:	40020040 	.word	0x40020040
 8008a50:	40020058 	.word	0x40020058
 8008a54:	40020070 	.word	0x40020070
 8008a58:	40020088 	.word	0x40020088
 8008a5c:	400200a0 	.word	0x400200a0
 8008a60:	400200b8 	.word	0x400200b8
 8008a64:	40020410 	.word	0x40020410
 8008a68:	40020428 	.word	0x40020428
 8008a6c:	40020440 	.word	0x40020440
 8008a70:	40020458 	.word	0x40020458
 8008a74:	40020470 	.word	0x40020470
 8008a78:	40020488 	.word	0x40020488
 8008a7c:	400204a0 	.word	0x400204a0
 8008a80:	400204b8 	.word	0x400204b8
 8008a84:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d008      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x544>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f81b 	bl	8009ad8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aa2:	e014      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <HAL_UART_IRQHandler+0x56e>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	da0c      	bge.n	8008ace <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f805 	bl	8009ac4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aba:	e008      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
      return;
 8008abc:	bf00      	nop
 8008abe:	e006      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
    return;
 8008ac0:	bf00      	nop
 8008ac2:	e004      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
      return;
 8008ac4:	bf00      	nop
 8008ac6:	e002      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
      return;
 8008ac8:	bf00      	nop
 8008aca:	e000      	b.n	8008ace <HAL_UART_IRQHandler+0x56e>
    return;
 8008acc:	bf00      	nop
  }
}
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	4bbf      	ldr	r3, [pc, #764]	; (8008e54 <UART_SetConfig+0x32c>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4ab5      	ldr	r2, [pc, #724]	; (8008e58 <UART_SetConfig+0x330>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	4bb0      	ldr	r3, [pc, #704]	; (8008e5c <UART_SetConfig+0x334>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f023 010f 	bic.w	r1, r3, #15
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4aa7      	ldr	r2, [pc, #668]	; (8008e60 <UART_SetConfig+0x338>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d176      	bne.n	8008cb4 <UART_SetConfig+0x18c>
 8008bc6:	4ba7      	ldr	r3, [pc, #668]	; (8008e64 <UART_SetConfig+0x33c>)
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bce:	2b28      	cmp	r3, #40	; 0x28
 8008bd0:	d86c      	bhi.n	8008cac <UART_SetConfig+0x184>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <UART_SetConfig+0xb0>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008c7d 	.word	0x08008c7d
 8008bdc:	08008cad 	.word	0x08008cad
 8008be0:	08008cad 	.word	0x08008cad
 8008be4:	08008cad 	.word	0x08008cad
 8008be8:	08008cad 	.word	0x08008cad
 8008bec:	08008cad 	.word	0x08008cad
 8008bf0:	08008cad 	.word	0x08008cad
 8008bf4:	08008cad 	.word	0x08008cad
 8008bf8:	08008c85 	.word	0x08008c85
 8008bfc:	08008cad 	.word	0x08008cad
 8008c00:	08008cad 	.word	0x08008cad
 8008c04:	08008cad 	.word	0x08008cad
 8008c08:	08008cad 	.word	0x08008cad
 8008c0c:	08008cad 	.word	0x08008cad
 8008c10:	08008cad 	.word	0x08008cad
 8008c14:	08008cad 	.word	0x08008cad
 8008c18:	08008c8d 	.word	0x08008c8d
 8008c1c:	08008cad 	.word	0x08008cad
 8008c20:	08008cad 	.word	0x08008cad
 8008c24:	08008cad 	.word	0x08008cad
 8008c28:	08008cad 	.word	0x08008cad
 8008c2c:	08008cad 	.word	0x08008cad
 8008c30:	08008cad 	.word	0x08008cad
 8008c34:	08008cad 	.word	0x08008cad
 8008c38:	08008c95 	.word	0x08008c95
 8008c3c:	08008cad 	.word	0x08008cad
 8008c40:	08008cad 	.word	0x08008cad
 8008c44:	08008cad 	.word	0x08008cad
 8008c48:	08008cad 	.word	0x08008cad
 8008c4c:	08008cad 	.word	0x08008cad
 8008c50:	08008cad 	.word	0x08008cad
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008c9d 	.word	0x08008c9d
 8008c5c:	08008cad 	.word	0x08008cad
 8008c60:	08008cad 	.word	0x08008cad
 8008c64:	08008cad 	.word	0x08008cad
 8008c68:	08008cad 	.word	0x08008cad
 8008c6c:	08008cad 	.word	0x08008cad
 8008c70:	08008cad 	.word	0x08008cad
 8008c74:	08008cad 	.word	0x08008cad
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e222      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e21e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e21a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9a:	e216      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca2:	e212      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e20e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e20a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a6b      	ldr	r2, [pc, #428]	; (8008e68 <UART_SetConfig+0x340>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d130      	bne.n	8008d20 <UART_SetConfig+0x1f8>
 8008cbe:	4b69      	ldr	r3, [pc, #420]	; (8008e64 <UART_SetConfig+0x33c>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b05      	cmp	r3, #5
 8008cc8:	d826      	bhi.n	8008d18 <UART_SetConfig+0x1f0>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <UART_SetConfig+0x1a8>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008ce9 	.word	0x08008ce9
 8008cd4:	08008cf1 	.word	0x08008cf1
 8008cd8:	08008cf9 	.word	0x08008cf9
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e1ec      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e1e8      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfe:	e1e4      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d00:	2310      	movs	r3, #16
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e1e0      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d08:	2320      	movs	r3, #32
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0e:	e1dc      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e1d8      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d18:	2380      	movs	r3, #128	; 0x80
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e1d4      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a51      	ldr	r2, [pc, #324]	; (8008e6c <UART_SetConfig+0x344>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d130      	bne.n	8008d8c <UART_SetConfig+0x264>
 8008d2a:	4b4e      	ldr	r3, [pc, #312]	; (8008e64 <UART_SetConfig+0x33c>)
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	d826      	bhi.n	8008d84 <UART_SetConfig+0x25c>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x214>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d55 	.word	0x08008d55
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	08008d65 	.word	0x08008d65
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5a:	e1b6      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d62:	e1b2      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d64:	2308      	movs	r3, #8
 8008d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6a:	e1ae      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d72:	e1aa      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d74:	2320      	movs	r3, #32
 8008d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7a:	e1a6      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d82:	e1a2      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8a:	e19e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a37      	ldr	r2, [pc, #220]	; (8008e70 <UART_SetConfig+0x348>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d130      	bne.n	8008df8 <UART_SetConfig+0x2d0>
 8008d96:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <UART_SetConfig+0x33c>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	d826      	bhi.n	8008df0 <UART_SetConfig+0x2c8>
 8008da2:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <UART_SetConfig+0x280>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc9 	.word	0x08008dc9
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc6:	e180      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dce:	e17c      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd6:	e178      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dde:	e174      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008de0:	2320      	movs	r3, #32
 8008de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de6:	e170      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dee:	e16c      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df6:	e168      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1d      	ldr	r2, [pc, #116]	; (8008e74 <UART_SetConfig+0x34c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d142      	bne.n	8008e88 <UART_SetConfig+0x360>
 8008e02:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <UART_SetConfig+0x33c>)
 8008e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d838      	bhi.n	8008e80 <UART_SetConfig+0x358>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x2ec>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e3d 	.word	0x08008e3d
 8008e20:	08008e45 	.word	0x08008e45
 8008e24:	08008e4d 	.word	0x08008e4d
 8008e28:	08008e79 	.word	0x08008e79
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e32:	e14a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e146      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e142      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	e13e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e52:	e13a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e54:	cfff69f3 	.word	0xcfff69f3
 8008e58:	58000c00 	.word	0x58000c00
 8008e5c:	11fff4ff 	.word	0x11fff4ff
 8008e60:	40011000 	.word	0x40011000
 8008e64:	58024400 	.word	0x58024400
 8008e68:	40004400 	.word	0x40004400
 8008e6c:	40004800 	.word	0x40004800
 8008e70:	40004c00 	.word	0x40004c00
 8008e74:	40005000 	.word	0x40005000
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7e:	e124      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e86:	e120      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4acc      	ldr	r2, [pc, #816]	; (80091c0 <UART_SetConfig+0x698>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d176      	bne.n	8008f80 <UART_SetConfig+0x458>
 8008e92:	4bcc      	ldr	r3, [pc, #816]	; (80091c4 <UART_SetConfig+0x69c>)
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e9a:	2b28      	cmp	r3, #40	; 0x28
 8008e9c:	d86c      	bhi.n	8008f78 <UART_SetConfig+0x450>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <UART_SetConfig+0x37c>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f79 	.word	0x08008f79
 8008eac:	08008f79 	.word	0x08008f79
 8008eb0:	08008f79 	.word	0x08008f79
 8008eb4:	08008f79 	.word	0x08008f79
 8008eb8:	08008f79 	.word	0x08008f79
 8008ebc:	08008f79 	.word	0x08008f79
 8008ec0:	08008f79 	.word	0x08008f79
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f79 	.word	0x08008f79
 8008ecc:	08008f79 	.word	0x08008f79
 8008ed0:	08008f79 	.word	0x08008f79
 8008ed4:	08008f79 	.word	0x08008f79
 8008ed8:	08008f79 	.word	0x08008f79
 8008edc:	08008f79 	.word	0x08008f79
 8008ee0:	08008f79 	.word	0x08008f79
 8008ee4:	08008f59 	.word	0x08008f59
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	08008f79 	.word	0x08008f79
 8008ef0:	08008f79 	.word	0x08008f79
 8008ef4:	08008f79 	.word	0x08008f79
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	08008f79 	.word	0x08008f79
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f69 	.word	0x08008f69
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008f79 	.word	0x08008f79
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4e:	e0bc      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f56:	e0b8      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5e:	e0b4      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f66:	e0b0      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6e:	e0ac      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f70:	2340      	movs	r3, #64	; 0x40
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e0a8      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f78:	2380      	movs	r3, #128	; 0x80
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e0a4      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a90      	ldr	r2, [pc, #576]	; (80091c8 <UART_SetConfig+0x6a0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d130      	bne.n	8008fec <UART_SetConfig+0x4c4>
 8008f8a:	4b8e      	ldr	r3, [pc, #568]	; (80091c4 <UART_SetConfig+0x69c>)
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d826      	bhi.n	8008fe4 <UART_SetConfig+0x4bc>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <UART_SetConfig+0x474>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fb5 	.word	0x08008fb5
 8008fa0:	08008fbd 	.word	0x08008fbd
 8008fa4:	08008fc5 	.word	0x08008fc5
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e086      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e082      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e07e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	e07a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	e076      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fdc:	2340      	movs	r3, #64	; 0x40
 8008fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe2:	e072      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fe4:	2380      	movs	r3, #128	; 0x80
 8008fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fea:	e06e      	b.n	80090ca <UART_SetConfig+0x5a2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a76      	ldr	r2, [pc, #472]	; (80091cc <UART_SetConfig+0x6a4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d130      	bne.n	8009058 <UART_SetConfig+0x530>
 8008ff6:	4b73      	ldr	r3, [pc, #460]	; (80091c4 <UART_SetConfig+0x69c>)
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d826      	bhi.n	8009050 <UART_SetConfig+0x528>
 8009002:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <UART_SetConfig+0x4e0>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009021 	.word	0x08009021
 800900c:	08009029 	.word	0x08009029
 8009010:	08009031 	.word	0x08009031
 8009014:	08009039 	.word	0x08009039
 8009018:	08009041 	.word	0x08009041
 800901c:	08009049 	.word	0x08009049
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009026:	e050      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009028:	2304      	movs	r3, #4
 800902a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902e:	e04c      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009030:	2308      	movs	r3, #8
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	e048      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009038:	2310      	movs	r3, #16
 800903a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903e:	e044      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009040:	2320      	movs	r3, #32
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e040      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e03c      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009050:	2380      	movs	r3, #128	; 0x80
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e038      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a5c      	ldr	r2, [pc, #368]	; (80091d0 <UART_SetConfig+0x6a8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d130      	bne.n	80090c4 <UART_SetConfig+0x59c>
 8009062:	4b58      	ldr	r3, [pc, #352]	; (80091c4 <UART_SetConfig+0x69c>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b05      	cmp	r3, #5
 800906c:	d826      	bhi.n	80090bc <UART_SetConfig+0x594>
 800906e:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <UART_SetConfig+0x54c>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	0800908d 	.word	0x0800908d
 8009078:	08009095 	.word	0x08009095
 800907c:	0800909d 	.word	0x0800909d
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090ad 	.word	0x080090ad
 8009088:	080090b5 	.word	0x080090b5
 800908c:	2302      	movs	r3, #2
 800908e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009092:	e01a      	b.n	80090ca <UART_SetConfig+0x5a2>
 8009094:	2304      	movs	r3, #4
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e016      	b.n	80090ca <UART_SetConfig+0x5a2>
 800909c:	2308      	movs	r3, #8
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e012      	b.n	80090ca <UART_SetConfig+0x5a2>
 80090a4:	2310      	movs	r3, #16
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e00e      	b.n	80090ca <UART_SetConfig+0x5a2>
 80090ac:	2320      	movs	r3, #32
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e00a      	b.n	80090ca <UART_SetConfig+0x5a2>
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e006      	b.n	80090ca <UART_SetConfig+0x5a2>
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e002      	b.n	80090ca <UART_SetConfig+0x5a2>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a40      	ldr	r2, [pc, #256]	; (80091d0 <UART_SetConfig+0x6a8>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	f040 80ef 	bne.w	80092b4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090da:	2b20      	cmp	r3, #32
 80090dc:	dc46      	bgt.n	800916c <UART_SetConfig+0x644>
 80090de:	2b02      	cmp	r3, #2
 80090e0:	f2c0 8081 	blt.w	80091e6 <UART_SetConfig+0x6be>
 80090e4:	3b02      	subs	r3, #2
 80090e6:	2b1e      	cmp	r3, #30
 80090e8:	d87d      	bhi.n	80091e6 <UART_SetConfig+0x6be>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <UART_SetConfig+0x5c8>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009173 	.word	0x08009173
 80090f4:	080091e7 	.word	0x080091e7
 80090f8:	0800917b 	.word	0x0800917b
 80090fc:	080091e7 	.word	0x080091e7
 8009100:	080091e7 	.word	0x080091e7
 8009104:	080091e7 	.word	0x080091e7
 8009108:	0800918b 	.word	0x0800918b
 800910c:	080091e7 	.word	0x080091e7
 8009110:	080091e7 	.word	0x080091e7
 8009114:	080091e7 	.word	0x080091e7
 8009118:	080091e7 	.word	0x080091e7
 800911c:	080091e7 	.word	0x080091e7
 8009120:	080091e7 	.word	0x080091e7
 8009124:	080091e7 	.word	0x080091e7
 8009128:	0800919b 	.word	0x0800919b
 800912c:	080091e7 	.word	0x080091e7
 8009130:	080091e7 	.word	0x080091e7
 8009134:	080091e7 	.word	0x080091e7
 8009138:	080091e7 	.word	0x080091e7
 800913c:	080091e7 	.word	0x080091e7
 8009140:	080091e7 	.word	0x080091e7
 8009144:	080091e7 	.word	0x080091e7
 8009148:	080091e7 	.word	0x080091e7
 800914c:	080091e7 	.word	0x080091e7
 8009150:	080091e7 	.word	0x080091e7
 8009154:	080091e7 	.word	0x080091e7
 8009158:	080091e7 	.word	0x080091e7
 800915c:	080091e7 	.word	0x080091e7
 8009160:	080091e7 	.word	0x080091e7
 8009164:	080091e7 	.word	0x080091e7
 8009168:	080091d9 	.word	0x080091d9
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d036      	beq.n	80091de <UART_SetConfig+0x6b6>
 8009170:	e039      	b.n	80091e6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009172:	f7fe fd03 	bl	8007b7c <HAL_RCCEx_GetD3PCLK1Freq>
 8009176:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009178:	e03b      	b.n	80091f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917a:	f107 0314 	add.w	r3, r7, #20
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fd12 	bl	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009188:	e033      	b.n	80091f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fe5e 	bl	8007e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009198:	e02b      	b.n	80091f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919a:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <UART_SetConfig+0x69c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091a6:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <UART_SetConfig+0x69c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	f003 0303 	and.w	r3, r3, #3
 80091b0:	4a08      	ldr	r2, [pc, #32]	; (80091d4 <UART_SetConfig+0x6ac>)
 80091b2:	fa22 f303 	lsr.w	r3, r2, r3
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091b8:	e01b      	b.n	80091f2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80091ba:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <UART_SetConfig+0x6ac>)
 80091bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091be:	e018      	b.n	80091f2 <UART_SetConfig+0x6ca>
 80091c0:	40011400 	.word	0x40011400
 80091c4:	58024400 	.word	0x58024400
 80091c8:	40007800 	.word	0x40007800
 80091cc:	40007c00 	.word	0x40007c00
 80091d0:	58000c00 	.word	0x58000c00
 80091d4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091d8:	4bc4      	ldr	r3, [pc, #784]	; (80094ec <UART_SetConfig+0x9c4>)
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091dc:	e009      	b.n	80091f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091e4:	e005      	b.n	80091f2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 81da 	beq.w	80095ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	4abc      	ldr	r2, [pc, #752]	; (80094f0 <UART_SetConfig+0x9c8>)
 8009200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009204:	461a      	mov	r2, r3
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	fbb3 f3f2 	udiv	r3, r3, r2
 800920c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4413      	add	r3, r2
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	429a      	cmp	r2, r3
 800921c:	d305      	bcc.n	800922a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009224:	6a3a      	ldr	r2, [r7, #32]
 8009226:	429a      	cmp	r2, r3
 8009228:	d903      	bls.n	8009232 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009230:	e1bd      	b.n	80095ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	4618      	mov	r0, r3
 8009236:	f04f 0100 	mov.w	r1, #0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	4aac      	ldr	r2, [pc, #688]	; (80094f0 <UART_SetConfig+0x9c8>)
 8009240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009244:	b29a      	uxth	r2, r3
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	f7f7 f845 	bl	80002d8 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	020b      	lsls	r3, r1, #8
 8009260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009264:	0202      	lsls	r2, r0, #8
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	6849      	ldr	r1, [r1, #4]
 800926a:	0849      	lsrs	r1, r1, #1
 800926c:	4608      	mov	r0, r1
 800926e:	f04f 0100 	mov.w	r1, #0
 8009272:	1814      	adds	r4, r2, r0
 8009274:	eb43 0501 	adc.w	r5, r3, r1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	461a      	mov	r2, r3
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	4620      	mov	r0, r4
 8009284:	4629      	mov	r1, r5
 8009286:	f7f7 f827 	bl	80002d8 <__aeabi_uldivmod>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4613      	mov	r3, r2
 8009290:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009298:	d308      	bcc.n	80092ac <UART_SetConfig+0x784>
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a0:	d204      	bcs.n	80092ac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	e180      	b.n	80095ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80092b2:	e17c      	b.n	80095ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092bc:	f040 80bf 	bne.w	800943e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80092c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	dc49      	bgt.n	800935c <UART_SetConfig+0x834>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	db7c      	blt.n	80093c6 <UART_SetConfig+0x89e>
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d87a      	bhi.n	80093c6 <UART_SetConfig+0x89e>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <UART_SetConfig+0x7b0>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	08009363 	.word	0x08009363
 80092dc:	0800936b 	.word	0x0800936b
 80092e0:	080093c7 	.word	0x080093c7
 80092e4:	080093c7 	.word	0x080093c7
 80092e8:	08009373 	.word	0x08009373
 80092ec:	080093c7 	.word	0x080093c7
 80092f0:	080093c7 	.word	0x080093c7
 80092f4:	080093c7 	.word	0x080093c7
 80092f8:	08009383 	.word	0x08009383
 80092fc:	080093c7 	.word	0x080093c7
 8009300:	080093c7 	.word	0x080093c7
 8009304:	080093c7 	.word	0x080093c7
 8009308:	080093c7 	.word	0x080093c7
 800930c:	080093c7 	.word	0x080093c7
 8009310:	080093c7 	.word	0x080093c7
 8009314:	080093c7 	.word	0x080093c7
 8009318:	08009393 	.word	0x08009393
 800931c:	080093c7 	.word	0x080093c7
 8009320:	080093c7 	.word	0x080093c7
 8009324:	080093c7 	.word	0x080093c7
 8009328:	080093c7 	.word	0x080093c7
 800932c:	080093c7 	.word	0x080093c7
 8009330:	080093c7 	.word	0x080093c7
 8009334:	080093c7 	.word	0x080093c7
 8009338:	080093c7 	.word	0x080093c7
 800933c:	080093c7 	.word	0x080093c7
 8009340:	080093c7 	.word	0x080093c7
 8009344:	080093c7 	.word	0x080093c7
 8009348:	080093c7 	.word	0x080093c7
 800934c:	080093c7 	.word	0x080093c7
 8009350:	080093c7 	.word	0x080093c7
 8009354:	080093c7 	.word	0x080093c7
 8009358:	080093b9 	.word	0x080093b9
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d02e      	beq.n	80093be <UART_SetConfig+0x896>
 8009360:	e031      	b.n	80093c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009362:	f7fd fc9f 	bl	8006ca4 <HAL_RCC_GetPCLK1Freq>
 8009366:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009368:	e033      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936a:	f7fd fcb1 	bl	8006cd0 <HAL_RCC_GetPCLK2Freq>
 800936e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009370:	e02f      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009372:	f107 0314 	add.w	r3, r7, #20
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fc16 	bl	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009380:	e027      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009382:	f107 0308 	add.w	r3, r7, #8
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fd62 	bl	8007e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009390:	e01f      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009392:	4b58      	ldr	r3, [pc, #352]	; (80094f4 <UART_SetConfig+0x9cc>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800939e:	4b55      	ldr	r3, [pc, #340]	; (80094f4 <UART_SetConfig+0x9cc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	08db      	lsrs	r3, r3, #3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	4a53      	ldr	r2, [pc, #332]	; (80094f8 <UART_SetConfig+0x9d0>)
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b0:	e00f      	b.n	80093d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80093b2:	4b51      	ldr	r3, [pc, #324]	; (80094f8 <UART_SetConfig+0x9d0>)
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093b6:	e00c      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093b8:	4b4c      	ldr	r3, [pc, #304]	; (80094ec <UART_SetConfig+0x9c4>)
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093bc:	e009      	b.n	80093d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093c4:	e005      	b.n	80093d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80ea 	beq.w	80095ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	4a44      	ldr	r2, [pc, #272]	; (80094f0 <UART_SetConfig+0x9c8>)
 80093e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ec:	005a      	lsls	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d916      	bls.n	8009436 <UART_SetConfig+0x90e>
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800940e:	d212      	bcs.n	8009436 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	b29b      	uxth	r3, r3
 8009414:	f023 030f 	bic.w	r3, r3, #15
 8009418:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	b29b      	uxth	r3, r3
 8009420:	f003 0307 	and.w	r3, r3, #7
 8009424:	b29a      	uxth	r2, r3
 8009426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009428:	4313      	orrs	r3, r2
 800942a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009432:	60da      	str	r2, [r3, #12]
 8009434:	e0bb      	b.n	80095ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800943c:	e0b7      	b.n	80095ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800943e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009442:	2b20      	cmp	r3, #32
 8009444:	dc4a      	bgt.n	80094dc <UART_SetConfig+0x9b4>
 8009446:	2b00      	cmp	r3, #0
 8009448:	f2c0 8086 	blt.w	8009558 <UART_SetConfig+0xa30>
 800944c:	2b20      	cmp	r3, #32
 800944e:	f200 8083 	bhi.w	8009558 <UART_SetConfig+0xa30>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0x930>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	080094e3 	.word	0x080094e3
 800945c:	080094fd 	.word	0x080094fd
 8009460:	08009559 	.word	0x08009559
 8009464:	08009559 	.word	0x08009559
 8009468:	08009505 	.word	0x08009505
 800946c:	08009559 	.word	0x08009559
 8009470:	08009559 	.word	0x08009559
 8009474:	08009559 	.word	0x08009559
 8009478:	08009515 	.word	0x08009515
 800947c:	08009559 	.word	0x08009559
 8009480:	08009559 	.word	0x08009559
 8009484:	08009559 	.word	0x08009559
 8009488:	08009559 	.word	0x08009559
 800948c:	08009559 	.word	0x08009559
 8009490:	08009559 	.word	0x08009559
 8009494:	08009559 	.word	0x08009559
 8009498:	08009525 	.word	0x08009525
 800949c:	08009559 	.word	0x08009559
 80094a0:	08009559 	.word	0x08009559
 80094a4:	08009559 	.word	0x08009559
 80094a8:	08009559 	.word	0x08009559
 80094ac:	08009559 	.word	0x08009559
 80094b0:	08009559 	.word	0x08009559
 80094b4:	08009559 	.word	0x08009559
 80094b8:	08009559 	.word	0x08009559
 80094bc:	08009559 	.word	0x08009559
 80094c0:	08009559 	.word	0x08009559
 80094c4:	08009559 	.word	0x08009559
 80094c8:	08009559 	.word	0x08009559
 80094cc:	08009559 	.word	0x08009559
 80094d0:	08009559 	.word	0x08009559
 80094d4:	08009559 	.word	0x08009559
 80094d8:	0800954b 	.word	0x0800954b
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d037      	beq.n	8009550 <UART_SetConfig+0xa28>
 80094e0:	e03a      	b.n	8009558 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094e2:	f7fd fbdf 	bl	8006ca4 <HAL_RCC_GetPCLK1Freq>
 80094e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094e8:	e03c      	b.n	8009564 <UART_SetConfig+0xa3c>
 80094ea:	bf00      	nop
 80094ec:	003d0900 	.word	0x003d0900
 80094f0:	0800a450 	.word	0x0800a450
 80094f4:	58024400 	.word	0x58024400
 80094f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fc:	f7fd fbe8 	bl	8006cd0 <HAL_RCC_GetPCLK2Freq>
 8009500:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009502:	e02f      	b.n	8009564 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009504:	f107 0314 	add.w	r3, r7, #20
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fb4d 	bl	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009512:	e027      	b.n	8009564 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009514:	f107 0308 	add.w	r3, r7, #8
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fc99 	bl	8007e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009522:	e01f      	b.n	8009564 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009524:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <UART_SetConfig+0xab0>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d009      	beq.n	8009544 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009530:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <UART_SetConfig+0xab0>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	08db      	lsrs	r3, r3, #3
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	4a28      	ldr	r2, [pc, #160]	; (80095dc <UART_SetConfig+0xab4>)
 800953c:	fa22 f303 	lsr.w	r3, r2, r3
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009542:	e00f      	b.n	8009564 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <UART_SetConfig+0xab4>)
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009548:	e00c      	b.n	8009564 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800954a:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <UART_SetConfig+0xab8>)
 800954c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800954e:	e009      	b.n	8009564 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009556:	e005      	b.n	8009564 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009562:	bf00      	nop
    }

    if (pclk != 0U)
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d021      	beq.n	80095ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <UART_SetConfig+0xabc>)
 8009570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009574:	461a      	mov	r2, r3
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	fbb3 f2f2 	udiv	r2, r3, r2
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	441a      	add	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	fbb2 f3f3 	udiv	r3, r2, r3
 800958c:	b29b      	uxth	r3, r3
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	2b0f      	cmp	r3, #15
 8009594:	d908      	bls.n	80095a8 <UART_SetConfig+0xa80>
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800959c:	d204      	bcs.n	80095a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095a4:	60da      	str	r2, [r3, #12]
 80095a6:	e002      	b.n	80095ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80095ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3738      	adds	r7, #56	; 0x38
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bdb0      	pop	{r4, r5, r7, pc}
 80095d6:	bf00      	nop
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	003d0900 	.word	0x003d0900
 80095e4:	0800a450 	.word	0x0800a450

080095e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01a      	beq.n	80096fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e6:	d10a      	bne.n	80096fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	605a      	str	r2, [r3, #4]
  }
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800973c:	f7f8 fca0 	bl	8002080 <HAL_GetTick>
 8009740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d10e      	bne.n	800976e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f82f 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e025      	b.n	80097ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b04      	cmp	r3, #4
 800977a:	d10e      	bne.n	800979a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800977c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f819 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e00f      	b.n	80097ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d2:	e062      	b.n	800989a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d05e      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097dc:	f7f8 fc50 	bl	8002080 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d302      	bcc.n	80097f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d11d      	bne.n	800982e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009800:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2220      	movs	r2, #32
 8009816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e045      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02e      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800984a:	d126      	bne.n	800989a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009854:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009864:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0201 	bic.w	r2, r2, #1
 8009874:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e00f      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4013      	ands	r3, r2
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d08d      	beq.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80098d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80098e8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
	...

08009900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009916:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6899      	ldr	r1, [r3, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <UART_EndRxTransfer+0x60>)
 8009924:	400b      	ands	r3, r1
 8009926:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800992c:	2b01      	cmp	r3, #1
 800992e:	d107      	bne.n	8009940 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0210 	bic.w	r2, r2, #16
 800993e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2220      	movs	r2, #32
 8009944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	effffffe 	.word	0xeffffffe

08009964 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997a:	d014      	beq.n	80099a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009992:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099a4:	e002      	b.n	80099ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff f894 	bl	8008ad4 <HAL_UART_TxCpltCallback>
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff f890 	bl	8008ae8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d109      	bne.n	8009a10 <UART_DMAError+0x40>
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2b21      	cmp	r3, #33	; 0x21
 8009a00:	d106      	bne.n	8009a10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	f7ff ff59 	bl	80098c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1a:	2b40      	cmp	r3, #64	; 0x40
 8009a1c:	d109      	bne.n	8009a32 <UART_DMAError+0x62>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b22      	cmp	r3, #34	; 0x22
 8009a22:	d106      	bne.n	8009a32 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009a2c:	6978      	ldr	r0, [r7, #20]
 8009a2e:	f7ff ff67 	bl	8009900 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a38:	f043 0210 	orr.w	r2, r3, #16
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a42:	6978      	ldr	r0, [r7, #20]
 8009a44:	f7ff f85a 	bl	8008afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a48:	bf00      	nop
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7ff f844 	bl	8008afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a74:	bf00      	nop
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a92:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff f816 	bl	8008ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e027      	b.n	8009b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2224      	movs	r2, #36	; 0x24
 8009b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 0201 	bic.w	r2, r2, #1
 8009b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e02d      	b.n	8009bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2224      	movs	r2, #36	; 0x24
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0201 	bic.w	r2, r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f850 	bl	8009c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e02d      	b.n	8009c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2224      	movs	r2, #36	; 0x24
 8009bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f812 	bl	8009c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d108      	bne.n	8009c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c78:	e031      	b.n	8009cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c7e:	2310      	movs	r3, #16
 8009c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	0e5b      	lsrs	r3, r3, #25
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	0f5b      	lsrs	r3, r3, #29
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	7b3a      	ldrb	r2, [r7, #12]
 8009ca6:	4911      	ldr	r1, [pc, #68]	; (8009cec <UARTEx_SetNbDataToProcess+0x94>)
 8009ca8:	5c8a      	ldrb	r2, [r1, r2]
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cae:	7b3a      	ldrb	r2, [r7, #12]
 8009cb0:	490f      	ldr	r1, [pc, #60]	; (8009cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8009cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	7b7a      	ldrb	r2, [r7, #13]
 8009cc4:	4909      	ldr	r1, [pc, #36]	; (8009cec <UARTEx_SetNbDataToProcess+0x94>)
 8009cc6:	5c8a      	ldrb	r2, [r1, r2]
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ccc:	7b7a      	ldrb	r2, [r7, #13]
 8009cce:	4908      	ldr	r1, [pc, #32]	; (8009cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8009cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	0800a468 	.word	0x0800a468
 8009cf0:	0800a470 	.word	0x0800a470

08009cf4 <arm_biquad_cascade_df2T_f32>:
void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8009cf4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8009cf8:	b082      	sub	sp, #8
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8009cfa:	f890 c000 	ldrb.w	ip, [r0]
     pCoeffs += 5U;

#if defined (ARM_MATH_LOOPUNROLL)

     /* Loop unrolling: Compute 16 outputs at a time */
     sample = blockSize >> 4U;
 8009cfe:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8009d02:	6885      	ldr	r5, [r0, #8]
 8009d04:	3514      	adds	r5, #20
 8009d06:	6846      	ldr	r6, [r0, #4]
 8009d08:	3608      	adds	r6, #8
 8009d0a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009d0e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009d12:	9001      	str	r0, [sp, #4]
        /* decrement loop counter */
        sample--;
      }

      /* Loop unrolling: Compute remaining outputs */
      sample = blockSize & 0xFU;
 8009d14:	f003 090f 	and.w	r9, r3, #15
 8009d18:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009d1c:	e18d      	b.n	800a03a <arm_biquad_cascade_df2T_f32+0x346>
       Xn1 = *pIn++;
 8009d1e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
       acc1 = b0 * Xn1 + d1;
 8009d22:	ee25 5a83 	vmul.f32	s10, s11, s6
 8009d26:	ee35 5a23 	vadd.f32	s10, s10, s7
       d1 = b1 * Xn1 + d2;
 8009d2a:	ee66 4a03 	vmul.f32	s9, s12, s6
 8009d2e:	ee34 4a84 	vadd.f32	s8, s9, s8
       d1 += a1 * acc1;
 8009d32:	ee66 4a85 	vmul.f32	s9, s13, s10
 8009d36:	ee34 4a84 	vadd.f32	s8, s9, s8
       d2 = b2 * Xn1;
 8009d3a:	ee27 3a03 	vmul.f32	s6, s14, s6
       *pOut++ = acc1;
 8009d3e:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
         Xn1 = *pIn++;
 8009d42:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
        acc1 = b0 * Xn1 + d1;
 8009d46:	ee65 4aa3 	vmul.f32	s9, s11, s7
 8009d4a:	ee74 4a84 	vadd.f32	s9, s9, s8
       d2 += a2 * acc1;
 8009d4e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009d52:	ee35 5a03 	vadd.f32	s10, s10, s6
        d1 = b1 * Xn1 + d2;
 8009d56:	ee26 4a23 	vmul.f32	s8, s12, s7
 8009d5a:	ee35 5a04 	vadd.f32	s10, s10, s8
        d1 += a1 * acc1;
 8009d5e:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009d62:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009d66:	ee67 3a23 	vmul.f32	s7, s14, s7
        *pOut++ = acc1;
 8009d6a:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
         Xn1 = *pIn++;
 8009d6e:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
        acc1 = b0 * Xn1 + d1;
 8009d72:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009d76:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009d7a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009d7e:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009d82:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009d86:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009d8a:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009d8e:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009d92:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009d96:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
         Xn1 = *pIn++;
 8009d9a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
        acc1 = b0 * Xn1 + d1;
 8009d9e:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009da2:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009da6:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009daa:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009dae:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009db2:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009db6:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009dba:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009dbe:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009dc2:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
         Xn1 = *pIn++;
 8009dc6:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
        acc1 = b0 * Xn1 + d1;
 8009dca:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009dce:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009dd2:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009dd6:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009dda:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009dde:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009de2:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009de6:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009dea:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009dee:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
         Xn1 = *pIn++;
 8009df2:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
        acc1 = b0 * Xn1 + d1;
 8009df6:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009dfa:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009dfe:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009e02:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009e06:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009e0a:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009e0e:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009e12:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009e16:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009e1a:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
         Xn1 = *pIn++;
 8009e1e:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
        acc1 = b0 * Xn1 + d1;
 8009e22:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009e26:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009e2a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009e2e:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009e32:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009e36:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009e3a:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009e3e:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009e42:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009e46:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
         Xn1 = *pIn++;
 8009e4a:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
        acc1 = b0 * Xn1 + d1;
 8009e4e:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009e52:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009e56:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009e5a:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009e5e:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009e62:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009e66:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009e6a:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009e6e:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009e72:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
         Xn1 = *pIn++;
 8009e76:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
        acc1 = b0 * Xn1 + d1;
 8009e7a:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009e7e:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009e82:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009e86:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009e8a:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009e8e:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009e92:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009e96:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009e9a:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009e9e:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
         Xn1 = *pIn++;
 8009ea2:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
        acc1 = b0 * Xn1 + d1;
 8009ea6:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009eaa:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009eae:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009eb2:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009eb6:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009eba:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009ebe:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009ec2:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009ec6:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009eca:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
         Xn1 = *pIn++;
 8009ece:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
        acc1 = b0 * Xn1 + d1;
 8009ed2:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009ed6:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009eda:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009ede:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009ee2:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009ee6:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009eea:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009eee:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009ef2:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009ef6:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
         Xn1 = *pIn++;
 8009efa:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
        acc1 = b0 * Xn1 + d1;
 8009efe:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009f02:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009f06:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009f0a:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009f0e:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009f12:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009f16:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009f1a:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009f1e:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009f22:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
         Xn1 = *pIn++;
 8009f26:	ed10 4a04 	vldr	s8, [r0, #-16]
        acc1 = b0 * Xn1 + d1;
 8009f2a:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009f2e:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009f32:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009f36:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009f3a:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009f3e:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009f42:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009f46:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009f4a:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009f4e:	ed03 5a04 	vstr	s10, [r3, #-16]
         Xn1 = *pIn++;
 8009f52:	ed10 4a03 	vldr	s8, [r0, #-12]
        acc1 = b0 * Xn1 + d1;
 8009f56:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009f5a:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009f5e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009f62:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009f66:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009f6a:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009f6e:	ee26 3aa4 	vmul.f32	s6, s13, s9
 8009f72:	ee33 3a05 	vadd.f32	s6, s6, s10
        d2 = b2 * Xn1;
 8009f76:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009f7a:	ed43 4a03 	vstr	s9, [r3, #-12]
         Xn1 = *pIn++;
 8009f7e:	ed10 4a02 	vldr	s8, [r0, #-8]
        acc1 = b0 * Xn1 + d1;
 8009f82:	ee25 5a84 	vmul.f32	s10, s11, s8
 8009f86:	ee35 5a03 	vadd.f32	s10, s10, s6
        d2 += a2 * acc1;
 8009f8a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8009f8e:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 = b1 * Xn1 + d2;
 8009f92:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009f96:	ee74 4aa3 	vadd.f32	s9, s9, s7
        d1 += a1 * acc1;
 8009f9a:	ee26 3a85 	vmul.f32	s6, s13, s10
 8009f9e:	ee33 3a24 	vadd.f32	s6, s6, s9
        d2 = b2 * Xn1;
 8009fa2:	ee67 3a04 	vmul.f32	s7, s14, s8
        *pOut++ = acc1;
 8009fa6:	ed03 5a02 	vstr	s10, [r3, #-8]
         Xn1 = *pIn++;
 8009faa:	ed10 4a01 	vldr	s8, [r0, #-4]
        acc1 = b0 * Xn1 + d1;
 8009fae:	ee65 4a84 	vmul.f32	s9, s11, s8
 8009fb2:	ee74 4a83 	vadd.f32	s9, s9, s6
        d2 += a2 * acc1;
 8009fb6:	ee27 5a85 	vmul.f32	s10, s15, s10
 8009fba:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 = b1 * Xn1 + d2;
 8009fbe:	ee66 3a04 	vmul.f32	s7, s12, s8
 8009fc2:	ee35 5a23 	vadd.f32	s10, s10, s7
        d1 += a1 * acc1;
 8009fc6:	ee66 3aa4 	vmul.f32	s7, s13, s9
 8009fca:	ee73 3a85 	vadd.f32	s7, s7, s10
        d2 = b2 * Xn1;
 8009fce:	ee27 5a04 	vmul.f32	s10, s14, s8
        d2 += a2 * acc1;
 8009fd2:	ee27 4aa4 	vmul.f32	s8, s15, s9
 8009fd6:	ee34 4a05 	vadd.f32	s8, s8, s10
        *pOut++ = acc1;
 8009fda:	ed43 4a01 	vstr	s9, [r3, #-4]
 8009fde:	3040      	adds	r0, #64	; 0x40
 8009fe0:	3340      	adds	r3, #64	; 0x40
     while (sample > 0U) {
 8009fe2:	3c01      	subs	r4, #1
 8009fe4:	f47f ae9b 	bne.w	8009d1e <arm_biquad_cascade_df2T_f32+0x2a>
 8009fe8:	4459      	add	r1, fp
        *pOut++ = acc1;
 8009fea:	9b01      	ldr	r3, [sp, #4]
      /* Initialize blkCnt with number of samples */
      sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 8009fec:	f1b9 0f00 	cmp.w	r9, #0
 8009ff0:	d019      	beq.n	800a026 <arm_biquad_cascade_df2T_f32+0x332>
 8009ff2:	eb01 000a 	add.w	r0, r1, sl
        Xn1 = *pIn++;
 8009ff6:	ecf1 2a01 	vldmia	r1!, {s5}

        acc1 = b0 * Xn1 + d1;
 8009ffa:	ee25 3aa2 	vmul.f32	s6, s11, s5
 8009ffe:	ee33 3a23 	vadd.f32	s6, s6, s7

        d1 = b1 * Xn1 + d2;
 800a002:	ee66 3a22 	vmul.f32	s7, s12, s5
 800a006:	ee33 4a84 	vadd.f32	s8, s7, s8
        d1 += a1 * acc1;
 800a00a:	ee26 5a83 	vmul.f32	s10, s13, s6
 800a00e:	ee75 3a04 	vadd.f32	s7, s10, s8

        d2 = b2 * Xn1;
 800a012:	ee67 2a22 	vmul.f32	s5, s14, s5
        d2 += a2 * acc1;
 800a016:	ee27 4a83 	vmul.f32	s8, s15, s6
 800a01a:	ee34 4a22 	vadd.f32	s8, s8, s5

        *pOut++ = acc1;
 800a01e:	eca3 3a01 	vstmia	r3!, {s6}
      while (sample > 0U) {
 800a022:	4281      	cmp	r1, r0
 800a024:	d1e7      	bne.n	8009ff6 <arm_biquad_cascade_df2T_f32+0x302>
        /* decrement loop counter */
        sample--;
      }

      /* Store the updated state variables back into the state array */
      pState[0] = d1;
 800a026:	ed4e 3a02 	vstr	s7, [lr, #-8]
      pState[1] = d2;
 800a02a:	ed0e 4a01 	vstr	s8, [lr, #-4]
 800a02e:	3514      	adds	r5, #20
 800a030:	3608      	adds	r6, #8
      pOut = pDst;

      /* decrement loop counter */
      stage--;

   } while (stage > 0U);
 800a032:	f1bc 0c01 	subs.w	ip, ip, #1
 800a036:	d01a      	beq.n	800a06e <arm_biquad_cascade_df2T_f32+0x37a>
      pIn = pDst;
 800a038:	4611      	mov	r1, r2
     b0 = pCoeffs[0];
 800a03a:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
     b1 = pCoeffs[1];
 800a03e:	ed15 6a04 	vldr	s12, [r5, #-16]
     b2 = pCoeffs[2];
 800a042:	ed15 7a03 	vldr	s14, [r5, #-12]
     a1 = pCoeffs[3];
 800a046:	ed55 6a02 	vldr	s13, [r5, #-8]
     a2 = pCoeffs[4];
 800a04a:	ed55 7a01 	vldr	s15, [r5, #-4]
 800a04e:	46b6      	mov	lr, r6
     d1 = pState[0];
 800a050:	ed56 3a02 	vldr	s7, [r6, #-8]
     d2 = pState[1];
 800a054:	ed16 4a01 	vldr	s8, [r6, #-4]
     while (sample > 0U) {
 800a058:	f1b8 0f00 	cmp.w	r8, #0
 800a05c:	d005      	beq.n	800a06a <arm_biquad_cascade_df2T_f32+0x376>
 800a05e:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800a062:	f102 0340 	add.w	r3, r2, #64	; 0x40
     sample = blockSize >> 4U;
 800a066:	4644      	mov	r4, r8
 800a068:	e659      	b.n	8009d1e <arm_biquad_cascade_df2T_f32+0x2a>
     while (sample > 0U) {
 800a06a:	4613      	mov	r3, r2
 800a06c:	e7be      	b.n	8009fec <arm_biquad_cascade_df2T_f32+0x2f8>

}
 800a06e:	b002      	add	sp, #8
 800a070:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0800a074 <arm_biquad_cascade_df2T_init_f32>:
void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	460b      	mov	r3, r1
 800a082:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	7afa      	ldrb	r2, [r7, #11]
 800a088:	701a      	strb	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	461a      	mov	r2, r3
 800a096:	2100      	movs	r1, #0
 800a098:	6838      	ldr	r0, [r7, #0]
 800a09a:	f000 f9b9 	bl	800a410 <memset>

  /* Assign state pointer */
  S->pState = pState;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	605a      	str	r2, [r3, #4]
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <arm_float_to_q15>:
#else
void arm_float_to_q15(
  const float32_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b093      	sub	sp, #76	; 0x4c
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const float32_t *pIn = pSrc;                         /* Source pointer */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	643b      	str	r3, [r7, #64]	; 0x40
#endif /* #ifdef ARM_MATH_ROUNDING */

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	089b      	lsrs	r3, r3, #2
 800a0c0:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 800a0c2:	e0ba      	b.n	800a23a <arm_float_to_q15+0x18e>
    /* C = A * 32768 */

    /* convert from float to Q15 and store result in destination buffer */
#ifdef ARM_MATH_ROUNDING

    in = (*pIn++ * 32768.0f);
 800a0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	643a      	str	r2, [r7, #64]	; 0x40
 800a0ca:	edd3 7a00 	vldr	s15, [r3]
 800a0ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a2c4 <arm_float_to_q15+0x218>
 800a0d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0d6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 800a0da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a0de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	dd02      	ble.n	800a0ee <arm_float_to_q15+0x42>
 800a0e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a0ec:	e001      	b.n	800a0f2 <arm_float_to_q15+0x46>
 800a0ee:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a0f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a0f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0fa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 800a0fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a106:	ee17 3a90 	vmov	r3, s15
 800a10a:	633b      	str	r3, [r7, #48]	; 0x30
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	f303 030f 	ssat	r3, #16, r3
 800a112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	1c9a      	adds	r2, r3, #2
 800a11a:	60ba      	str	r2, [r7, #8]
 800a11c:	b20a      	sxth	r2, r1
 800a11e:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 800a120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a122:	1d1a      	adds	r2, r3, #4
 800a124:	643a      	str	r2, [r7, #64]	; 0x40
 800a126:	edd3 7a00 	vldr	s15, [r3]
 800a12a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a2c4 <arm_float_to_q15+0x218>
 800a12e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a132:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 800a136:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a142:	dd02      	ble.n	800a14a <arm_float_to_q15+0x9e>
 800a144:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a148:	e001      	b.n	800a14e <arm_float_to_q15+0xa2>
 800a14a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a14e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a152:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a156:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 800a15a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a15e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a162:	ee17 3a90 	vmov	r3, s15
 800a166:	62bb      	str	r3, [r7, #40]	; 0x28
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	f303 030f 	ssat	r3, #16, r3
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	1c9a      	adds	r2, r3, #2
 800a176:	60ba      	str	r2, [r7, #8]
 800a178:	b20a      	sxth	r2, r1
 800a17a:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 800a17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	643a      	str	r2, [r7, #64]	; 0x40
 800a182:	edd3 7a00 	vldr	s15, [r3]
 800a186:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800a2c4 <arm_float_to_q15+0x218>
 800a18a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a18e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 800a192:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	dd02      	ble.n	800a1a6 <arm_float_to_q15+0xfa>
 800a1a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a1a4:	e001      	b.n	800a1aa <arm_float_to_q15+0xfe>
 800a1a6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a1aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 800a1b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a1ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1be:	ee17 3a90 	vmov	r3, s15
 800a1c2:	623b      	str	r3, [r7, #32]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	f303 030f 	ssat	r3, #16, r3
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	69f9      	ldr	r1, [r7, #28]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	1c9a      	adds	r2, r3, #2
 800a1d2:	60ba      	str	r2, [r7, #8]
 800a1d4:	b20a      	sxth	r2, r1
 800a1d6:	801a      	strh	r2, [r3, #0]

    in = (*pIn++ * 32768.0f);
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	643a      	str	r2, [r7, #64]	; 0x40
 800a1de:	edd3 7a00 	vldr	s15, [r3]
 800a1e2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a2c4 <arm_float_to_q15+0x218>
 800a1e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 800a1ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a1f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fa:	dd02      	ble.n	800a202 <arm_float_to_q15+0x156>
 800a1fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a200:	e001      	b.n	800a206 <arm_float_to_q15+0x15a>
 800a202:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a206:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a20a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a20e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 800a212:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a21a:	ee17 3a90 	vmov	r3, s15
 800a21e:	61bb      	str	r3, [r7, #24]
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	f303 030f 	ssat	r3, #16, r3
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	6979      	ldr	r1, [r7, #20]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	1c9a      	adds	r2, r3, #2
 800a22e:	60ba      	str	r2, [r7, #8]
 800a230:	b20a      	sxth	r2, r1
 800a232:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);

#endif /* #ifdef ARM_MATH_ROUNDING */

    /* Decrement loop counter */
    blkCnt--;
 800a234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a236:	3b01      	subs	r3, #1
 800a238:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800a23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f47f af41 	bne.w	800a0c4 <arm_float_to_q15+0x18>
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a24a:	e030      	b.n	800a2ae <arm_float_to_q15+0x202>
    /* C = A * 32768 */

    /* convert from float to Q15 and store result in destination buffer */
#ifdef ARM_MATH_ROUNDING

    in = (*pIn++ * 32768.0f);
 800a24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24e:	1d1a      	adds	r2, r3, #4
 800a250:	643a      	str	r2, [r7, #64]	; 0x40
 800a252:	edd3 7a00 	vldr	s15, [r3]
 800a256:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800a2c4 <arm_float_to_q15+0x218>
 800a25a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a25e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    in += in > 0.0f ? 0.5f : -0.5f;
 800a262:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26e:	dd02      	ble.n	800a276 <arm_float_to_q15+0x1ca>
 800a270:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a274:	e001      	b.n	800a27a <arm_float_to_q15+0x1ce>
 800a276:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a27a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a282:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 800a286:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a28a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a28e:	ee17 3a90 	vmov	r3, s15
 800a292:	63bb      	str	r3, [r7, #56]	; 0x38
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	f303 030f 	ssat	r3, #16, r3
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34
 800a29c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	1c9a      	adds	r2, r3, #2
 800a2a2:	60ba      	str	r2, [r7, #8]
 800a2a4:	b20a      	sxth	r2, r1
 800a2a6:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);

#endif /* #ifdef ARM_MATH_ROUNDING */

    /* Decrement loop counter */
    blkCnt--;
 800a2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1cb      	bne.n	800a24c <arm_float_to_q15+0x1a0>
  }

}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	374c      	adds	r7, #76	; 0x4c
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	47000000 	.word	0x47000000

0800a2c8 <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	613b      	str	r3, [r7, #16]

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	089b      	lsrs	r3, r3, #2
 800a2dc:	617b      	str	r3, [r7, #20]

  while (blkCnt > 0U)
 800a2de:	e04a      	b.n	800a376 <arm_q15_to_float+0xae>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 32768.0f);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	613a      	str	r2, [r7, #16]
 800a2e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	1d1a      	adds	r2, r3, #4
 800a2f6:	60ba      	str	r2, [r7, #8]
 800a2f8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a3c4 <arm_q15_to_float+0xfc>
 800a2fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a300:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 32768.0f);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1c9a      	adds	r2, r3, #2
 800a308:	613a      	str	r2, [r7, #16]
 800a30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	1d1a      	adds	r2, r3, #4
 800a31a:	60ba      	str	r2, [r7, #8]
 800a31c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a3c4 <arm_q15_to_float+0xfc>
 800a320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a324:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 32768.0f);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	1c9a      	adds	r2, r3, #2
 800a32c:	613a      	str	r2, [r7, #16]
 800a32e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	60ba      	str	r2, [r7, #8]
 800a340:	eddf 6a20 	vldr	s13, [pc, #128]	; 800a3c4 <arm_q15_to_float+0xfc>
 800a344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a348:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 32768.0f);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	1c9a      	adds	r2, r3, #2
 800a350:	613a      	str	r2, [r7, #16]
 800a352:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	60ba      	str	r2, [r7, #8]
 800a364:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a3c4 <arm_q15_to_float+0xfc>
 800a368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a36c:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3b01      	subs	r3, #1
 800a374:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1b1      	bne.n	800a2e0 <arm_q15_to_float+0x18>
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	617b      	str	r3, [r7, #20]
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a384:	e014      	b.n	800a3b0 <arm_q15_to_float+0xe8>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1c9a      	adds	r2, r3, #2
 800a38a:	613a      	str	r2, [r7, #16]
 800a38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	60ba      	str	r2, [r7, #8]
 800a39e:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a3c4 <arm_q15_to_float+0xfc>
 800a3a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3a6:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e7      	bne.n	800a386 <arm_q15_to_float+0xbe>
  }

}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	371c      	adds	r7, #28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	47000000 	.word	0x47000000

0800a3c8 <__libc_init_array>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4d0d      	ldr	r5, [pc, #52]	; (800a400 <__libc_init_array+0x38>)
 800a3cc:	4c0d      	ldr	r4, [pc, #52]	; (800a404 <__libc_init_array+0x3c>)
 800a3ce:	1b64      	subs	r4, r4, r5
 800a3d0:	10a4      	asrs	r4, r4, #2
 800a3d2:	2600      	movs	r6, #0
 800a3d4:	42a6      	cmp	r6, r4
 800a3d6:	d109      	bne.n	800a3ec <__libc_init_array+0x24>
 800a3d8:	4d0b      	ldr	r5, [pc, #44]	; (800a408 <__libc_init_array+0x40>)
 800a3da:	4c0c      	ldr	r4, [pc, #48]	; (800a40c <__libc_init_array+0x44>)
 800a3dc:	f000 f820 	bl	800a420 <_init>
 800a3e0:	1b64      	subs	r4, r4, r5
 800a3e2:	10a4      	asrs	r4, r4, #2
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	42a6      	cmp	r6, r4
 800a3e8:	d105      	bne.n	800a3f6 <__libc_init_array+0x2e>
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}
 800a3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f0:	4798      	blx	r3
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7ee      	b.n	800a3d4 <__libc_init_array+0xc>
 800a3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3fa:	4798      	blx	r3
 800a3fc:	3601      	adds	r6, #1
 800a3fe:	e7f2      	b.n	800a3e6 <__libc_init_array+0x1e>
 800a400:	0800a480 	.word	0x0800a480
 800a404:	0800a480 	.word	0x0800a480
 800a408:	0800a480 	.word	0x0800a480
 800a40c:	0800a484 	.word	0x0800a484

0800a410 <memset>:
 800a410:	4402      	add	r2, r0
 800a412:	4603      	mov	r3, r0
 800a414:	4293      	cmp	r3, r2
 800a416:	d100      	bne.n	800a41a <memset+0xa>
 800a418:	4770      	bx	lr
 800a41a:	f803 1b01 	strb.w	r1, [r3], #1
 800a41e:	e7f9      	b.n	800a414 <memset+0x4>

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
