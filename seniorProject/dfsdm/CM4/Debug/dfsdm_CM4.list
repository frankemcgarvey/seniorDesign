
dfsdm_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08107420  08107420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107460  08107460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107468  08107468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810746c  0810746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  08107470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  10000010  08107480  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000140  08107480  00020140  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001727a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028fe  00000000  00000000  000372ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bb0  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000af8  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038be3  00000000  00000000  0003b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ff45  00000000  00000000  00073e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178794  00000000  00000000  00083d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fc51c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fa4  00000000  00000000  001fc570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107408 	.word	0x08107408

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08107408 	.word	0x08107408

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96e 	b.w	81005cc <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468c      	mov	ip, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	f040 8083 	bne.w	810041e <__udivmoddi4+0x116>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d947      	bls.n	81003ae <__udivmoddi4+0xa6>
 810031e:	fab2 f282 	clz	r2, r2
 8100322:	b142      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100324:	f1c2 0020 	rsb	r0, r2, #32
 8100328:	fa24 f000 	lsr.w	r0, r4, r0
 810032c:	4091      	lsls	r1, r2
 810032e:	4097      	lsls	r7, r2
 8100330:	ea40 0c01 	orr.w	ip, r0, r1
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbbc f6f8 	udiv	r6, ip, r8
 8100340:	fa1f fe87 	uxth.w	lr, r7
 8100344:	fb08 c116 	mls	r1, r8, r6, ip
 8100348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034c:	fb06 f10e 	mul.w	r1, r6, lr
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18fb      	adds	r3, r7, r3
 8100356:	f106 30ff 	add.w	r0, r6, #4294967295
 810035a:	f080 8119 	bcs.w	8100590 <__udivmoddi4+0x288>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8116 	bls.w	8100590 <__udivmoddi4+0x288>
 8100364:	3e02      	subs	r6, #2
 8100366:	443b      	add	r3, r7
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100370:	fb08 3310 	mls	r3, r8, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fe0e 	mul.w	lr, r0, lr
 810037c:	45a6      	cmp	lr, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	193c      	adds	r4, r7, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8105 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810038a:	45a6      	cmp	lr, r4
 810038c:	f240 8102 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100390:	3802      	subs	r0, #2
 8100392:	443c      	add	r4, r7
 8100394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100398:	eba4 040e 	sub.w	r4, r4, lr
 810039c:	2600      	movs	r6, #0
 810039e:	b11d      	cbz	r5, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c5 4300 	strd	r4, r3, [r5]
 81003a8:	4631      	mov	r1, r6
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	b902      	cbnz	r2, 81003b2 <__udivmoddi4+0xaa>
 81003b0:	deff      	udf	#255	; 0xff
 81003b2:	fab2 f282 	clz	r2, r2
 81003b6:	2a00      	cmp	r2, #0
 81003b8:	d150      	bne.n	810045c <__udivmoddi4+0x154>
 81003ba:	1bcb      	subs	r3, r1, r7
 81003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003c0:	fa1f f887 	uxth.w	r8, r7
 81003c4:	2601      	movs	r6, #1
 81003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 81003ca:	0c21      	lsrs	r1, r4, #16
 81003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 81003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003d4:	fb08 f30c 	mul.w	r3, r8, ip
 81003d8:	428b      	cmp	r3, r1
 81003da:	d907      	bls.n	81003ec <__udivmoddi4+0xe4>
 81003dc:	1879      	adds	r1, r7, r1
 81003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003e2:	d202      	bcs.n	81003ea <__udivmoddi4+0xe2>
 81003e4:	428b      	cmp	r3, r1
 81003e6:	f200 80e9 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 81003ea:	4684      	mov	ip, r0
 81003ec:	1ac9      	subs	r1, r1, r3
 81003ee:	b2a3      	uxth	r3, r4
 81003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 81003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 81003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81003fc:	fb08 f800 	mul.w	r8, r8, r0
 8100400:	45a0      	cmp	r8, r4
 8100402:	d907      	bls.n	8100414 <__udivmoddi4+0x10c>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 33ff 	add.w	r3, r0, #4294967295
 810040a:	d202      	bcs.n	8100412 <__udivmoddi4+0x10a>
 810040c:	45a0      	cmp	r8, r4
 810040e:	f200 80d9 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 8100412:	4618      	mov	r0, r3
 8100414:	eba4 0408 	sub.w	r4, r4, r8
 8100418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810041c:	e7bf      	b.n	810039e <__udivmoddi4+0x96>
 810041e:	428b      	cmp	r3, r1
 8100420:	d909      	bls.n	8100436 <__udivmoddi4+0x12e>
 8100422:	2d00      	cmp	r5, #0
 8100424:	f000 80b1 	beq.w	810058a <__udivmoddi4+0x282>
 8100428:	2600      	movs	r6, #0
 810042a:	e9c5 0100 	strd	r0, r1, [r5]
 810042e:	4630      	mov	r0, r6
 8100430:	4631      	mov	r1, r6
 8100432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100436:	fab3 f683 	clz	r6, r3
 810043a:	2e00      	cmp	r6, #0
 810043c:	d14a      	bne.n	81004d4 <__udivmoddi4+0x1cc>
 810043e:	428b      	cmp	r3, r1
 8100440:	d302      	bcc.n	8100448 <__udivmoddi4+0x140>
 8100442:	4282      	cmp	r2, r0
 8100444:	f200 80b8 	bhi.w	81005b8 <__udivmoddi4+0x2b0>
 8100448:	1a84      	subs	r4, r0, r2
 810044a:	eb61 0103 	sbc.w	r1, r1, r3
 810044e:	2001      	movs	r0, #1
 8100450:	468c      	mov	ip, r1
 8100452:	2d00      	cmp	r5, #0
 8100454:	d0a8      	beq.n	81003a8 <__udivmoddi4+0xa0>
 8100456:	e9c5 4c00 	strd	r4, ip, [r5]
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0xa0>
 810045c:	f1c2 0320 	rsb	r3, r2, #32
 8100460:	fa20 f603 	lsr.w	r6, r0, r3
 8100464:	4097      	lsls	r7, r2
 8100466:	fa01 f002 	lsl.w	r0, r1, r2
 810046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810046e:	40d9      	lsrs	r1, r3
 8100470:	4330      	orrs	r0, r6
 8100472:	0c03      	lsrs	r3, r0, #16
 8100474:	fbb1 f6fe 	udiv	r6, r1, lr
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100484:	fb06 f108 	mul.w	r1, r6, r8
 8100488:	4299      	cmp	r1, r3
 810048a:	fa04 f402 	lsl.w	r4, r4, r2
 810048e:	d909      	bls.n	81004a4 <__udivmoddi4+0x19c>
 8100490:	18fb      	adds	r3, r7, r3
 8100492:	f106 3cff 	add.w	ip, r6, #4294967295
 8100496:	f080 808d 	bcs.w	81005b4 <__udivmoddi4+0x2ac>
 810049a:	4299      	cmp	r1, r3
 810049c:	f240 808a 	bls.w	81005b4 <__udivmoddi4+0x2ac>
 81004a0:	3e02      	subs	r6, #2
 81004a2:	443b      	add	r3, r7
 81004a4:	1a5b      	subs	r3, r3, r1
 81004a6:	b281      	uxth	r1, r0
 81004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 81004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 81004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004b4:	fb00 f308 	mul.w	r3, r0, r8
 81004b8:	428b      	cmp	r3, r1
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x1c4>
 81004bc:	1879      	adds	r1, r7, r1
 81004be:	f100 3cff 	add.w	ip, r0, #4294967295
 81004c2:	d273      	bcs.n	81005ac <__udivmoddi4+0x2a4>
 81004c4:	428b      	cmp	r3, r1
 81004c6:	d971      	bls.n	81005ac <__udivmoddi4+0x2a4>
 81004c8:	3802      	subs	r0, #2
 81004ca:	4439      	add	r1, r7
 81004cc:	1acb      	subs	r3, r1, r3
 81004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004d2:	e778      	b.n	81003c6 <__udivmoddi4+0xbe>
 81004d4:	f1c6 0c20 	rsb	ip, r6, #32
 81004d8:	fa03 f406 	lsl.w	r4, r3, r6
 81004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 81004e0:	431c      	orrs	r4, r3
 81004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 81004e6:	fa01 f306 	lsl.w	r3, r1, r6
 81004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 81004f2:	431f      	orrs	r7, r3
 81004f4:	0c3b      	lsrs	r3, r7, #16
 81004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81004fa:	fa1f f884 	uxth.w	r8, r4
 81004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8100502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100506:	fb09 fa08 	mul.w	sl, r9, r8
 810050a:	458a      	cmp	sl, r1
 810050c:	fa02 f206 	lsl.w	r2, r2, r6
 8100510:	fa00 f306 	lsl.w	r3, r0, r6
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x220>
 8100516:	1861      	adds	r1, r4, r1
 8100518:	f109 30ff 	add.w	r0, r9, #4294967295
 810051c:	d248      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 810051e:	458a      	cmp	sl, r1
 8100520:	d946      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100522:	f1a9 0902 	sub.w	r9, r9, #2
 8100526:	4421      	add	r1, r4
 8100528:	eba1 010a 	sub.w	r1, r1, sl
 810052c:	b2bf      	uxth	r7, r7
 810052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100532:	fb0e 1110 	mls	r1, lr, r0, r1
 8100536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810053a:	fb00 f808 	mul.w	r8, r0, r8
 810053e:	45b8      	cmp	r8, r7
 8100540:	d907      	bls.n	8100552 <__udivmoddi4+0x24a>
 8100542:	19e7      	adds	r7, r4, r7
 8100544:	f100 31ff 	add.w	r1, r0, #4294967295
 8100548:	d22e      	bcs.n	81005a8 <__udivmoddi4+0x2a0>
 810054a:	45b8      	cmp	r8, r7
 810054c:	d92c      	bls.n	81005a8 <__udivmoddi4+0x2a0>
 810054e:	3802      	subs	r0, #2
 8100550:	4427      	add	r7, r4
 8100552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100556:	eba7 0708 	sub.w	r7, r7, r8
 810055a:	fba0 8902 	umull	r8, r9, r0, r2
 810055e:	454f      	cmp	r7, r9
 8100560:	46c6      	mov	lr, r8
 8100562:	4649      	mov	r1, r9
 8100564:	d31a      	bcc.n	810059c <__udivmoddi4+0x294>
 8100566:	d017      	beq.n	8100598 <__udivmoddi4+0x290>
 8100568:	b15d      	cbz	r5, 8100582 <__udivmoddi4+0x27a>
 810056a:	ebb3 020e 	subs.w	r2, r3, lr
 810056e:	eb67 0701 	sbc.w	r7, r7, r1
 8100572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100576:	40f2      	lsrs	r2, r6
 8100578:	ea4c 0202 	orr.w	r2, ip, r2
 810057c:	40f7      	lsrs	r7, r6
 810057e:	e9c5 2700 	strd	r2, r7, [r5]
 8100582:	2600      	movs	r6, #0
 8100584:	4631      	mov	r1, r6
 8100586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810058a:	462e      	mov	r6, r5
 810058c:	4628      	mov	r0, r5
 810058e:	e70b      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100590:	4606      	mov	r6, r0
 8100592:	e6e9      	b.n	8100368 <__udivmoddi4+0x60>
 8100594:	4618      	mov	r0, r3
 8100596:	e6fd      	b.n	8100394 <__udivmoddi4+0x8c>
 8100598:	4543      	cmp	r3, r8
 810059a:	d2e5      	bcs.n	8100568 <__udivmoddi4+0x260>
 810059c:	ebb8 0e02 	subs.w	lr, r8, r2
 81005a0:	eb69 0104 	sbc.w	r1, r9, r4
 81005a4:	3801      	subs	r0, #1
 81005a6:	e7df      	b.n	8100568 <__udivmoddi4+0x260>
 81005a8:	4608      	mov	r0, r1
 81005aa:	e7d2      	b.n	8100552 <__udivmoddi4+0x24a>
 81005ac:	4660      	mov	r0, ip
 81005ae:	e78d      	b.n	81004cc <__udivmoddi4+0x1c4>
 81005b0:	4681      	mov	r9, r0
 81005b2:	e7b9      	b.n	8100528 <__udivmoddi4+0x220>
 81005b4:	4666      	mov	r6, ip
 81005b6:	e775      	b.n	81004a4 <__udivmoddi4+0x19c>
 81005b8:	4630      	mov	r0, r6
 81005ba:	e74a      	b.n	8100452 <__udivmoddi4+0x14a>
 81005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c0:	4439      	add	r1, r7
 81005c2:	e713      	b.n	81003ec <__udivmoddi4+0xe4>
 81005c4:	3802      	subs	r0, #2
 81005c6:	443c      	add	r4, r7
 81005c8:	e724      	b.n	8100414 <__udivmoddi4+0x10c>
 81005ca:	bf00      	nop

081005cc <__aeabi_idiv0>:
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop

081005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d4:	4b0b      	ldr	r3, [pc, #44]	; (8100604 <SystemInit+0x34>)
 81005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005da:	4a0a      	ldr	r2, [pc, #40]	; (8100604 <SystemInit+0x34>)
 81005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e4:	4b07      	ldr	r3, [pc, #28]	; (8100604 <SystemInit+0x34>)
 81005e6:	691b      	ldr	r3, [r3, #16]
 81005e8:	4a06      	ldr	r2, [pc, #24]	; (8100604 <SystemInit+0x34>)
 81005ea:	f043 0310 	orr.w	r3, r3, #16
 81005ee:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f0:	4b04      	ldr	r3, [pc, #16]	; (8100604 <SystemInit+0x34>)
 81005f2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005f6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	e000ed00 	.word	0xe000ed00

08100608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810060e:	4b2c      	ldr	r3, [pc, #176]	; (81006c0 <main+0xb8>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100614:	4a2a      	ldr	r2, [pc, #168]	; (81006c0 <main+0xb8>)
 8100616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810061e:	4b28      	ldr	r3, [pc, #160]	; (81006c0 <main+0xb8>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810062c:	2001      	movs	r0, #1
 810062e:	f003 fc53 	bl	8103ed8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100632:	f003 fcdd 	bl	8103ff0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100636:	2201      	movs	r2, #1
 8100638:	2102      	movs	r1, #2
 810063a:	2000      	movs	r0, #0
 810063c:	f003 fc5e 	bl	8103efc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100640:	4b20      	ldr	r3, [pc, #128]	; (81006c4 <main+0xbc>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	091b      	lsrs	r3, r3, #4
 8100646:	f003 030f 	and.w	r3, r3, #15
 810064a:	2b07      	cmp	r3, #7
 810064c:	d108      	bne.n	8100660 <main+0x58>
 810064e:	4b1e      	ldr	r3, [pc, #120]	; (81006c8 <main+0xc0>)
 8100650:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100654:	4a1c      	ldr	r2, [pc, #112]	; (81006c8 <main+0xc0>)
 8100656:	f043 0301 	orr.w	r3, r3, #1
 810065a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810065e:	e007      	b.n	8100670 <main+0x68>
 8100660:	4b19      	ldr	r3, [pc, #100]	; (81006c8 <main+0xc0>)
 8100662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100666:	4a18      	ldr	r2, [pc, #96]	; (81006c8 <main+0xc0>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100670:	f000 fa58 	bl	8100b24 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100674:	f000 f8b0 	bl	81007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8100678:	f000 f87e 	bl	8100778 <MX_DMA_Init>
  MX_USART3_UART_Init();
 810067c:	f000 f82e 	bl	81006dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  pcmIndex = 0;
 8100680:	4b12      	ldr	r3, [pc, #72]	; (81006cc <main+0xc4>)
 8100682:	2200      	movs	r2, #0
 8100684:	601a      	str	r2, [r3, #0]

  swiFlag = NONE;
 8100686:	4b12      	ldr	r3, [pc, #72]	; (81006d0 <main+0xc8>)
 8100688:	2200      	movs	r2, #0
 810068a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(swiFlag == READY){
 810068c:	4b10      	ldr	r3, [pc, #64]	; (81006d0 <main+0xc8>)
 810068e:	781b      	ldrb	r3, [r3, #0]
 8100690:	b2db      	uxtb	r3, r3
 8100692:	2b03      	cmp	r3, #3
 8100694:	d1fa      	bne.n	810068c <main+0x84>

		swiFlag = NONE;
 8100696:	4b0e      	ldr	r3, [pc, #56]	; (81006d0 <main+0xc8>)
 8100698:	2200      	movs	r2, #0
 810069a:	701a      	strb	r2, [r3, #0]
		while(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&pcmBuffer->pcmBuffer_q15[pcmIndex*CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE) != HAL_OK){}
 810069c:	bf00      	nop
 810069e:	4a0d      	ldr	r2, [pc, #52]	; (81006d4 <main+0xcc>)
 81006a0:	4b0a      	ldr	r3, [pc, #40]	; (81006cc <main+0xc4>)
 81006a2:	681b      	ldr	r3, [r3, #0]
 81006a4:	009b      	lsls	r3, r3, #2
 81006a6:	3328      	adds	r3, #40	; 0x28
 81006a8:	02db      	lsls	r3, r3, #11
 81006aa:	4413      	add	r3, r2
 81006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81006b0:	4619      	mov	r1, r3
 81006b2:	4809      	ldr	r0, [pc, #36]	; (81006d8 <main+0xd0>)
 81006b4:	f005 fa34 	bl	8105b20 <HAL_UART_Transmit_DMA>
 81006b8:	4603      	mov	r3, r0
 81006ba:	2b00      	cmp	r3, #0
 81006bc:	d1ef      	bne.n	810069e <main+0x96>
	if(swiFlag == READY){
 81006be:	e7e5      	b.n	810068c <main+0x84>
 81006c0:	58024400 	.word	0x58024400
 81006c4:	e000ed00 	.word	0xe000ed00
 81006c8:	58026400 	.word	0x58026400
 81006cc:	1000002c 	.word	0x1000002c
 81006d0:	10000030 	.word	0x10000030
 81006d4:	30020000 	.word	0x30020000
 81006d8:	10000034 	.word	0x10000034

081006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81006dc:	b580      	push	{r7, lr}
 81006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81006e0:	4b22      	ldr	r3, [pc, #136]	; (810076c <MX_USART3_UART_Init+0x90>)
 81006e2:	4a23      	ldr	r2, [pc, #140]	; (8100770 <MX_USART3_UART_Init+0x94>)
 81006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 7000000;
 81006e6:	4b21      	ldr	r3, [pc, #132]	; (810076c <MX_USART3_UART_Init+0x90>)
 81006e8:	4a22      	ldr	r2, [pc, #136]	; (8100774 <MX_USART3_UART_Init+0x98>)
 81006ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81006ec:	4b1f      	ldr	r3, [pc, #124]	; (810076c <MX_USART3_UART_Init+0x90>)
 81006ee:	2200      	movs	r2, #0
 81006f0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81006f2:	4b1e      	ldr	r3, [pc, #120]	; (810076c <MX_USART3_UART_Init+0x90>)
 81006f4:	2200      	movs	r2, #0
 81006f6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81006f8:	4b1c      	ldr	r3, [pc, #112]	; (810076c <MX_USART3_UART_Init+0x90>)
 81006fa:	2200      	movs	r2, #0
 81006fc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81006fe:	4b1b      	ldr	r3, [pc, #108]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100700:	220c      	movs	r2, #12
 8100702:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100704:	4b19      	ldr	r3, [pc, #100]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100706:	2200      	movs	r2, #0
 8100708:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810070a:	4b18      	ldr	r3, [pc, #96]	; (810076c <MX_USART3_UART_Init+0x90>)
 810070c:	2200      	movs	r2, #0
 810070e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100710:	4b16      	ldr	r3, [pc, #88]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100712:	2200      	movs	r2, #0
 8100714:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100716:	4b15      	ldr	r3, [pc, #84]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100718:	2200      	movs	r2, #0
 810071a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810071c:	4b13      	ldr	r3, [pc, #76]	; (810076c <MX_USART3_UART_Init+0x90>)
 810071e:	2200      	movs	r2, #0
 8100720:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100722:	4812      	ldr	r0, [pc, #72]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100724:	f005 f9ac 	bl	8105a80 <HAL_UART_Init>
 8100728:	4603      	mov	r3, r0
 810072a:	2b00      	cmp	r3, #0
 810072c:	d001      	beq.n	8100732 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 810072e:	f000 f8b7 	bl	81008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100732:	2100      	movs	r1, #0
 8100734:	480d      	ldr	r0, [pc, #52]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100736:	f006 fd71 	bl	810721c <HAL_UARTEx_SetTxFifoThreshold>
 810073a:	4603      	mov	r3, r0
 810073c:	2b00      	cmp	r3, #0
 810073e:	d001      	beq.n	8100744 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8100740:	f000 f8ae 	bl	81008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100744:	2100      	movs	r1, #0
 8100746:	4809      	ldr	r0, [pc, #36]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100748:	f006 fda6 	bl	8107298 <HAL_UARTEx_SetRxFifoThreshold>
 810074c:	4603      	mov	r3, r0
 810074e:	2b00      	cmp	r3, #0
 8100750:	d001      	beq.n	8100756 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8100752:	f000 f8a5 	bl	81008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100756:	4805      	ldr	r0, [pc, #20]	; (810076c <MX_USART3_UART_Init+0x90>)
 8100758:	f006 fd27 	bl	81071aa <HAL_UARTEx_DisableFifoMode>
 810075c:	4603      	mov	r3, r0
 810075e:	2b00      	cmp	r3, #0
 8100760:	d001      	beq.n	8100766 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8100762:	f000 f89d 	bl	81008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100766:	bf00      	nop
 8100768:	bd80      	pop	{r7, pc}
 810076a:	bf00      	nop
 810076c:	10000034 	.word	0x10000034
 8100770:	40004800 	.word	0x40004800
 8100774:	006acfc0 	.word	0x006acfc0

08100778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100778:	b580      	push	{r7, lr}
 810077a:	b082      	sub	sp, #8
 810077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810077e:	4b15      	ldr	r3, [pc, #84]	; (81007d4 <MX_DMA_Init+0x5c>)
 8100780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100784:	4a13      	ldr	r2, [pc, #76]	; (81007d4 <MX_DMA_Init+0x5c>)
 8100786:	f043 0301 	orr.w	r3, r3, #1
 810078a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810078e:	4b11      	ldr	r3, [pc, #68]	; (81007d4 <MX_DMA_Init+0x5c>)
 8100790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100794:	f003 0301 	and.w	r3, r3, #1
 8100798:	607b      	str	r3, [r7, #4]
 810079a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 810079c:	4b0d      	ldr	r3, [pc, #52]	; (81007d4 <MX_DMA_Init+0x5c>)
 810079e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007a2:	4a0c      	ldr	r2, [pc, #48]	; (81007d4 <MX_DMA_Init+0x5c>)
 81007a4:	f043 0302 	orr.w	r3, r3, #2
 81007a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007ac:	4b09      	ldr	r3, [pc, #36]	; (81007d4 <MX_DMA_Init+0x5c>)
 81007ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007b2:	f003 0302 	and.w	r3, r3, #2
 81007b6:	603b      	str	r3, [r7, #0]
 81007b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 81007ba:	2200      	movs	r2, #0
 81007bc:	2100      	movs	r1, #0
 81007be:	2038      	movs	r0, #56	; 0x38
 81007c0:	f000 fb3f 	bl	8100e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 81007c4:	2038      	movs	r0, #56	; 0x38
 81007c6:	f000 fb56 	bl	8100e76 <HAL_NVIC_EnableIRQ>

}
 81007ca:	bf00      	nop
 81007cc:	3708      	adds	r7, #8
 81007ce:	46bd      	mov	sp, r7
 81007d0:	bd80      	pop	{r7, pc}
 81007d2:	bf00      	nop
 81007d4:	58024400 	.word	0x58024400

081007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81007d8:	b580      	push	{r7, lr}
 81007da:	b088      	sub	sp, #32
 81007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81007de:	f107 030c 	add.w	r3, r7, #12
 81007e2:	2200      	movs	r2, #0
 81007e4:	601a      	str	r2, [r3, #0]
 81007e6:	605a      	str	r2, [r3, #4]
 81007e8:	609a      	str	r2, [r3, #8]
 81007ea:	60da      	str	r2, [r3, #12]
 81007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81007ee:	4b1b      	ldr	r3, [pc, #108]	; (810085c <MX_GPIO_Init+0x84>)
 81007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007f4:	4a19      	ldr	r2, [pc, #100]	; (810085c <MX_GPIO_Init+0x84>)
 81007f6:	f043 0320 	orr.w	r3, r3, #32
 81007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007fe:	4b17      	ldr	r3, [pc, #92]	; (810085c <MX_GPIO_Init+0x84>)
 8100800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100804:	f003 0320 	and.w	r3, r3, #32
 8100808:	60bb      	str	r3, [r7, #8]
 810080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810080c:	4b13      	ldr	r3, [pc, #76]	; (810085c <MX_GPIO_Init+0x84>)
 810080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100812:	4a12      	ldr	r2, [pc, #72]	; (810085c <MX_GPIO_Init+0x84>)
 8100814:	f043 0308 	orr.w	r3, r3, #8
 8100818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810081c:	4b0f      	ldr	r3, [pc, #60]	; (810085c <MX_GPIO_Init+0x84>)
 810081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100822:	f003 0308 	and.w	r3, r3, #8
 8100826:	607b      	str	r3, [r7, #4]
 8100828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 810082a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 810082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100830:	4b0b      	ldr	r3, [pc, #44]	; (8100860 <MX_GPIO_Init+0x88>)
 8100832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100834:	2302      	movs	r3, #2
 8100836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100838:	f107 030c 	add.w	r3, r7, #12
 810083c:	4619      	mov	r1, r3
 810083e:	4809      	ldr	r0, [pc, #36]	; (8100864 <MX_GPIO_Init+0x8c>)
 8100840:	f003 f980 	bl	8103b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8100844:	2200      	movs	r2, #0
 8100846:	2101      	movs	r1, #1
 8100848:	2017      	movs	r0, #23
 810084a:	f000 fafa 	bl	8100e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 810084e:	2017      	movs	r0, #23
 8100850:	f000 fb11 	bl	8100e76 <HAL_NVIC_EnableIRQ>

}
 8100854:	bf00      	nop
 8100856:	3720      	adds	r7, #32
 8100858:	46bd      	mov	sp, r7
 810085a:	bd80      	pop	{r7, pc}
 810085c:	58024400 	.word	0x58024400
 8100860:	11110000 	.word	0x11110000
 8100864:	58021400 	.word	0x58021400

08100868 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8100868:	b480      	push	{r7}
 810086a:	b083      	sub	sp, #12
 810086c:	af00      	add	r7, sp, #0
 810086e:	4603      	mov	r3, r0
 8100870:	80fb      	strh	r3, [r7, #6]

	swiFlag = READY;
 8100872:	4b09      	ldr	r3, [pc, #36]	; (8100898 <HAL_GPIO_EXTI_Callback+0x30>)
 8100874:	2203      	movs	r2, #3
 8100876:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_7){
 8100878:	88fb      	ldrh	r3, [r7, #6]
 810087a:	2b80      	cmp	r3, #128	; 0x80
 810087c:	d103      	bne.n	8100886 <HAL_GPIO_EXTI_Callback+0x1e>
		pcmIndex = 0;
 810087e:	4b07      	ldr	r3, [pc, #28]	; (810089c <HAL_GPIO_EXTI_Callback+0x34>)
 8100880:	2200      	movs	r2, #0
 8100882:	601a      	str	r2, [r3, #0]
	}
	else{
		pcmIndex = 1;
	}
}
 8100884:	e002      	b.n	810088c <HAL_GPIO_EXTI_Callback+0x24>
		pcmIndex = 1;
 8100886:	4b05      	ldr	r3, [pc, #20]	; (810089c <HAL_GPIO_EXTI_Callback+0x34>)
 8100888:	2201      	movs	r2, #1
 810088a:	601a      	str	r2, [r3, #0]
}
 810088c:	bf00      	nop
 810088e:	370c      	adds	r7, #12
 8100890:	46bd      	mov	sp, r7
 8100892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100896:	4770      	bx	lr
 8100898:	10000030 	.word	0x10000030
 810089c:	1000002c 	.word	0x1000002c

081008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81008a0:	b480      	push	{r7}
 81008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81008a4:	b672      	cpsid	i
}
 81008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81008a8:	e7fe      	b.n	81008a8 <Error_Handler+0x8>
	...

081008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b082      	sub	sp, #8
 81008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81008b2:	4b0d      	ldr	r3, [pc, #52]	; (81008e8 <HAL_MspInit+0x3c>)
 81008b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008b8:	4a0b      	ldr	r2, [pc, #44]	; (81008e8 <HAL_MspInit+0x3c>)
 81008ba:	f043 0302 	orr.w	r3, r3, #2
 81008be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81008c2:	4b09      	ldr	r3, [pc, #36]	; (81008e8 <HAL_MspInit+0x3c>)
 81008c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008c8:	f003 0302 	and.w	r3, r3, #2
 81008cc:	607b      	str	r3, [r7, #4]
 81008ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 81008d0:	2200      	movs	r2, #0
 81008d2:	2100      	movs	r1, #0
 81008d4:	2040      	movs	r0, #64	; 0x40
 81008d6:	f000 fab4 	bl	8100e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 81008da:	2040      	movs	r0, #64	; 0x40
 81008dc:	f000 facb 	bl	8100e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81008e0:	bf00      	nop
 81008e2:	3708      	adds	r7, #8
 81008e4:	46bd      	mov	sp, r7
 81008e6:	bd80      	pop	{r7, pc}
 81008e8:	58024400 	.word	0x58024400

081008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81008ec:	b580      	push	{r7, lr}
 81008ee:	b0b8      	sub	sp, #224	; 0xe0
 81008f0:	af00      	add	r7, sp, #0
 81008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81008f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81008f8:	2200      	movs	r2, #0
 81008fa:	601a      	str	r2, [r3, #0]
 81008fc:	605a      	str	r2, [r3, #4]
 81008fe:	609a      	str	r2, [r3, #8]
 8100900:	60da      	str	r2, [r3, #12]
 8100902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100904:	f107 0310 	add.w	r3, r7, #16
 8100908:	22bc      	movs	r2, #188	; 0xbc
 810090a:	2100      	movs	r1, #0
 810090c:	4618      	mov	r0, r3
 810090e:	f006 fd73 	bl	81073f8 <memset>
  if(huart->Instance==USART3)
 8100912:	687b      	ldr	r3, [r7, #4]
 8100914:	681b      	ldr	r3, [r3, #0]
 8100916:	4a40      	ldr	r2, [pc, #256]	; (8100a18 <HAL_UART_MspInit+0x12c>)
 8100918:	4293      	cmp	r3, r2
 810091a:	d178      	bne.n	8100a0e <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810091c:	2302      	movs	r3, #2
 810091e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100920:	2300      	movs	r3, #0
 8100922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100926:	f107 0310 	add.w	r3, r7, #16
 810092a:	4618      	mov	r0, r3
 810092c:	f003 fd46 	bl	81043bc <HAL_RCCEx_PeriphCLKConfig>
 8100930:	4603      	mov	r3, r0
 8100932:	2b00      	cmp	r3, #0
 8100934:	d001      	beq.n	810093a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8100936:	f7ff ffb3 	bl	81008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810093a:	4b38      	ldr	r3, [pc, #224]	; (8100a1c <HAL_UART_MspInit+0x130>)
 810093c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100940:	4a36      	ldr	r2, [pc, #216]	; (8100a1c <HAL_UART_MspInit+0x130>)
 8100942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100946:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810094a:	4b34      	ldr	r3, [pc, #208]	; (8100a1c <HAL_UART_MspInit+0x130>)
 810094c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100954:	60fb      	str	r3, [r7, #12]
 8100956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100958:	4b30      	ldr	r3, [pc, #192]	; (8100a1c <HAL_UART_MspInit+0x130>)
 810095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810095e:	4a2f      	ldr	r2, [pc, #188]	; (8100a1c <HAL_UART_MspInit+0x130>)
 8100960:	f043 0308 	orr.w	r3, r3, #8
 8100964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100968:	4b2c      	ldr	r3, [pc, #176]	; (8100a1c <HAL_UART_MspInit+0x130>)
 810096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810096e:	f003 0308 	and.w	r3, r3, #8
 8100972:	60bb      	str	r3, [r7, #8]
 8100974:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100976:	f44f 7340 	mov.w	r3, #768	; 0x300
 810097a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810097e:	2302      	movs	r3, #2
 8100980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100984:	2300      	movs	r3, #0
 8100986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810098a:	2300      	movs	r3, #0
 810098c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100990:	2307      	movs	r3, #7
 8100992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100996:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810099a:	4619      	mov	r1, r3
 810099c:	4820      	ldr	r0, [pc, #128]	; (8100a20 <HAL_UART_MspInit+0x134>)
 810099e:	f003 f8d1 	bl	8103b44 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81009a2:	4b20      	ldr	r3, [pc, #128]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009a4:	4a20      	ldr	r2, [pc, #128]	; (8100a28 <HAL_UART_MspInit+0x13c>)
 81009a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81009a8:	4b1e      	ldr	r3, [pc, #120]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009aa:	222e      	movs	r2, #46	; 0x2e
 81009ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81009ae:	4b1d      	ldr	r3, [pc, #116]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009b0:	2240      	movs	r2, #64	; 0x40
 81009b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81009b4:	4b1b      	ldr	r3, [pc, #108]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009b6:	2200      	movs	r2, #0
 81009b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81009ba:	4b1a      	ldr	r3, [pc, #104]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81009c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81009c2:	4b18      	ldr	r3, [pc, #96]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009c4:	2200      	movs	r2, #0
 81009c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81009c8:	4b16      	ldr	r3, [pc, #88]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009ca:	2200      	movs	r2, #0
 81009cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81009ce:	4b15      	ldr	r3, [pc, #84]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009d0:	2200      	movs	r2, #0
 81009d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81009d4:	4b13      	ldr	r3, [pc, #76]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81009da:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81009dc:	4b11      	ldr	r3, [pc, #68]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009de:	2200      	movs	r2, #0
 81009e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81009e2:	4810      	ldr	r0, [pc, #64]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009e4:	f000 fa76 	bl	8100ed4 <HAL_DMA_Init>
 81009e8:	4603      	mov	r3, r0
 81009ea:	2b00      	cmp	r3, #0
 81009ec:	d001      	beq.n	81009f2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 81009ee:	f7ff ff57 	bl	81008a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 81009f2:	687b      	ldr	r3, [r7, #4]
 81009f4:	4a0b      	ldr	r2, [pc, #44]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009f6:	679a      	str	r2, [r3, #120]	; 0x78
 81009f8:	4a0a      	ldr	r2, [pc, #40]	; (8100a24 <HAL_UART_MspInit+0x138>)
 81009fa:	687b      	ldr	r3, [r7, #4]
 81009fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 81009fe:	2200      	movs	r2, #0
 8100a00:	2100      	movs	r1, #0
 8100a02:	2027      	movs	r0, #39	; 0x27
 8100a04:	f000 fa1d 	bl	8100e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8100a08:	2027      	movs	r0, #39	; 0x27
 8100a0a:	f000 fa34 	bl	8100e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100a0e:	bf00      	nop
 8100a10:	37e0      	adds	r7, #224	; 0xe0
 8100a12:	46bd      	mov	sp, r7
 8100a14:	bd80      	pop	{r7, pc}
 8100a16:	bf00      	nop
 8100a18:	40004800 	.word	0x40004800
 8100a1c:	58024400 	.word	0x58024400
 8100a20:	58020c00 	.word	0x58020c00
 8100a24:	100000c4 	.word	0x100000c4
 8100a28:	40020410 	.word	0x40020410

08100a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100a2c:	b480      	push	{r7}
 8100a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100a30:	e7fe      	b.n	8100a30 <NMI_Handler+0x4>

08100a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100a32:	b480      	push	{r7}
 8100a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100a36:	e7fe      	b.n	8100a36 <HardFault_Handler+0x4>

08100a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100a38:	b480      	push	{r7}
 8100a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100a3c:	e7fe      	b.n	8100a3c <MemManage_Handler+0x4>

08100a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100a3e:	b480      	push	{r7}
 8100a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100a42:	e7fe      	b.n	8100a42 <BusFault_Handler+0x4>

08100a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100a44:	b480      	push	{r7}
 8100a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100a48:	e7fe      	b.n	8100a48 <UsageFault_Handler+0x4>

08100a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100a4a:	b480      	push	{r7}
 8100a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100a4e:	bf00      	nop
 8100a50:	46bd      	mov	sp, r7
 8100a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a56:	4770      	bx	lr

08100a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100a58:	b480      	push	{r7}
 8100a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100a5c:	bf00      	nop
 8100a5e:	46bd      	mov	sp, r7
 8100a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a64:	4770      	bx	lr

08100a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100a66:	b480      	push	{r7}
 8100a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100a6a:	bf00      	nop
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a72:	4770      	bx	lr

08100a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100a78:	f000 f8e8 	bl	8100c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100a7c:	bf00      	nop
 8100a7e:	bd80      	pop	{r7, pc}

08100a80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8100a80:	b580      	push	{r7, lr}
 8100a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8100a84:	2080      	movs	r0, #128	; 0x80
 8100a86:	f003 fa0d 	bl	8103ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8100a8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8100a8e:	f003 fa09 	bl	8103ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8100a92:	bf00      	nop
 8100a94:	bd80      	pop	{r7, pc}
	...

08100a98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8100a9c:	4802      	ldr	r0, [pc, #8]	; (8100aa8 <USART3_IRQHandler+0x10>)
 8100a9e:	f005 f8bf 	bl	8105c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8100aa2:	bf00      	nop
 8100aa4:	bd80      	pop	{r7, pc}
 8100aa6:	bf00      	nop
 8100aa8:	10000034 	.word	0x10000034

08100aac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8100aac:	b580      	push	{r7, lr}
 8100aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8100ab0:	4802      	ldr	r0, [pc, #8]	; (8100abc <DMA2_Stream0_IRQHandler+0x10>)
 8100ab2:	f001 fd35 	bl	8102520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8100ab6:	bf00      	nop
 8100ab8:	bd80      	pop	{r7, pc}
 8100aba:	bf00      	nop
 8100abc:	100000c4 	.word	0x100000c4

08100ac0 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100ac0:	b480      	push	{r7}
 8100ac2:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100ac4:	bf00      	nop
 8100ac6:	46bd      	mov	sp, r7
 8100ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100acc:	4770      	bx	lr
	...

08100ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100ad4:	f7ff fd7c 	bl	81005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100ad8:	480c      	ldr	r0, [pc, #48]	; (8100b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100ada:	490d      	ldr	r1, [pc, #52]	; (8100b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100adc:	4a0d      	ldr	r2, [pc, #52]	; (8100b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ae0:	e002      	b.n	8100ae8 <LoopCopyDataInit>

08100ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100ae6:	3304      	adds	r3, #4

08100ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100aec:	d3f9      	bcc.n	8100ae2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100aee:	4a0a      	ldr	r2, [pc, #40]	; (8100b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100af0:	4c0a      	ldr	r4, [pc, #40]	; (8100b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100af4:	e001      	b.n	8100afa <LoopFillZerobss>

08100af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100af8:	3204      	adds	r2, #4

08100afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100afc:	d3fb      	bcc.n	8100af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100afe:	f006 fc57 	bl	81073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100b02:	f7ff fd81 	bl	8100608 <main>
  bx  lr
 8100b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100b08:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100b0c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100b10:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100b14:	08107470 	.word	0x08107470
  ldr r2, =_sbss
 8100b18:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100b1c:	10000140 	.word	0x10000140

08100b20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100b20:	e7fe      	b.n	8100b20 <ADC3_IRQHandler>
	...

08100b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100b24:	b580      	push	{r7, lr}
 8100b26:	b082      	sub	sp, #8
 8100b28:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100b2a:	4b28      	ldr	r3, [pc, #160]	; (8100bcc <HAL_Init+0xa8>)
 8100b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b30:	4a26      	ldr	r2, [pc, #152]	; (8100bcc <HAL_Init+0xa8>)
 8100b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100b3a:	4b24      	ldr	r3, [pc, #144]	; (8100bcc <HAL_Init+0xa8>)
 8100b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100b44:	603b      	str	r3, [r7, #0]
 8100b46:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100b48:	4b21      	ldr	r3, [pc, #132]	; (8100bd0 <HAL_Init+0xac>)
 8100b4a:	681b      	ldr	r3, [r3, #0]
 8100b4c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100b54:	4a1e      	ldr	r2, [pc, #120]	; (8100bd0 <HAL_Init+0xac>)
 8100b56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100b5a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100b5c:	4b1c      	ldr	r3, [pc, #112]	; (8100bd0 <HAL_Init+0xac>)
 8100b5e:	681b      	ldr	r3, [r3, #0]
 8100b60:	4a1b      	ldr	r2, [pc, #108]	; (8100bd0 <HAL_Init+0xac>)
 8100b62:	f043 0301 	orr.w	r3, r3, #1
 8100b66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100b68:	2003      	movs	r0, #3
 8100b6a:	f000 f95f 	bl	8100e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100b6e:	f003 fa4d 	bl	810400c <HAL_RCC_GetSysClockFreq>
 8100b72:	4602      	mov	r2, r0
 8100b74:	4b15      	ldr	r3, [pc, #84]	; (8100bcc <HAL_Init+0xa8>)
 8100b76:	699b      	ldr	r3, [r3, #24]
 8100b78:	0a1b      	lsrs	r3, r3, #8
 8100b7a:	f003 030f 	and.w	r3, r3, #15
 8100b7e:	4915      	ldr	r1, [pc, #84]	; (8100bd4 <HAL_Init+0xb0>)
 8100b80:	5ccb      	ldrb	r3, [r1, r3]
 8100b82:	f003 031f 	and.w	r3, r3, #31
 8100b86:	fa22 f303 	lsr.w	r3, r2, r3
 8100b8a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100b8c:	4b0f      	ldr	r3, [pc, #60]	; (8100bcc <HAL_Init+0xa8>)
 8100b8e:	699b      	ldr	r3, [r3, #24]
 8100b90:	f003 030f 	and.w	r3, r3, #15
 8100b94:	4a0f      	ldr	r2, [pc, #60]	; (8100bd4 <HAL_Init+0xb0>)
 8100b96:	5cd3      	ldrb	r3, [r2, r3]
 8100b98:	f003 031f 	and.w	r3, r3, #31
 8100b9c:	687a      	ldr	r2, [r7, #4]
 8100b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8100ba2:	4a0d      	ldr	r2, [pc, #52]	; (8100bd8 <HAL_Init+0xb4>)
 8100ba4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100ba6:	4b0c      	ldr	r3, [pc, #48]	; (8100bd8 <HAL_Init+0xb4>)
 8100ba8:	681b      	ldr	r3, [r3, #0]
 8100baa:	4a0c      	ldr	r2, [pc, #48]	; (8100bdc <HAL_Init+0xb8>)
 8100bac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100bae:	2000      	movs	r0, #0
 8100bb0:	f000 f816 	bl	8100be0 <HAL_InitTick>
 8100bb4:	4603      	mov	r3, r0
 8100bb6:	2b00      	cmp	r3, #0
 8100bb8:	d001      	beq.n	8100bbe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100bba:	2301      	movs	r3, #1
 8100bbc:	e002      	b.n	8100bc4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100bbe:	f7ff fe75 	bl	81008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100bc2:	2300      	movs	r3, #0
}
 8100bc4:	4618      	mov	r0, r3
 8100bc6:	3708      	adds	r7, #8
 8100bc8:	46bd      	mov	sp, r7
 8100bca:	bd80      	pop	{r7, pc}
 8100bcc:	58024400 	.word	0x58024400
 8100bd0:	40024400 	.word	0x40024400
 8100bd4:	08107420 	.word	0x08107420
 8100bd8:	10000004 	.word	0x10000004
 8100bdc:	10000000 	.word	0x10000000

08100be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100be0:	b580      	push	{r7, lr}
 8100be2:	b082      	sub	sp, #8
 8100be4:	af00      	add	r7, sp, #0
 8100be6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100be8:	4b15      	ldr	r3, [pc, #84]	; (8100c40 <HAL_InitTick+0x60>)
 8100bea:	781b      	ldrb	r3, [r3, #0]
 8100bec:	2b00      	cmp	r3, #0
 8100bee:	d101      	bne.n	8100bf4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100bf0:	2301      	movs	r3, #1
 8100bf2:	e021      	b.n	8100c38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100bf4:	4b13      	ldr	r3, [pc, #76]	; (8100c44 <HAL_InitTick+0x64>)
 8100bf6:	681a      	ldr	r2, [r3, #0]
 8100bf8:	4b11      	ldr	r3, [pc, #68]	; (8100c40 <HAL_InitTick+0x60>)
 8100bfa:	781b      	ldrb	r3, [r3, #0]
 8100bfc:	4619      	mov	r1, r3
 8100bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8100c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8100c0a:	4618      	mov	r0, r3
 8100c0c:	f000 f941 	bl	8100e92 <HAL_SYSTICK_Config>
 8100c10:	4603      	mov	r3, r0
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d001      	beq.n	8100c1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100c16:	2301      	movs	r3, #1
 8100c18:	e00e      	b.n	8100c38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100c1a:	687b      	ldr	r3, [r7, #4]
 8100c1c:	2b0f      	cmp	r3, #15
 8100c1e:	d80a      	bhi.n	8100c36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100c20:	2200      	movs	r2, #0
 8100c22:	6879      	ldr	r1, [r7, #4]
 8100c24:	f04f 30ff 	mov.w	r0, #4294967295
 8100c28:	f000 f90b 	bl	8100e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100c2c:	4a06      	ldr	r2, [pc, #24]	; (8100c48 <HAL_InitTick+0x68>)
 8100c2e:	687b      	ldr	r3, [r7, #4]
 8100c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100c32:	2300      	movs	r3, #0
 8100c34:	e000      	b.n	8100c38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100c36:	2301      	movs	r3, #1
}
 8100c38:	4618      	mov	r0, r3
 8100c3a:	3708      	adds	r7, #8
 8100c3c:	46bd      	mov	sp, r7
 8100c3e:	bd80      	pop	{r7, pc}
 8100c40:	1000000c 	.word	0x1000000c
 8100c44:	10000000 	.word	0x10000000
 8100c48:	10000008 	.word	0x10000008

08100c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100c4c:	b480      	push	{r7}
 8100c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100c50:	4b06      	ldr	r3, [pc, #24]	; (8100c6c <HAL_IncTick+0x20>)
 8100c52:	781b      	ldrb	r3, [r3, #0]
 8100c54:	461a      	mov	r2, r3
 8100c56:	4b06      	ldr	r3, [pc, #24]	; (8100c70 <HAL_IncTick+0x24>)
 8100c58:	681b      	ldr	r3, [r3, #0]
 8100c5a:	4413      	add	r3, r2
 8100c5c:	4a04      	ldr	r2, [pc, #16]	; (8100c70 <HAL_IncTick+0x24>)
 8100c5e:	6013      	str	r3, [r2, #0]
}
 8100c60:	bf00      	nop
 8100c62:	46bd      	mov	sp, r7
 8100c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c68:	4770      	bx	lr
 8100c6a:	bf00      	nop
 8100c6c:	1000000c 	.word	0x1000000c
 8100c70:	1000013c 	.word	0x1000013c

08100c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100c74:	b480      	push	{r7}
 8100c76:	af00      	add	r7, sp, #0
  return uwTick;
 8100c78:	4b03      	ldr	r3, [pc, #12]	; (8100c88 <HAL_GetTick+0x14>)
 8100c7a:	681b      	ldr	r3, [r3, #0]
}
 8100c7c:	4618      	mov	r0, r3
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c84:	4770      	bx	lr
 8100c86:	bf00      	nop
 8100c88:	1000013c 	.word	0x1000013c

08100c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c8c:	b480      	push	{r7}
 8100c8e:	b085      	sub	sp, #20
 8100c90:	af00      	add	r7, sp, #0
 8100c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100c94:	687b      	ldr	r3, [r7, #4]
 8100c96:	f003 0307 	and.w	r3, r3, #7
 8100c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100c9c:	4b0c      	ldr	r3, [pc, #48]	; (8100cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8100c9e:	68db      	ldr	r3, [r3, #12]
 8100ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ca2:	68ba      	ldr	r2, [r7, #8]
 8100ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100ca8:	4013      	ands	r3, r2
 8100caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100cac:	68fb      	ldr	r3, [r7, #12]
 8100cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100cb0:	68bb      	ldr	r3, [r7, #8]
 8100cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100cbe:	4a04      	ldr	r2, [pc, #16]	; (8100cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8100cc0:	68bb      	ldr	r3, [r7, #8]
 8100cc2:	60d3      	str	r3, [r2, #12]
}
 8100cc4:	bf00      	nop
 8100cc6:	3714      	adds	r7, #20
 8100cc8:	46bd      	mov	sp, r7
 8100cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cce:	4770      	bx	lr
 8100cd0:	e000ed00 	.word	0xe000ed00

08100cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100cd4:	b480      	push	{r7}
 8100cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100cd8:	4b04      	ldr	r3, [pc, #16]	; (8100cec <__NVIC_GetPriorityGrouping+0x18>)
 8100cda:	68db      	ldr	r3, [r3, #12]
 8100cdc:	0a1b      	lsrs	r3, r3, #8
 8100cde:	f003 0307 	and.w	r3, r3, #7
}
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	46bd      	mov	sp, r7
 8100ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cea:	4770      	bx	lr
 8100cec:	e000ed00 	.word	0xe000ed00

08100cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cf0:	b480      	push	{r7}
 8100cf2:	b083      	sub	sp, #12
 8100cf4:	af00      	add	r7, sp, #0
 8100cf6:	4603      	mov	r3, r0
 8100cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cfe:	2b00      	cmp	r3, #0
 8100d00:	db0b      	blt.n	8100d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100d02:	88fb      	ldrh	r3, [r7, #6]
 8100d04:	f003 021f 	and.w	r2, r3, #31
 8100d08:	4907      	ldr	r1, [pc, #28]	; (8100d28 <__NVIC_EnableIRQ+0x38>)
 8100d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d0e:	095b      	lsrs	r3, r3, #5
 8100d10:	2001      	movs	r0, #1
 8100d12:	fa00 f202 	lsl.w	r2, r0, r2
 8100d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100d1a:	bf00      	nop
 8100d1c:	370c      	adds	r7, #12
 8100d1e:	46bd      	mov	sp, r7
 8100d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d24:	4770      	bx	lr
 8100d26:	bf00      	nop
 8100d28:	e000e100 	.word	0xe000e100

08100d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100d2c:	b480      	push	{r7}
 8100d2e:	b083      	sub	sp, #12
 8100d30:	af00      	add	r7, sp, #0
 8100d32:	4603      	mov	r3, r0
 8100d34:	6039      	str	r1, [r7, #0]
 8100d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d3c:	2b00      	cmp	r3, #0
 8100d3e:	db0a      	blt.n	8100d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d40:	683b      	ldr	r3, [r7, #0]
 8100d42:	b2da      	uxtb	r2, r3
 8100d44:	490c      	ldr	r1, [pc, #48]	; (8100d78 <__NVIC_SetPriority+0x4c>)
 8100d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d4a:	0112      	lsls	r2, r2, #4
 8100d4c:	b2d2      	uxtb	r2, r2
 8100d4e:	440b      	add	r3, r1
 8100d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100d54:	e00a      	b.n	8100d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d56:	683b      	ldr	r3, [r7, #0]
 8100d58:	b2da      	uxtb	r2, r3
 8100d5a:	4908      	ldr	r1, [pc, #32]	; (8100d7c <__NVIC_SetPriority+0x50>)
 8100d5c:	88fb      	ldrh	r3, [r7, #6]
 8100d5e:	f003 030f 	and.w	r3, r3, #15
 8100d62:	3b04      	subs	r3, #4
 8100d64:	0112      	lsls	r2, r2, #4
 8100d66:	b2d2      	uxtb	r2, r2
 8100d68:	440b      	add	r3, r1
 8100d6a:	761a      	strb	r2, [r3, #24]
}
 8100d6c:	bf00      	nop
 8100d6e:	370c      	adds	r7, #12
 8100d70:	46bd      	mov	sp, r7
 8100d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d76:	4770      	bx	lr
 8100d78:	e000e100 	.word	0xe000e100
 8100d7c:	e000ed00 	.word	0xe000ed00

08100d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d80:	b480      	push	{r7}
 8100d82:	b089      	sub	sp, #36	; 0x24
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	60f8      	str	r0, [r7, #12]
 8100d88:	60b9      	str	r1, [r7, #8]
 8100d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100d8c:	68fb      	ldr	r3, [r7, #12]
 8100d8e:	f003 0307 	and.w	r3, r3, #7
 8100d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100d94:	69fb      	ldr	r3, [r7, #28]
 8100d96:	f1c3 0307 	rsb	r3, r3, #7
 8100d9a:	2b04      	cmp	r3, #4
 8100d9c:	bf28      	it	cs
 8100d9e:	2304      	movcs	r3, #4
 8100da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100da2:	69fb      	ldr	r3, [r7, #28]
 8100da4:	3304      	adds	r3, #4
 8100da6:	2b06      	cmp	r3, #6
 8100da8:	d902      	bls.n	8100db0 <NVIC_EncodePriority+0x30>
 8100daa:	69fb      	ldr	r3, [r7, #28]
 8100dac:	3b03      	subs	r3, #3
 8100dae:	e000      	b.n	8100db2 <NVIC_EncodePriority+0x32>
 8100db0:	2300      	movs	r3, #0
 8100db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100db4:	f04f 32ff 	mov.w	r2, #4294967295
 8100db8:	69bb      	ldr	r3, [r7, #24]
 8100dba:	fa02 f303 	lsl.w	r3, r2, r3
 8100dbe:	43da      	mvns	r2, r3
 8100dc0:	68bb      	ldr	r3, [r7, #8]
 8100dc2:	401a      	ands	r2, r3
 8100dc4:	697b      	ldr	r3, [r7, #20]
 8100dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8100dcc:	697b      	ldr	r3, [r7, #20]
 8100dce:	fa01 f303 	lsl.w	r3, r1, r3
 8100dd2:	43d9      	mvns	r1, r3
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100dd8:	4313      	orrs	r3, r2
         );
}
 8100dda:	4618      	mov	r0, r3
 8100ddc:	3724      	adds	r7, #36	; 0x24
 8100dde:	46bd      	mov	sp, r7
 8100de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de4:	4770      	bx	lr
	...

08100de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100de8:	b580      	push	{r7, lr}
 8100dea:	b082      	sub	sp, #8
 8100dec:	af00      	add	r7, sp, #0
 8100dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100df0:	687b      	ldr	r3, [r7, #4]
 8100df2:	3b01      	subs	r3, #1
 8100df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100df8:	d301      	bcc.n	8100dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100dfa:	2301      	movs	r3, #1
 8100dfc:	e00f      	b.n	8100e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100dfe:	4a0a      	ldr	r2, [pc, #40]	; (8100e28 <SysTick_Config+0x40>)
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	3b01      	subs	r3, #1
 8100e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100e06:	210f      	movs	r1, #15
 8100e08:	f04f 30ff 	mov.w	r0, #4294967295
 8100e0c:	f7ff ff8e 	bl	8100d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100e10:	4b05      	ldr	r3, [pc, #20]	; (8100e28 <SysTick_Config+0x40>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100e16:	4b04      	ldr	r3, [pc, #16]	; (8100e28 <SysTick_Config+0x40>)
 8100e18:	2207      	movs	r2, #7
 8100e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100e1c:	2300      	movs	r3, #0
}
 8100e1e:	4618      	mov	r0, r3
 8100e20:	3708      	adds	r7, #8
 8100e22:	46bd      	mov	sp, r7
 8100e24:	bd80      	pop	{r7, pc}
 8100e26:	bf00      	nop
 8100e28:	e000e010 	.word	0xe000e010

08100e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100e2c:	b580      	push	{r7, lr}
 8100e2e:	b082      	sub	sp, #8
 8100e30:	af00      	add	r7, sp, #0
 8100e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100e34:	6878      	ldr	r0, [r7, #4]
 8100e36:	f7ff ff29 	bl	8100c8c <__NVIC_SetPriorityGrouping>
}
 8100e3a:	bf00      	nop
 8100e3c:	3708      	adds	r7, #8
 8100e3e:	46bd      	mov	sp, r7
 8100e40:	bd80      	pop	{r7, pc}

08100e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e42:	b580      	push	{r7, lr}
 8100e44:	b086      	sub	sp, #24
 8100e46:	af00      	add	r7, sp, #0
 8100e48:	4603      	mov	r3, r0
 8100e4a:	60b9      	str	r1, [r7, #8]
 8100e4c:	607a      	str	r2, [r7, #4]
 8100e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100e50:	f7ff ff40 	bl	8100cd4 <__NVIC_GetPriorityGrouping>
 8100e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100e56:	687a      	ldr	r2, [r7, #4]
 8100e58:	68b9      	ldr	r1, [r7, #8]
 8100e5a:	6978      	ldr	r0, [r7, #20]
 8100e5c:	f7ff ff90 	bl	8100d80 <NVIC_EncodePriority>
 8100e60:	4602      	mov	r2, r0
 8100e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e66:	4611      	mov	r1, r2
 8100e68:	4618      	mov	r0, r3
 8100e6a:	f7ff ff5f 	bl	8100d2c <__NVIC_SetPriority>
}
 8100e6e:	bf00      	nop
 8100e70:	3718      	adds	r7, #24
 8100e72:	46bd      	mov	sp, r7
 8100e74:	bd80      	pop	{r7, pc}

08100e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100e76:	b580      	push	{r7, lr}
 8100e78:	b082      	sub	sp, #8
 8100e7a:	af00      	add	r7, sp, #0
 8100e7c:	4603      	mov	r3, r0
 8100e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e84:	4618      	mov	r0, r3
 8100e86:	f7ff ff33 	bl	8100cf0 <__NVIC_EnableIRQ>
}
 8100e8a:	bf00      	nop
 8100e8c:	3708      	adds	r7, #8
 8100e8e:	46bd      	mov	sp, r7
 8100e90:	bd80      	pop	{r7, pc}

08100e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100e92:	b580      	push	{r7, lr}
 8100e94:	b082      	sub	sp, #8
 8100e96:	af00      	add	r7, sp, #0
 8100e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100e9a:	6878      	ldr	r0, [r7, #4]
 8100e9c:	f7ff ffa4 	bl	8100de8 <SysTick_Config>
 8100ea0:	4603      	mov	r3, r0
}
 8100ea2:	4618      	mov	r0, r3
 8100ea4:	3708      	adds	r7, #8
 8100ea6:	46bd      	mov	sp, r7
 8100ea8:	bd80      	pop	{r7, pc}
	...

08100eac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100eac:	b480      	push	{r7}
 8100eae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100eb0:	4b07      	ldr	r3, [pc, #28]	; (8100ed0 <HAL_GetCurrentCPUID+0x24>)
 8100eb2:	681b      	ldr	r3, [r3, #0]
 8100eb4:	091b      	lsrs	r3, r3, #4
 8100eb6:	f003 030f 	and.w	r3, r3, #15
 8100eba:	2b07      	cmp	r3, #7
 8100ebc:	d101      	bne.n	8100ec2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100ebe:	2303      	movs	r3, #3
 8100ec0:	e000      	b.n	8100ec4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100ec2:	2301      	movs	r3, #1
  }
}
 8100ec4:	4618      	mov	r0, r3
 8100ec6:	46bd      	mov	sp, r7
 8100ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ecc:	4770      	bx	lr
 8100ece:	bf00      	nop
 8100ed0:	e000ed00 	.word	0xe000ed00

08100ed4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8100ed4:	b580      	push	{r7, lr}
 8100ed6:	b086      	sub	sp, #24
 8100ed8:	af00      	add	r7, sp, #0
 8100eda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8100edc:	f7ff feca 	bl	8100c74 <HAL_GetTick>
 8100ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	2b00      	cmp	r3, #0
 8100ee6:	d101      	bne.n	8100eec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8100ee8:	2301      	movs	r3, #1
 8100eea:	e314      	b.n	8101516 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100eec:	687b      	ldr	r3, [r7, #4]
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	4a66      	ldr	r2, [pc, #408]	; (810108c <HAL_DMA_Init+0x1b8>)
 8100ef2:	4293      	cmp	r3, r2
 8100ef4:	d04a      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	681b      	ldr	r3, [r3, #0]
 8100efa:	4a65      	ldr	r2, [pc, #404]	; (8101090 <HAL_DMA_Init+0x1bc>)
 8100efc:	4293      	cmp	r3, r2
 8100efe:	d045      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	4a63      	ldr	r2, [pc, #396]	; (8101094 <HAL_DMA_Init+0x1c0>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d040      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	681b      	ldr	r3, [r3, #0]
 8100f0e:	4a62      	ldr	r2, [pc, #392]	; (8101098 <HAL_DMA_Init+0x1c4>)
 8100f10:	4293      	cmp	r3, r2
 8100f12:	d03b      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	4a60      	ldr	r2, [pc, #384]	; (810109c <HAL_DMA_Init+0x1c8>)
 8100f1a:	4293      	cmp	r3, r2
 8100f1c:	d036      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	681b      	ldr	r3, [r3, #0]
 8100f22:	4a5f      	ldr	r2, [pc, #380]	; (81010a0 <HAL_DMA_Init+0x1cc>)
 8100f24:	4293      	cmp	r3, r2
 8100f26:	d031      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f28:	687b      	ldr	r3, [r7, #4]
 8100f2a:	681b      	ldr	r3, [r3, #0]
 8100f2c:	4a5d      	ldr	r2, [pc, #372]	; (81010a4 <HAL_DMA_Init+0x1d0>)
 8100f2e:	4293      	cmp	r3, r2
 8100f30:	d02c      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	681b      	ldr	r3, [r3, #0]
 8100f36:	4a5c      	ldr	r2, [pc, #368]	; (81010a8 <HAL_DMA_Init+0x1d4>)
 8100f38:	4293      	cmp	r3, r2
 8100f3a:	d027      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f3c:	687b      	ldr	r3, [r7, #4]
 8100f3e:	681b      	ldr	r3, [r3, #0]
 8100f40:	4a5a      	ldr	r2, [pc, #360]	; (81010ac <HAL_DMA_Init+0x1d8>)
 8100f42:	4293      	cmp	r3, r2
 8100f44:	d022      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	681b      	ldr	r3, [r3, #0]
 8100f4a:	4a59      	ldr	r2, [pc, #356]	; (81010b0 <HAL_DMA_Init+0x1dc>)
 8100f4c:	4293      	cmp	r3, r2
 8100f4e:	d01d      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	681b      	ldr	r3, [r3, #0]
 8100f54:	4a57      	ldr	r2, [pc, #348]	; (81010b4 <HAL_DMA_Init+0x1e0>)
 8100f56:	4293      	cmp	r3, r2
 8100f58:	d018      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f5a:	687b      	ldr	r3, [r7, #4]
 8100f5c:	681b      	ldr	r3, [r3, #0]
 8100f5e:	4a56      	ldr	r2, [pc, #344]	; (81010b8 <HAL_DMA_Init+0x1e4>)
 8100f60:	4293      	cmp	r3, r2
 8100f62:	d013      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	681b      	ldr	r3, [r3, #0]
 8100f68:	4a54      	ldr	r2, [pc, #336]	; (81010bc <HAL_DMA_Init+0x1e8>)
 8100f6a:	4293      	cmp	r3, r2
 8100f6c:	d00e      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	681b      	ldr	r3, [r3, #0]
 8100f72:	4a53      	ldr	r2, [pc, #332]	; (81010c0 <HAL_DMA_Init+0x1ec>)
 8100f74:	4293      	cmp	r3, r2
 8100f76:	d009      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	681b      	ldr	r3, [r3, #0]
 8100f7c:	4a51      	ldr	r2, [pc, #324]	; (81010c4 <HAL_DMA_Init+0x1f0>)
 8100f7e:	4293      	cmp	r3, r2
 8100f80:	d004      	beq.n	8100f8c <HAL_DMA_Init+0xb8>
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	681b      	ldr	r3, [r3, #0]
 8100f86:	4a50      	ldr	r2, [pc, #320]	; (81010c8 <HAL_DMA_Init+0x1f4>)
 8100f88:	4293      	cmp	r3, r2
 8100f8a:	d101      	bne.n	8100f90 <HAL_DMA_Init+0xbc>
 8100f8c:	2301      	movs	r3, #1
 8100f8e:	e000      	b.n	8100f92 <HAL_DMA_Init+0xbe>
 8100f90:	2300      	movs	r3, #0
 8100f92:	2b00      	cmp	r3, #0
 8100f94:	f000 813b 	beq.w	810120e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	2200      	movs	r2, #0
 8100f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8100fa0:	687b      	ldr	r3, [r7, #4]
 8100fa2:	2202      	movs	r2, #2
 8100fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8100fa8:	687b      	ldr	r3, [r7, #4]
 8100faa:	681b      	ldr	r3, [r3, #0]
 8100fac:	4a37      	ldr	r2, [pc, #220]	; (810108c <HAL_DMA_Init+0x1b8>)
 8100fae:	4293      	cmp	r3, r2
 8100fb0:	d04a      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	681b      	ldr	r3, [r3, #0]
 8100fb6:	4a36      	ldr	r2, [pc, #216]	; (8101090 <HAL_DMA_Init+0x1bc>)
 8100fb8:	4293      	cmp	r3, r2
 8100fba:	d045      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	681b      	ldr	r3, [r3, #0]
 8100fc0:	4a34      	ldr	r2, [pc, #208]	; (8101094 <HAL_DMA_Init+0x1c0>)
 8100fc2:	4293      	cmp	r3, r2
 8100fc4:	d040      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fc6:	687b      	ldr	r3, [r7, #4]
 8100fc8:	681b      	ldr	r3, [r3, #0]
 8100fca:	4a33      	ldr	r2, [pc, #204]	; (8101098 <HAL_DMA_Init+0x1c4>)
 8100fcc:	4293      	cmp	r3, r2
 8100fce:	d03b      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	681b      	ldr	r3, [r3, #0]
 8100fd4:	4a31      	ldr	r2, [pc, #196]	; (810109c <HAL_DMA_Init+0x1c8>)
 8100fd6:	4293      	cmp	r3, r2
 8100fd8:	d036      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	4a30      	ldr	r2, [pc, #192]	; (81010a0 <HAL_DMA_Init+0x1cc>)
 8100fe0:	4293      	cmp	r3, r2
 8100fe2:	d031      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fe4:	687b      	ldr	r3, [r7, #4]
 8100fe6:	681b      	ldr	r3, [r3, #0]
 8100fe8:	4a2e      	ldr	r2, [pc, #184]	; (81010a4 <HAL_DMA_Init+0x1d0>)
 8100fea:	4293      	cmp	r3, r2
 8100fec:	d02c      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	4a2d      	ldr	r2, [pc, #180]	; (81010a8 <HAL_DMA_Init+0x1d4>)
 8100ff4:	4293      	cmp	r3, r2
 8100ff6:	d027      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	4a2b      	ldr	r2, [pc, #172]	; (81010ac <HAL_DMA_Init+0x1d8>)
 8100ffe:	4293      	cmp	r3, r2
 8101000:	d022      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8101002:	687b      	ldr	r3, [r7, #4]
 8101004:	681b      	ldr	r3, [r3, #0]
 8101006:	4a2a      	ldr	r2, [pc, #168]	; (81010b0 <HAL_DMA_Init+0x1dc>)
 8101008:	4293      	cmp	r3, r2
 810100a:	d01d      	beq.n	8101048 <HAL_DMA_Init+0x174>
 810100c:	687b      	ldr	r3, [r7, #4]
 810100e:	681b      	ldr	r3, [r3, #0]
 8101010:	4a28      	ldr	r2, [pc, #160]	; (81010b4 <HAL_DMA_Init+0x1e0>)
 8101012:	4293      	cmp	r3, r2
 8101014:	d018      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	681b      	ldr	r3, [r3, #0]
 810101a:	4a27      	ldr	r2, [pc, #156]	; (81010b8 <HAL_DMA_Init+0x1e4>)
 810101c:	4293      	cmp	r3, r2
 810101e:	d013      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	681b      	ldr	r3, [r3, #0]
 8101024:	4a25      	ldr	r2, [pc, #148]	; (81010bc <HAL_DMA_Init+0x1e8>)
 8101026:	4293      	cmp	r3, r2
 8101028:	d00e      	beq.n	8101048 <HAL_DMA_Init+0x174>
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	4a24      	ldr	r2, [pc, #144]	; (81010c0 <HAL_DMA_Init+0x1ec>)
 8101030:	4293      	cmp	r3, r2
 8101032:	d009      	beq.n	8101048 <HAL_DMA_Init+0x174>
 8101034:	687b      	ldr	r3, [r7, #4]
 8101036:	681b      	ldr	r3, [r3, #0]
 8101038:	4a22      	ldr	r2, [pc, #136]	; (81010c4 <HAL_DMA_Init+0x1f0>)
 810103a:	4293      	cmp	r3, r2
 810103c:	d004      	beq.n	8101048 <HAL_DMA_Init+0x174>
 810103e:	687b      	ldr	r3, [r7, #4]
 8101040:	681b      	ldr	r3, [r3, #0]
 8101042:	4a21      	ldr	r2, [pc, #132]	; (81010c8 <HAL_DMA_Init+0x1f4>)
 8101044:	4293      	cmp	r3, r2
 8101046:	d108      	bne.n	810105a <HAL_DMA_Init+0x186>
 8101048:	687b      	ldr	r3, [r7, #4]
 810104a:	681b      	ldr	r3, [r3, #0]
 810104c:	681a      	ldr	r2, [r3, #0]
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	681b      	ldr	r3, [r3, #0]
 8101052:	f022 0201 	bic.w	r2, r2, #1
 8101056:	601a      	str	r2, [r3, #0]
 8101058:	e007      	b.n	810106a <HAL_DMA_Init+0x196>
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	681b      	ldr	r3, [r3, #0]
 810105e:	681a      	ldr	r2, [r3, #0]
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	f022 0201 	bic.w	r2, r2, #1
 8101068:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810106a:	e02f      	b.n	81010cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810106c:	f7ff fe02 	bl	8100c74 <HAL_GetTick>
 8101070:	4602      	mov	r2, r0
 8101072:	693b      	ldr	r3, [r7, #16]
 8101074:	1ad3      	subs	r3, r2, r3
 8101076:	2b05      	cmp	r3, #5
 8101078:	d928      	bls.n	81010cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810107a:	687b      	ldr	r3, [r7, #4]
 810107c:	2220      	movs	r2, #32
 810107e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	2203      	movs	r2, #3
 8101084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101088:	2301      	movs	r3, #1
 810108a:	e244      	b.n	8101516 <HAL_DMA_Init+0x642>
 810108c:	40020010 	.word	0x40020010
 8101090:	40020028 	.word	0x40020028
 8101094:	40020040 	.word	0x40020040
 8101098:	40020058 	.word	0x40020058
 810109c:	40020070 	.word	0x40020070
 81010a0:	40020088 	.word	0x40020088
 81010a4:	400200a0 	.word	0x400200a0
 81010a8:	400200b8 	.word	0x400200b8
 81010ac:	40020410 	.word	0x40020410
 81010b0:	40020428 	.word	0x40020428
 81010b4:	40020440 	.word	0x40020440
 81010b8:	40020458 	.word	0x40020458
 81010bc:	40020470 	.word	0x40020470
 81010c0:	40020488 	.word	0x40020488
 81010c4:	400204a0 	.word	0x400204a0
 81010c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81010cc:	687b      	ldr	r3, [r7, #4]
 81010ce:	681b      	ldr	r3, [r3, #0]
 81010d0:	681b      	ldr	r3, [r3, #0]
 81010d2:	f003 0301 	and.w	r3, r3, #1
 81010d6:	2b00      	cmp	r3, #0
 81010d8:	d1c8      	bne.n	810106c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	681b      	ldr	r3, [r3, #0]
 81010e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81010e2:	697a      	ldr	r2, [r7, #20]
 81010e4:	4b84      	ldr	r3, [pc, #528]	; (81012f8 <HAL_DMA_Init+0x424>)
 81010e6:	4013      	ands	r3, r2
 81010e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81010f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	691b      	ldr	r3, [r3, #16]
 81010f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81010fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	699b      	ldr	r3, [r3, #24]
 8101104:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101106:	687b      	ldr	r3, [r7, #4]
 8101108:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810110a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	6a1b      	ldr	r3, [r3, #32]
 8101110:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101112:	697a      	ldr	r2, [r7, #20]
 8101114:	4313      	orrs	r3, r2
 8101116:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810111c:	2b04      	cmp	r3, #4
 810111e:	d107      	bne.n	8101130 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101120:	687b      	ldr	r3, [r7, #4]
 8101122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101128:	4313      	orrs	r3, r2
 810112a:	697a      	ldr	r2, [r7, #20]
 810112c:	4313      	orrs	r3, r2
 810112e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101130:	4b72      	ldr	r3, [pc, #456]	; (81012fc <HAL_DMA_Init+0x428>)
 8101132:	681b      	ldr	r3, [r3, #0]
 8101134:	0c1b      	lsrs	r3, r3, #16
 8101136:	041b      	lsls	r3, r3, #16
 8101138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810113c:	d328      	bcc.n	8101190 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	685b      	ldr	r3, [r3, #4]
 8101142:	2b28      	cmp	r3, #40	; 0x28
 8101144:	d903      	bls.n	810114e <HAL_DMA_Init+0x27a>
 8101146:	687b      	ldr	r3, [r7, #4]
 8101148:	685b      	ldr	r3, [r3, #4]
 810114a:	2b2e      	cmp	r3, #46	; 0x2e
 810114c:	d917      	bls.n	810117e <HAL_DMA_Init+0x2aa>
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	685b      	ldr	r3, [r3, #4]
 8101152:	2b3e      	cmp	r3, #62	; 0x3e
 8101154:	d903      	bls.n	810115e <HAL_DMA_Init+0x28a>
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	685b      	ldr	r3, [r3, #4]
 810115a:	2b42      	cmp	r3, #66	; 0x42
 810115c:	d90f      	bls.n	810117e <HAL_DMA_Init+0x2aa>
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	685b      	ldr	r3, [r3, #4]
 8101162:	2b46      	cmp	r3, #70	; 0x46
 8101164:	d903      	bls.n	810116e <HAL_DMA_Init+0x29a>
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	685b      	ldr	r3, [r3, #4]
 810116a:	2b48      	cmp	r3, #72	; 0x48
 810116c:	d907      	bls.n	810117e <HAL_DMA_Init+0x2aa>
 810116e:	687b      	ldr	r3, [r7, #4]
 8101170:	685b      	ldr	r3, [r3, #4]
 8101172:	2b4e      	cmp	r3, #78	; 0x4e
 8101174:	d905      	bls.n	8101182 <HAL_DMA_Init+0x2ae>
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	685b      	ldr	r3, [r3, #4]
 810117a:	2b52      	cmp	r3, #82	; 0x52
 810117c:	d801      	bhi.n	8101182 <HAL_DMA_Init+0x2ae>
 810117e:	2301      	movs	r3, #1
 8101180:	e000      	b.n	8101184 <HAL_DMA_Init+0x2b0>
 8101182:	2300      	movs	r3, #0
 8101184:	2b00      	cmp	r3, #0
 8101186:	d003      	beq.n	8101190 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101188:	697b      	ldr	r3, [r7, #20]
 810118a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810118e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	681b      	ldr	r3, [r3, #0]
 8101194:	697a      	ldr	r2, [r7, #20]
 8101196:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101198:	687b      	ldr	r3, [r7, #4]
 810119a:	681b      	ldr	r3, [r3, #0]
 810119c:	695b      	ldr	r3, [r3, #20]
 810119e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81011a0:	697b      	ldr	r3, [r7, #20]
 81011a2:	f023 0307 	bic.w	r3, r3, #7
 81011a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81011ac:	697a      	ldr	r2, [r7, #20]
 81011ae:	4313      	orrs	r3, r2
 81011b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81011b6:	2b04      	cmp	r3, #4
 81011b8:	d117      	bne.n	81011ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81011ba:	687b      	ldr	r3, [r7, #4]
 81011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011be:	697a      	ldr	r2, [r7, #20]
 81011c0:	4313      	orrs	r3, r2
 81011c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011c8:	2b00      	cmp	r3, #0
 81011ca:	d00e      	beq.n	81011ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81011cc:	6878      	ldr	r0, [r7, #4]
 81011ce:	f002 fb2f 	bl	8103830 <DMA_CheckFifoParam>
 81011d2:	4603      	mov	r3, r0
 81011d4:	2b00      	cmp	r3, #0
 81011d6:	d008      	beq.n	81011ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	2240      	movs	r2, #64	; 0x40
 81011dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	2201      	movs	r2, #1
 81011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81011e6:	2301      	movs	r3, #1
 81011e8:	e195      	b.n	8101516 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	681b      	ldr	r3, [r3, #0]
 81011ee:	697a      	ldr	r2, [r7, #20]
 81011f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81011f2:	6878      	ldr	r0, [r7, #4]
 81011f4:	f002 fa6a 	bl	81036cc <DMA_CalcBaseAndBitshift>
 81011f8:	4603      	mov	r3, r0
 81011fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101200:	f003 031f 	and.w	r3, r3, #31
 8101204:	223f      	movs	r2, #63	; 0x3f
 8101206:	409a      	lsls	r2, r3
 8101208:	68bb      	ldr	r3, [r7, #8]
 810120a:	609a      	str	r2, [r3, #8]
 810120c:	e0cb      	b.n	81013a6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	4a3b      	ldr	r2, [pc, #236]	; (8101300 <HAL_DMA_Init+0x42c>)
 8101214:	4293      	cmp	r3, r2
 8101216:	d022      	beq.n	810125e <HAL_DMA_Init+0x38a>
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	681b      	ldr	r3, [r3, #0]
 810121c:	4a39      	ldr	r2, [pc, #228]	; (8101304 <HAL_DMA_Init+0x430>)
 810121e:	4293      	cmp	r3, r2
 8101220:	d01d      	beq.n	810125e <HAL_DMA_Init+0x38a>
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	4a38      	ldr	r2, [pc, #224]	; (8101308 <HAL_DMA_Init+0x434>)
 8101228:	4293      	cmp	r3, r2
 810122a:	d018      	beq.n	810125e <HAL_DMA_Init+0x38a>
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	4a36      	ldr	r2, [pc, #216]	; (810130c <HAL_DMA_Init+0x438>)
 8101232:	4293      	cmp	r3, r2
 8101234:	d013      	beq.n	810125e <HAL_DMA_Init+0x38a>
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	681b      	ldr	r3, [r3, #0]
 810123a:	4a35      	ldr	r2, [pc, #212]	; (8101310 <HAL_DMA_Init+0x43c>)
 810123c:	4293      	cmp	r3, r2
 810123e:	d00e      	beq.n	810125e <HAL_DMA_Init+0x38a>
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	681b      	ldr	r3, [r3, #0]
 8101244:	4a33      	ldr	r2, [pc, #204]	; (8101314 <HAL_DMA_Init+0x440>)
 8101246:	4293      	cmp	r3, r2
 8101248:	d009      	beq.n	810125e <HAL_DMA_Init+0x38a>
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	681b      	ldr	r3, [r3, #0]
 810124e:	4a32      	ldr	r2, [pc, #200]	; (8101318 <HAL_DMA_Init+0x444>)
 8101250:	4293      	cmp	r3, r2
 8101252:	d004      	beq.n	810125e <HAL_DMA_Init+0x38a>
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	681b      	ldr	r3, [r3, #0]
 8101258:	4a30      	ldr	r2, [pc, #192]	; (810131c <HAL_DMA_Init+0x448>)
 810125a:	4293      	cmp	r3, r2
 810125c:	d101      	bne.n	8101262 <HAL_DMA_Init+0x38e>
 810125e:	2301      	movs	r3, #1
 8101260:	e000      	b.n	8101264 <HAL_DMA_Init+0x390>
 8101262:	2300      	movs	r3, #0
 8101264:	2b00      	cmp	r3, #0
 8101266:	f000 8095 	beq.w	8101394 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	681b      	ldr	r3, [r3, #0]
 810126e:	4a24      	ldr	r2, [pc, #144]	; (8101300 <HAL_DMA_Init+0x42c>)
 8101270:	4293      	cmp	r3, r2
 8101272:	d021      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	681b      	ldr	r3, [r3, #0]
 8101278:	4a22      	ldr	r2, [pc, #136]	; (8101304 <HAL_DMA_Init+0x430>)
 810127a:	4293      	cmp	r3, r2
 810127c:	d01c      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	681b      	ldr	r3, [r3, #0]
 8101282:	4a21      	ldr	r2, [pc, #132]	; (8101308 <HAL_DMA_Init+0x434>)
 8101284:	4293      	cmp	r3, r2
 8101286:	d017      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	681b      	ldr	r3, [r3, #0]
 810128c:	4a1f      	ldr	r2, [pc, #124]	; (810130c <HAL_DMA_Init+0x438>)
 810128e:	4293      	cmp	r3, r2
 8101290:	d012      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 8101292:	687b      	ldr	r3, [r7, #4]
 8101294:	681b      	ldr	r3, [r3, #0]
 8101296:	4a1e      	ldr	r2, [pc, #120]	; (8101310 <HAL_DMA_Init+0x43c>)
 8101298:	4293      	cmp	r3, r2
 810129a:	d00d      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 810129c:	687b      	ldr	r3, [r7, #4]
 810129e:	681b      	ldr	r3, [r3, #0]
 81012a0:	4a1c      	ldr	r2, [pc, #112]	; (8101314 <HAL_DMA_Init+0x440>)
 81012a2:	4293      	cmp	r3, r2
 81012a4:	d008      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	681b      	ldr	r3, [r3, #0]
 81012aa:	4a1b      	ldr	r2, [pc, #108]	; (8101318 <HAL_DMA_Init+0x444>)
 81012ac:	4293      	cmp	r3, r2
 81012ae:	d003      	beq.n	81012b8 <HAL_DMA_Init+0x3e4>
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	681b      	ldr	r3, [r3, #0]
 81012b4:	4a19      	ldr	r2, [pc, #100]	; (810131c <HAL_DMA_Init+0x448>)
 81012b6:	4293      	cmp	r3, r2
 81012b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81012ba:	687b      	ldr	r3, [r7, #4]
 81012bc:	2200      	movs	r2, #0
 81012be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	2202      	movs	r2, #2
 81012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81012d2:	697b      	ldr	r3, [r7, #20]
 81012d4:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81012d8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81012dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	689b      	ldr	r3, [r3, #8]
 81012e2:	2b40      	cmp	r3, #64	; 0x40
 81012e4:	d01c      	beq.n	8101320 <HAL_DMA_Init+0x44c>
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	689b      	ldr	r3, [r3, #8]
 81012ea:	2b80      	cmp	r3, #128	; 0x80
 81012ec:	d102      	bne.n	81012f4 <HAL_DMA_Init+0x420>
 81012ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81012f2:	e016      	b.n	8101322 <HAL_DMA_Init+0x44e>
 81012f4:	2300      	movs	r3, #0
 81012f6:	e014      	b.n	8101322 <HAL_DMA_Init+0x44e>
 81012f8:	fe10803f 	.word	0xfe10803f
 81012fc:	5c001000 	.word	0x5c001000
 8101300:	58025408 	.word	0x58025408
 8101304:	5802541c 	.word	0x5802541c
 8101308:	58025430 	.word	0x58025430
 810130c:	58025444 	.word	0x58025444
 8101310:	58025458 	.word	0x58025458
 8101314:	5802546c 	.word	0x5802546c
 8101318:	58025480 	.word	0x58025480
 810131c:	58025494 	.word	0x58025494
 8101320:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101322:	687a      	ldr	r2, [r7, #4]
 8101324:	68d2      	ldr	r2, [r2, #12]
 8101326:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	691b      	ldr	r3, [r3, #16]
 810132e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101332:	687b      	ldr	r3, [r7, #4]
 8101334:	695b      	ldr	r3, [r3, #20]
 8101336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	699b      	ldr	r3, [r3, #24]
 810133e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	69db      	ldr	r3, [r3, #28]
 8101346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	6a1b      	ldr	r3, [r3, #32]
 810134e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101350:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101352:	697a      	ldr	r2, [r7, #20]
 8101354:	4313      	orrs	r3, r2
 8101356:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	681b      	ldr	r3, [r3, #0]
 810135c:	697a      	ldr	r2, [r7, #20]
 810135e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	681b      	ldr	r3, [r3, #0]
 8101364:	461a      	mov	r2, r3
 8101366:	4b6e      	ldr	r3, [pc, #440]	; (8101520 <HAL_DMA_Init+0x64c>)
 8101368:	4413      	add	r3, r2
 810136a:	4a6e      	ldr	r2, [pc, #440]	; (8101524 <HAL_DMA_Init+0x650>)
 810136c:	fba2 2303 	umull	r2, r3, r2, r3
 8101370:	091b      	lsrs	r3, r3, #4
 8101372:	009a      	lsls	r2, r3, #2
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101378:	6878      	ldr	r0, [r7, #4]
 810137a:	f002 f9a7 	bl	81036cc <DMA_CalcBaseAndBitshift>
 810137e:	4603      	mov	r3, r0
 8101380:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101386:	f003 031f 	and.w	r3, r3, #31
 810138a:	2201      	movs	r2, #1
 810138c:	409a      	lsls	r2, r3
 810138e:	68fb      	ldr	r3, [r7, #12]
 8101390:	605a      	str	r2, [r3, #4]
 8101392:	e008      	b.n	81013a6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	2240      	movs	r2, #64	; 0x40
 8101398:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	2203      	movs	r2, #3
 810139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81013a2:	2301      	movs	r3, #1
 81013a4:	e0b7      	b.n	8101516 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	681b      	ldr	r3, [r3, #0]
 81013aa:	4a5f      	ldr	r2, [pc, #380]	; (8101528 <HAL_DMA_Init+0x654>)
 81013ac:	4293      	cmp	r3, r2
 81013ae:	d072      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	4a5d      	ldr	r2, [pc, #372]	; (810152c <HAL_DMA_Init+0x658>)
 81013b6:	4293      	cmp	r3, r2
 81013b8:	d06d      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	681b      	ldr	r3, [r3, #0]
 81013be:	4a5c      	ldr	r2, [pc, #368]	; (8101530 <HAL_DMA_Init+0x65c>)
 81013c0:	4293      	cmp	r3, r2
 81013c2:	d068      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	681b      	ldr	r3, [r3, #0]
 81013c8:	4a5a      	ldr	r2, [pc, #360]	; (8101534 <HAL_DMA_Init+0x660>)
 81013ca:	4293      	cmp	r3, r2
 81013cc:	d063      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	681b      	ldr	r3, [r3, #0]
 81013d2:	4a59      	ldr	r2, [pc, #356]	; (8101538 <HAL_DMA_Init+0x664>)
 81013d4:	4293      	cmp	r3, r2
 81013d6:	d05e      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	681b      	ldr	r3, [r3, #0]
 81013dc:	4a57      	ldr	r2, [pc, #348]	; (810153c <HAL_DMA_Init+0x668>)
 81013de:	4293      	cmp	r3, r2
 81013e0:	d059      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	681b      	ldr	r3, [r3, #0]
 81013e6:	4a56      	ldr	r2, [pc, #344]	; (8101540 <HAL_DMA_Init+0x66c>)
 81013e8:	4293      	cmp	r3, r2
 81013ea:	d054      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	681b      	ldr	r3, [r3, #0]
 81013f0:	4a54      	ldr	r2, [pc, #336]	; (8101544 <HAL_DMA_Init+0x670>)
 81013f2:	4293      	cmp	r3, r2
 81013f4:	d04f      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	4a53      	ldr	r2, [pc, #332]	; (8101548 <HAL_DMA_Init+0x674>)
 81013fc:	4293      	cmp	r3, r2
 81013fe:	d04a      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	681b      	ldr	r3, [r3, #0]
 8101404:	4a51      	ldr	r2, [pc, #324]	; (810154c <HAL_DMA_Init+0x678>)
 8101406:	4293      	cmp	r3, r2
 8101408:	d045      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	681b      	ldr	r3, [r3, #0]
 810140e:	4a50      	ldr	r2, [pc, #320]	; (8101550 <HAL_DMA_Init+0x67c>)
 8101410:	4293      	cmp	r3, r2
 8101412:	d040      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	4a4e      	ldr	r2, [pc, #312]	; (8101554 <HAL_DMA_Init+0x680>)
 810141a:	4293      	cmp	r3, r2
 810141c:	d03b      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	681b      	ldr	r3, [r3, #0]
 8101422:	4a4d      	ldr	r2, [pc, #308]	; (8101558 <HAL_DMA_Init+0x684>)
 8101424:	4293      	cmp	r3, r2
 8101426:	d036      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	681b      	ldr	r3, [r3, #0]
 810142c:	4a4b      	ldr	r2, [pc, #300]	; (810155c <HAL_DMA_Init+0x688>)
 810142e:	4293      	cmp	r3, r2
 8101430:	d031      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101432:	687b      	ldr	r3, [r7, #4]
 8101434:	681b      	ldr	r3, [r3, #0]
 8101436:	4a4a      	ldr	r2, [pc, #296]	; (8101560 <HAL_DMA_Init+0x68c>)
 8101438:	4293      	cmp	r3, r2
 810143a:	d02c      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	4a48      	ldr	r2, [pc, #288]	; (8101564 <HAL_DMA_Init+0x690>)
 8101442:	4293      	cmp	r3, r2
 8101444:	d027      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101446:	687b      	ldr	r3, [r7, #4]
 8101448:	681b      	ldr	r3, [r3, #0]
 810144a:	4a47      	ldr	r2, [pc, #284]	; (8101568 <HAL_DMA_Init+0x694>)
 810144c:	4293      	cmp	r3, r2
 810144e:	d022      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101450:	687b      	ldr	r3, [r7, #4]
 8101452:	681b      	ldr	r3, [r3, #0]
 8101454:	4a45      	ldr	r2, [pc, #276]	; (810156c <HAL_DMA_Init+0x698>)
 8101456:	4293      	cmp	r3, r2
 8101458:	d01d      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	4a44      	ldr	r2, [pc, #272]	; (8101570 <HAL_DMA_Init+0x69c>)
 8101460:	4293      	cmp	r3, r2
 8101462:	d018      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	681b      	ldr	r3, [r3, #0]
 8101468:	4a42      	ldr	r2, [pc, #264]	; (8101574 <HAL_DMA_Init+0x6a0>)
 810146a:	4293      	cmp	r3, r2
 810146c:	d013      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810146e:	687b      	ldr	r3, [r7, #4]
 8101470:	681b      	ldr	r3, [r3, #0]
 8101472:	4a41      	ldr	r2, [pc, #260]	; (8101578 <HAL_DMA_Init+0x6a4>)
 8101474:	4293      	cmp	r3, r2
 8101476:	d00e      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	681b      	ldr	r3, [r3, #0]
 810147c:	4a3f      	ldr	r2, [pc, #252]	; (810157c <HAL_DMA_Init+0x6a8>)
 810147e:	4293      	cmp	r3, r2
 8101480:	d009      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	681b      	ldr	r3, [r3, #0]
 8101486:	4a3e      	ldr	r2, [pc, #248]	; (8101580 <HAL_DMA_Init+0x6ac>)
 8101488:	4293      	cmp	r3, r2
 810148a:	d004      	beq.n	8101496 <HAL_DMA_Init+0x5c2>
 810148c:	687b      	ldr	r3, [r7, #4]
 810148e:	681b      	ldr	r3, [r3, #0]
 8101490:	4a3c      	ldr	r2, [pc, #240]	; (8101584 <HAL_DMA_Init+0x6b0>)
 8101492:	4293      	cmp	r3, r2
 8101494:	d101      	bne.n	810149a <HAL_DMA_Init+0x5c6>
 8101496:	2301      	movs	r3, #1
 8101498:	e000      	b.n	810149c <HAL_DMA_Init+0x5c8>
 810149a:	2300      	movs	r3, #0
 810149c:	2b00      	cmp	r3, #0
 810149e:	d032      	beq.n	8101506 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81014a0:	6878      	ldr	r0, [r7, #4]
 81014a2:	f002 fa41 	bl	8103928 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81014a6:	687b      	ldr	r3, [r7, #4]
 81014a8:	689b      	ldr	r3, [r3, #8]
 81014aa:	2b80      	cmp	r3, #128	; 0x80
 81014ac:	d102      	bne.n	81014b4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	2200      	movs	r2, #0
 81014b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81014b4:	687b      	ldr	r3, [r7, #4]
 81014b6:	685a      	ldr	r2, [r3, #4]
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81014bc:	b2d2      	uxtb	r2, r2
 81014be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81014c4:	687a      	ldr	r2, [r7, #4]
 81014c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81014c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	685b      	ldr	r3, [r3, #4]
 81014ce:	2b00      	cmp	r3, #0
 81014d0:	d010      	beq.n	81014f4 <HAL_DMA_Init+0x620>
 81014d2:	687b      	ldr	r3, [r7, #4]
 81014d4:	685b      	ldr	r3, [r3, #4]
 81014d6:	2b08      	cmp	r3, #8
 81014d8:	d80c      	bhi.n	81014f4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81014da:	6878      	ldr	r0, [r7, #4]
 81014dc:	f002 fabe 	bl	8103a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81014e0:	687b      	ldr	r3, [r7, #4]
 81014e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81014e4:	2200      	movs	r2, #0
 81014e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81014e8:	687b      	ldr	r3, [r7, #4]
 81014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81014ec:	687a      	ldr	r2, [r7, #4]
 81014ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81014f0:	605a      	str	r2, [r3, #4]
 81014f2:	e008      	b.n	8101506 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	2200      	movs	r2, #0
 81014f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81014fa:	687b      	ldr	r3, [r7, #4]
 81014fc:	2200      	movs	r2, #0
 81014fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	2200      	movs	r2, #0
 8101504:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8101506:	687b      	ldr	r3, [r7, #4]
 8101508:	2200      	movs	r2, #0
 810150a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	2201      	movs	r2, #1
 8101510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8101514:	2300      	movs	r3, #0
}
 8101516:	4618      	mov	r0, r3
 8101518:	3718      	adds	r7, #24
 810151a:	46bd      	mov	sp, r7
 810151c:	bd80      	pop	{r7, pc}
 810151e:	bf00      	nop
 8101520:	a7fdabf8 	.word	0xa7fdabf8
 8101524:	cccccccd 	.word	0xcccccccd
 8101528:	40020010 	.word	0x40020010
 810152c:	40020028 	.word	0x40020028
 8101530:	40020040 	.word	0x40020040
 8101534:	40020058 	.word	0x40020058
 8101538:	40020070 	.word	0x40020070
 810153c:	40020088 	.word	0x40020088
 8101540:	400200a0 	.word	0x400200a0
 8101544:	400200b8 	.word	0x400200b8
 8101548:	40020410 	.word	0x40020410
 810154c:	40020428 	.word	0x40020428
 8101550:	40020440 	.word	0x40020440
 8101554:	40020458 	.word	0x40020458
 8101558:	40020470 	.word	0x40020470
 810155c:	40020488 	.word	0x40020488
 8101560:	400204a0 	.word	0x400204a0
 8101564:	400204b8 	.word	0x400204b8
 8101568:	58025408 	.word	0x58025408
 810156c:	5802541c 	.word	0x5802541c
 8101570:	58025430 	.word	0x58025430
 8101574:	58025444 	.word	0x58025444
 8101578:	58025458 	.word	0x58025458
 810157c:	5802546c 	.word	0x5802546c
 8101580:	58025480 	.word	0x58025480
 8101584:	58025494 	.word	0x58025494

08101588 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8101588:	b580      	push	{r7, lr}
 810158a:	b086      	sub	sp, #24
 810158c:	af00      	add	r7, sp, #0
 810158e:	60f8      	str	r0, [r7, #12]
 8101590:	60b9      	str	r1, [r7, #8]
 8101592:	607a      	str	r2, [r7, #4]
 8101594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8101596:	2300      	movs	r3, #0
 8101598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810159a:	68fb      	ldr	r3, [r7, #12]
 810159c:	2b00      	cmp	r3, #0
 810159e:	d101      	bne.n	81015a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81015a0:	2301      	movs	r3, #1
 81015a2:	e226      	b.n	81019f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81015a4:	68fb      	ldr	r3, [r7, #12]
 81015a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81015aa:	2b01      	cmp	r3, #1
 81015ac:	d101      	bne.n	81015b2 <HAL_DMA_Start_IT+0x2a>
 81015ae:	2302      	movs	r3, #2
 81015b0:	e21f      	b.n	81019f2 <HAL_DMA_Start_IT+0x46a>
 81015b2:	68fb      	ldr	r3, [r7, #12]
 81015b4:	2201      	movs	r2, #1
 81015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81015ba:	68fb      	ldr	r3, [r7, #12]
 81015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81015c0:	b2db      	uxtb	r3, r3
 81015c2:	2b01      	cmp	r3, #1
 81015c4:	f040 820a 	bne.w	81019dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81015c8:	68fb      	ldr	r3, [r7, #12]
 81015ca:	2202      	movs	r2, #2
 81015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81015d0:	68fb      	ldr	r3, [r7, #12]
 81015d2:	2200      	movs	r2, #0
 81015d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81015d6:	68fb      	ldr	r3, [r7, #12]
 81015d8:	681b      	ldr	r3, [r3, #0]
 81015da:	4a68      	ldr	r2, [pc, #416]	; (810177c <HAL_DMA_Start_IT+0x1f4>)
 81015dc:	4293      	cmp	r3, r2
 81015de:	d04a      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 81015e0:	68fb      	ldr	r3, [r7, #12]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	4a66      	ldr	r2, [pc, #408]	; (8101780 <HAL_DMA_Start_IT+0x1f8>)
 81015e6:	4293      	cmp	r3, r2
 81015e8:	d045      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 81015ea:	68fb      	ldr	r3, [r7, #12]
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	4a65      	ldr	r2, [pc, #404]	; (8101784 <HAL_DMA_Start_IT+0x1fc>)
 81015f0:	4293      	cmp	r3, r2
 81015f2:	d040      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 81015f4:	68fb      	ldr	r3, [r7, #12]
 81015f6:	681b      	ldr	r3, [r3, #0]
 81015f8:	4a63      	ldr	r2, [pc, #396]	; (8101788 <HAL_DMA_Start_IT+0x200>)
 81015fa:	4293      	cmp	r3, r2
 81015fc:	d03b      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 81015fe:	68fb      	ldr	r3, [r7, #12]
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	4a62      	ldr	r2, [pc, #392]	; (810178c <HAL_DMA_Start_IT+0x204>)
 8101604:	4293      	cmp	r3, r2
 8101606:	d036      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101608:	68fb      	ldr	r3, [r7, #12]
 810160a:	681b      	ldr	r3, [r3, #0]
 810160c:	4a60      	ldr	r2, [pc, #384]	; (8101790 <HAL_DMA_Start_IT+0x208>)
 810160e:	4293      	cmp	r3, r2
 8101610:	d031      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101612:	68fb      	ldr	r3, [r7, #12]
 8101614:	681b      	ldr	r3, [r3, #0]
 8101616:	4a5f      	ldr	r2, [pc, #380]	; (8101794 <HAL_DMA_Start_IT+0x20c>)
 8101618:	4293      	cmp	r3, r2
 810161a:	d02c      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 810161c:	68fb      	ldr	r3, [r7, #12]
 810161e:	681b      	ldr	r3, [r3, #0]
 8101620:	4a5d      	ldr	r2, [pc, #372]	; (8101798 <HAL_DMA_Start_IT+0x210>)
 8101622:	4293      	cmp	r3, r2
 8101624:	d027      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101626:	68fb      	ldr	r3, [r7, #12]
 8101628:	681b      	ldr	r3, [r3, #0]
 810162a:	4a5c      	ldr	r2, [pc, #368]	; (810179c <HAL_DMA_Start_IT+0x214>)
 810162c:	4293      	cmp	r3, r2
 810162e:	d022      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101630:	68fb      	ldr	r3, [r7, #12]
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	4a5a      	ldr	r2, [pc, #360]	; (81017a0 <HAL_DMA_Start_IT+0x218>)
 8101636:	4293      	cmp	r3, r2
 8101638:	d01d      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 810163a:	68fb      	ldr	r3, [r7, #12]
 810163c:	681b      	ldr	r3, [r3, #0]
 810163e:	4a59      	ldr	r2, [pc, #356]	; (81017a4 <HAL_DMA_Start_IT+0x21c>)
 8101640:	4293      	cmp	r3, r2
 8101642:	d018      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101644:	68fb      	ldr	r3, [r7, #12]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	4a57      	ldr	r2, [pc, #348]	; (81017a8 <HAL_DMA_Start_IT+0x220>)
 810164a:	4293      	cmp	r3, r2
 810164c:	d013      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 810164e:	68fb      	ldr	r3, [r7, #12]
 8101650:	681b      	ldr	r3, [r3, #0]
 8101652:	4a56      	ldr	r2, [pc, #344]	; (81017ac <HAL_DMA_Start_IT+0x224>)
 8101654:	4293      	cmp	r3, r2
 8101656:	d00e      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101658:	68fb      	ldr	r3, [r7, #12]
 810165a:	681b      	ldr	r3, [r3, #0]
 810165c:	4a54      	ldr	r2, [pc, #336]	; (81017b0 <HAL_DMA_Start_IT+0x228>)
 810165e:	4293      	cmp	r3, r2
 8101660:	d009      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 8101662:	68fb      	ldr	r3, [r7, #12]
 8101664:	681b      	ldr	r3, [r3, #0]
 8101666:	4a53      	ldr	r2, [pc, #332]	; (81017b4 <HAL_DMA_Start_IT+0x22c>)
 8101668:	4293      	cmp	r3, r2
 810166a:	d004      	beq.n	8101676 <HAL_DMA_Start_IT+0xee>
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	681b      	ldr	r3, [r3, #0]
 8101670:	4a51      	ldr	r2, [pc, #324]	; (81017b8 <HAL_DMA_Start_IT+0x230>)
 8101672:	4293      	cmp	r3, r2
 8101674:	d108      	bne.n	8101688 <HAL_DMA_Start_IT+0x100>
 8101676:	68fb      	ldr	r3, [r7, #12]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	681a      	ldr	r2, [r3, #0]
 810167c:	68fb      	ldr	r3, [r7, #12]
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	f022 0201 	bic.w	r2, r2, #1
 8101684:	601a      	str	r2, [r3, #0]
 8101686:	e007      	b.n	8101698 <HAL_DMA_Start_IT+0x110>
 8101688:	68fb      	ldr	r3, [r7, #12]
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	681a      	ldr	r2, [r3, #0]
 810168e:	68fb      	ldr	r3, [r7, #12]
 8101690:	681b      	ldr	r3, [r3, #0]
 8101692:	f022 0201 	bic.w	r2, r2, #1
 8101696:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8101698:	683b      	ldr	r3, [r7, #0]
 810169a:	687a      	ldr	r2, [r7, #4]
 810169c:	68b9      	ldr	r1, [r7, #8]
 810169e:	68f8      	ldr	r0, [r7, #12]
 81016a0:	f001 fe68 	bl	8103374 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81016a4:	68fb      	ldr	r3, [r7, #12]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	4a34      	ldr	r2, [pc, #208]	; (810177c <HAL_DMA_Start_IT+0x1f4>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d04a      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016ae:	68fb      	ldr	r3, [r7, #12]
 81016b0:	681b      	ldr	r3, [r3, #0]
 81016b2:	4a33      	ldr	r2, [pc, #204]	; (8101780 <HAL_DMA_Start_IT+0x1f8>)
 81016b4:	4293      	cmp	r3, r2
 81016b6:	d045      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016b8:	68fb      	ldr	r3, [r7, #12]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	4a31      	ldr	r2, [pc, #196]	; (8101784 <HAL_DMA_Start_IT+0x1fc>)
 81016be:	4293      	cmp	r3, r2
 81016c0:	d040      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016c2:	68fb      	ldr	r3, [r7, #12]
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	4a30      	ldr	r2, [pc, #192]	; (8101788 <HAL_DMA_Start_IT+0x200>)
 81016c8:	4293      	cmp	r3, r2
 81016ca:	d03b      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016cc:	68fb      	ldr	r3, [r7, #12]
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	4a2e      	ldr	r2, [pc, #184]	; (810178c <HAL_DMA_Start_IT+0x204>)
 81016d2:	4293      	cmp	r3, r2
 81016d4:	d036      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016d6:	68fb      	ldr	r3, [r7, #12]
 81016d8:	681b      	ldr	r3, [r3, #0]
 81016da:	4a2d      	ldr	r2, [pc, #180]	; (8101790 <HAL_DMA_Start_IT+0x208>)
 81016dc:	4293      	cmp	r3, r2
 81016de:	d031      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016e0:	68fb      	ldr	r3, [r7, #12]
 81016e2:	681b      	ldr	r3, [r3, #0]
 81016e4:	4a2b      	ldr	r2, [pc, #172]	; (8101794 <HAL_DMA_Start_IT+0x20c>)
 81016e6:	4293      	cmp	r3, r2
 81016e8:	d02c      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016ea:	68fb      	ldr	r3, [r7, #12]
 81016ec:	681b      	ldr	r3, [r3, #0]
 81016ee:	4a2a      	ldr	r2, [pc, #168]	; (8101798 <HAL_DMA_Start_IT+0x210>)
 81016f0:	4293      	cmp	r3, r2
 81016f2:	d027      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016f4:	68fb      	ldr	r3, [r7, #12]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	4a28      	ldr	r2, [pc, #160]	; (810179c <HAL_DMA_Start_IT+0x214>)
 81016fa:	4293      	cmp	r3, r2
 81016fc:	d022      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 81016fe:	68fb      	ldr	r3, [r7, #12]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	4a27      	ldr	r2, [pc, #156]	; (81017a0 <HAL_DMA_Start_IT+0x218>)
 8101704:	4293      	cmp	r3, r2
 8101706:	d01d      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 8101708:	68fb      	ldr	r3, [r7, #12]
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	4a25      	ldr	r2, [pc, #148]	; (81017a4 <HAL_DMA_Start_IT+0x21c>)
 810170e:	4293      	cmp	r3, r2
 8101710:	d018      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 8101712:	68fb      	ldr	r3, [r7, #12]
 8101714:	681b      	ldr	r3, [r3, #0]
 8101716:	4a24      	ldr	r2, [pc, #144]	; (81017a8 <HAL_DMA_Start_IT+0x220>)
 8101718:	4293      	cmp	r3, r2
 810171a:	d013      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 810171c:	68fb      	ldr	r3, [r7, #12]
 810171e:	681b      	ldr	r3, [r3, #0]
 8101720:	4a22      	ldr	r2, [pc, #136]	; (81017ac <HAL_DMA_Start_IT+0x224>)
 8101722:	4293      	cmp	r3, r2
 8101724:	d00e      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 8101726:	68fb      	ldr	r3, [r7, #12]
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	4a21      	ldr	r2, [pc, #132]	; (81017b0 <HAL_DMA_Start_IT+0x228>)
 810172c:	4293      	cmp	r3, r2
 810172e:	d009      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 8101730:	68fb      	ldr	r3, [r7, #12]
 8101732:	681b      	ldr	r3, [r3, #0]
 8101734:	4a1f      	ldr	r2, [pc, #124]	; (81017b4 <HAL_DMA_Start_IT+0x22c>)
 8101736:	4293      	cmp	r3, r2
 8101738:	d004      	beq.n	8101744 <HAL_DMA_Start_IT+0x1bc>
 810173a:	68fb      	ldr	r3, [r7, #12]
 810173c:	681b      	ldr	r3, [r3, #0]
 810173e:	4a1e      	ldr	r2, [pc, #120]	; (81017b8 <HAL_DMA_Start_IT+0x230>)
 8101740:	4293      	cmp	r3, r2
 8101742:	d101      	bne.n	8101748 <HAL_DMA_Start_IT+0x1c0>
 8101744:	2301      	movs	r3, #1
 8101746:	e000      	b.n	810174a <HAL_DMA_Start_IT+0x1c2>
 8101748:	2300      	movs	r3, #0
 810174a:	2b00      	cmp	r3, #0
 810174c:	d036      	beq.n	81017bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810174e:	68fb      	ldr	r3, [r7, #12]
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f023 021e 	bic.w	r2, r3, #30
 8101758:	68fb      	ldr	r3, [r7, #12]
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	f042 0216 	orr.w	r2, r2, #22
 8101760:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8101762:	68fb      	ldr	r3, [r7, #12]
 8101764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101766:	2b00      	cmp	r3, #0
 8101768:	d03e      	beq.n	81017e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810176a:	68fb      	ldr	r3, [r7, #12]
 810176c:	681b      	ldr	r3, [r3, #0]
 810176e:	681a      	ldr	r2, [r3, #0]
 8101770:	68fb      	ldr	r3, [r7, #12]
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	f042 0208 	orr.w	r2, r2, #8
 8101778:	601a      	str	r2, [r3, #0]
 810177a:	e035      	b.n	81017e8 <HAL_DMA_Start_IT+0x260>
 810177c:	40020010 	.word	0x40020010
 8101780:	40020028 	.word	0x40020028
 8101784:	40020040 	.word	0x40020040
 8101788:	40020058 	.word	0x40020058
 810178c:	40020070 	.word	0x40020070
 8101790:	40020088 	.word	0x40020088
 8101794:	400200a0 	.word	0x400200a0
 8101798:	400200b8 	.word	0x400200b8
 810179c:	40020410 	.word	0x40020410
 81017a0:	40020428 	.word	0x40020428
 81017a4:	40020440 	.word	0x40020440
 81017a8:	40020458 	.word	0x40020458
 81017ac:	40020470 	.word	0x40020470
 81017b0:	40020488 	.word	0x40020488
 81017b4:	400204a0 	.word	0x400204a0
 81017b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81017bc:	68fb      	ldr	r3, [r7, #12]
 81017be:	681b      	ldr	r3, [r3, #0]
 81017c0:	681b      	ldr	r3, [r3, #0]
 81017c2:	f023 020e 	bic.w	r2, r3, #14
 81017c6:	68fb      	ldr	r3, [r7, #12]
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	f042 020a 	orr.w	r2, r2, #10
 81017ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81017d0:	68fb      	ldr	r3, [r7, #12]
 81017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81017d4:	2b00      	cmp	r3, #0
 81017d6:	d007      	beq.n	81017e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81017d8:	68fb      	ldr	r3, [r7, #12]
 81017da:	681b      	ldr	r3, [r3, #0]
 81017dc:	681a      	ldr	r2, [r3, #0]
 81017de:	68fb      	ldr	r3, [r7, #12]
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	f042 0204 	orr.w	r2, r2, #4
 81017e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81017e8:	68fb      	ldr	r3, [r7, #12]
 81017ea:	681b      	ldr	r3, [r3, #0]
 81017ec:	4a83      	ldr	r2, [pc, #524]	; (81019fc <HAL_DMA_Start_IT+0x474>)
 81017ee:	4293      	cmp	r3, r2
 81017f0:	d072      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81017f2:	68fb      	ldr	r3, [r7, #12]
 81017f4:	681b      	ldr	r3, [r3, #0]
 81017f6:	4a82      	ldr	r2, [pc, #520]	; (8101a00 <HAL_DMA_Start_IT+0x478>)
 81017f8:	4293      	cmp	r3, r2
 81017fa:	d06d      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81017fc:	68fb      	ldr	r3, [r7, #12]
 81017fe:	681b      	ldr	r3, [r3, #0]
 8101800:	4a80      	ldr	r2, [pc, #512]	; (8101a04 <HAL_DMA_Start_IT+0x47c>)
 8101802:	4293      	cmp	r3, r2
 8101804:	d068      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101806:	68fb      	ldr	r3, [r7, #12]
 8101808:	681b      	ldr	r3, [r3, #0]
 810180a:	4a7f      	ldr	r2, [pc, #508]	; (8101a08 <HAL_DMA_Start_IT+0x480>)
 810180c:	4293      	cmp	r3, r2
 810180e:	d063      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101810:	68fb      	ldr	r3, [r7, #12]
 8101812:	681b      	ldr	r3, [r3, #0]
 8101814:	4a7d      	ldr	r2, [pc, #500]	; (8101a0c <HAL_DMA_Start_IT+0x484>)
 8101816:	4293      	cmp	r3, r2
 8101818:	d05e      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810181a:	68fb      	ldr	r3, [r7, #12]
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	4a7c      	ldr	r2, [pc, #496]	; (8101a10 <HAL_DMA_Start_IT+0x488>)
 8101820:	4293      	cmp	r3, r2
 8101822:	d059      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101824:	68fb      	ldr	r3, [r7, #12]
 8101826:	681b      	ldr	r3, [r3, #0]
 8101828:	4a7a      	ldr	r2, [pc, #488]	; (8101a14 <HAL_DMA_Start_IT+0x48c>)
 810182a:	4293      	cmp	r3, r2
 810182c:	d054      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810182e:	68fb      	ldr	r3, [r7, #12]
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	4a79      	ldr	r2, [pc, #484]	; (8101a18 <HAL_DMA_Start_IT+0x490>)
 8101834:	4293      	cmp	r3, r2
 8101836:	d04f      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	681b      	ldr	r3, [r3, #0]
 810183c:	4a77      	ldr	r2, [pc, #476]	; (8101a1c <HAL_DMA_Start_IT+0x494>)
 810183e:	4293      	cmp	r3, r2
 8101840:	d04a      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101842:	68fb      	ldr	r3, [r7, #12]
 8101844:	681b      	ldr	r3, [r3, #0]
 8101846:	4a76      	ldr	r2, [pc, #472]	; (8101a20 <HAL_DMA_Start_IT+0x498>)
 8101848:	4293      	cmp	r3, r2
 810184a:	d045      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810184c:	68fb      	ldr	r3, [r7, #12]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	4a74      	ldr	r2, [pc, #464]	; (8101a24 <HAL_DMA_Start_IT+0x49c>)
 8101852:	4293      	cmp	r3, r2
 8101854:	d040      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101856:	68fb      	ldr	r3, [r7, #12]
 8101858:	681b      	ldr	r3, [r3, #0]
 810185a:	4a73      	ldr	r2, [pc, #460]	; (8101a28 <HAL_DMA_Start_IT+0x4a0>)
 810185c:	4293      	cmp	r3, r2
 810185e:	d03b      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101860:	68fb      	ldr	r3, [r7, #12]
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	4a71      	ldr	r2, [pc, #452]	; (8101a2c <HAL_DMA_Start_IT+0x4a4>)
 8101866:	4293      	cmp	r3, r2
 8101868:	d036      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810186a:	68fb      	ldr	r3, [r7, #12]
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	4a70      	ldr	r2, [pc, #448]	; (8101a30 <HAL_DMA_Start_IT+0x4a8>)
 8101870:	4293      	cmp	r3, r2
 8101872:	d031      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101874:	68fb      	ldr	r3, [r7, #12]
 8101876:	681b      	ldr	r3, [r3, #0]
 8101878:	4a6e      	ldr	r2, [pc, #440]	; (8101a34 <HAL_DMA_Start_IT+0x4ac>)
 810187a:	4293      	cmp	r3, r2
 810187c:	d02c      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810187e:	68fb      	ldr	r3, [r7, #12]
 8101880:	681b      	ldr	r3, [r3, #0]
 8101882:	4a6d      	ldr	r2, [pc, #436]	; (8101a38 <HAL_DMA_Start_IT+0x4b0>)
 8101884:	4293      	cmp	r3, r2
 8101886:	d027      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101888:	68fb      	ldr	r3, [r7, #12]
 810188a:	681b      	ldr	r3, [r3, #0]
 810188c:	4a6b      	ldr	r2, [pc, #428]	; (8101a3c <HAL_DMA_Start_IT+0x4b4>)
 810188e:	4293      	cmp	r3, r2
 8101890:	d022      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 8101892:	68fb      	ldr	r3, [r7, #12]
 8101894:	681b      	ldr	r3, [r3, #0]
 8101896:	4a6a      	ldr	r2, [pc, #424]	; (8101a40 <HAL_DMA_Start_IT+0x4b8>)
 8101898:	4293      	cmp	r3, r2
 810189a:	d01d      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 810189c:	68fb      	ldr	r3, [r7, #12]
 810189e:	681b      	ldr	r3, [r3, #0]
 81018a0:	4a68      	ldr	r2, [pc, #416]	; (8101a44 <HAL_DMA_Start_IT+0x4bc>)
 81018a2:	4293      	cmp	r3, r2
 81018a4:	d018      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81018a6:	68fb      	ldr	r3, [r7, #12]
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	4a67      	ldr	r2, [pc, #412]	; (8101a48 <HAL_DMA_Start_IT+0x4c0>)
 81018ac:	4293      	cmp	r3, r2
 81018ae:	d013      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81018b0:	68fb      	ldr	r3, [r7, #12]
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	4a65      	ldr	r2, [pc, #404]	; (8101a4c <HAL_DMA_Start_IT+0x4c4>)
 81018b6:	4293      	cmp	r3, r2
 81018b8:	d00e      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81018ba:	68fb      	ldr	r3, [r7, #12]
 81018bc:	681b      	ldr	r3, [r3, #0]
 81018be:	4a64      	ldr	r2, [pc, #400]	; (8101a50 <HAL_DMA_Start_IT+0x4c8>)
 81018c0:	4293      	cmp	r3, r2
 81018c2:	d009      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81018c4:	68fb      	ldr	r3, [r7, #12]
 81018c6:	681b      	ldr	r3, [r3, #0]
 81018c8:	4a62      	ldr	r2, [pc, #392]	; (8101a54 <HAL_DMA_Start_IT+0x4cc>)
 81018ca:	4293      	cmp	r3, r2
 81018cc:	d004      	beq.n	81018d8 <HAL_DMA_Start_IT+0x350>
 81018ce:	68fb      	ldr	r3, [r7, #12]
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	4a61      	ldr	r2, [pc, #388]	; (8101a58 <HAL_DMA_Start_IT+0x4d0>)
 81018d4:	4293      	cmp	r3, r2
 81018d6:	d101      	bne.n	81018dc <HAL_DMA_Start_IT+0x354>
 81018d8:	2301      	movs	r3, #1
 81018da:	e000      	b.n	81018de <HAL_DMA_Start_IT+0x356>
 81018dc:	2300      	movs	r3, #0
 81018de:	2b00      	cmp	r3, #0
 81018e0:	d01a      	beq.n	8101918 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81018e2:	68fb      	ldr	r3, [r7, #12]
 81018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81018e6:	681b      	ldr	r3, [r3, #0]
 81018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81018ec:	2b00      	cmp	r3, #0
 81018ee:	d007      	beq.n	8101900 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81018f4:	681a      	ldr	r2, [r3, #0]
 81018f6:	68fb      	ldr	r3, [r7, #12]
 81018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81018fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81018fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8101900:	68fb      	ldr	r3, [r7, #12]
 8101902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101904:	2b00      	cmp	r3, #0
 8101906:	d007      	beq.n	8101918 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8101908:	68fb      	ldr	r3, [r7, #12]
 810190a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810190c:	681a      	ldr	r2, [r3, #0]
 810190e:	68fb      	ldr	r3, [r7, #12]
 8101910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101916:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8101918:	68fb      	ldr	r3, [r7, #12]
 810191a:	681b      	ldr	r3, [r3, #0]
 810191c:	4a37      	ldr	r2, [pc, #220]	; (81019fc <HAL_DMA_Start_IT+0x474>)
 810191e:	4293      	cmp	r3, r2
 8101920:	d04a      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101922:	68fb      	ldr	r3, [r7, #12]
 8101924:	681b      	ldr	r3, [r3, #0]
 8101926:	4a36      	ldr	r2, [pc, #216]	; (8101a00 <HAL_DMA_Start_IT+0x478>)
 8101928:	4293      	cmp	r3, r2
 810192a:	d045      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 810192c:	68fb      	ldr	r3, [r7, #12]
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	4a34      	ldr	r2, [pc, #208]	; (8101a04 <HAL_DMA_Start_IT+0x47c>)
 8101932:	4293      	cmp	r3, r2
 8101934:	d040      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101936:	68fb      	ldr	r3, [r7, #12]
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	4a33      	ldr	r2, [pc, #204]	; (8101a08 <HAL_DMA_Start_IT+0x480>)
 810193c:	4293      	cmp	r3, r2
 810193e:	d03b      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101940:	68fb      	ldr	r3, [r7, #12]
 8101942:	681b      	ldr	r3, [r3, #0]
 8101944:	4a31      	ldr	r2, [pc, #196]	; (8101a0c <HAL_DMA_Start_IT+0x484>)
 8101946:	4293      	cmp	r3, r2
 8101948:	d036      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 810194a:	68fb      	ldr	r3, [r7, #12]
 810194c:	681b      	ldr	r3, [r3, #0]
 810194e:	4a30      	ldr	r2, [pc, #192]	; (8101a10 <HAL_DMA_Start_IT+0x488>)
 8101950:	4293      	cmp	r3, r2
 8101952:	d031      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101954:	68fb      	ldr	r3, [r7, #12]
 8101956:	681b      	ldr	r3, [r3, #0]
 8101958:	4a2e      	ldr	r2, [pc, #184]	; (8101a14 <HAL_DMA_Start_IT+0x48c>)
 810195a:	4293      	cmp	r3, r2
 810195c:	d02c      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 810195e:	68fb      	ldr	r3, [r7, #12]
 8101960:	681b      	ldr	r3, [r3, #0]
 8101962:	4a2d      	ldr	r2, [pc, #180]	; (8101a18 <HAL_DMA_Start_IT+0x490>)
 8101964:	4293      	cmp	r3, r2
 8101966:	d027      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101968:	68fb      	ldr	r3, [r7, #12]
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	4a2b      	ldr	r2, [pc, #172]	; (8101a1c <HAL_DMA_Start_IT+0x494>)
 810196e:	4293      	cmp	r3, r2
 8101970:	d022      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101972:	68fb      	ldr	r3, [r7, #12]
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	4a2a      	ldr	r2, [pc, #168]	; (8101a20 <HAL_DMA_Start_IT+0x498>)
 8101978:	4293      	cmp	r3, r2
 810197a:	d01d      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 810197c:	68fb      	ldr	r3, [r7, #12]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4a28      	ldr	r2, [pc, #160]	; (8101a24 <HAL_DMA_Start_IT+0x49c>)
 8101982:	4293      	cmp	r3, r2
 8101984:	d018      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101986:	68fb      	ldr	r3, [r7, #12]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	4a27      	ldr	r2, [pc, #156]	; (8101a28 <HAL_DMA_Start_IT+0x4a0>)
 810198c:	4293      	cmp	r3, r2
 810198e:	d013      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 8101990:	68fb      	ldr	r3, [r7, #12]
 8101992:	681b      	ldr	r3, [r3, #0]
 8101994:	4a25      	ldr	r2, [pc, #148]	; (8101a2c <HAL_DMA_Start_IT+0x4a4>)
 8101996:	4293      	cmp	r3, r2
 8101998:	d00e      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 810199a:	68fb      	ldr	r3, [r7, #12]
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	4a24      	ldr	r2, [pc, #144]	; (8101a30 <HAL_DMA_Start_IT+0x4a8>)
 81019a0:	4293      	cmp	r3, r2
 81019a2:	d009      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 81019a4:	68fb      	ldr	r3, [r7, #12]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	4a22      	ldr	r2, [pc, #136]	; (8101a34 <HAL_DMA_Start_IT+0x4ac>)
 81019aa:	4293      	cmp	r3, r2
 81019ac:	d004      	beq.n	81019b8 <HAL_DMA_Start_IT+0x430>
 81019ae:	68fb      	ldr	r3, [r7, #12]
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	4a21      	ldr	r2, [pc, #132]	; (8101a38 <HAL_DMA_Start_IT+0x4b0>)
 81019b4:	4293      	cmp	r3, r2
 81019b6:	d108      	bne.n	81019ca <HAL_DMA_Start_IT+0x442>
 81019b8:	68fb      	ldr	r3, [r7, #12]
 81019ba:	681b      	ldr	r3, [r3, #0]
 81019bc:	681a      	ldr	r2, [r3, #0]
 81019be:	68fb      	ldr	r3, [r7, #12]
 81019c0:	681b      	ldr	r3, [r3, #0]
 81019c2:	f042 0201 	orr.w	r2, r2, #1
 81019c6:	601a      	str	r2, [r3, #0]
 81019c8:	e012      	b.n	81019f0 <HAL_DMA_Start_IT+0x468>
 81019ca:	68fb      	ldr	r3, [r7, #12]
 81019cc:	681b      	ldr	r3, [r3, #0]
 81019ce:	681a      	ldr	r2, [r3, #0]
 81019d0:	68fb      	ldr	r3, [r7, #12]
 81019d2:	681b      	ldr	r3, [r3, #0]
 81019d4:	f042 0201 	orr.w	r2, r2, #1
 81019d8:	601a      	str	r2, [r3, #0]
 81019da:	e009      	b.n	81019f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 81019dc:	68fb      	ldr	r3, [r7, #12]
 81019de:	2200      	movs	r2, #0
 81019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81019e4:	68fb      	ldr	r3, [r7, #12]
 81019e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81019ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 81019ec:	2301      	movs	r3, #1
 81019ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81019f0:	7dfb      	ldrb	r3, [r7, #23]
}
 81019f2:	4618      	mov	r0, r3
 81019f4:	3718      	adds	r7, #24
 81019f6:	46bd      	mov	sp, r7
 81019f8:	bd80      	pop	{r7, pc}
 81019fa:	bf00      	nop
 81019fc:	40020010 	.word	0x40020010
 8101a00:	40020028 	.word	0x40020028
 8101a04:	40020040 	.word	0x40020040
 8101a08:	40020058 	.word	0x40020058
 8101a0c:	40020070 	.word	0x40020070
 8101a10:	40020088 	.word	0x40020088
 8101a14:	400200a0 	.word	0x400200a0
 8101a18:	400200b8 	.word	0x400200b8
 8101a1c:	40020410 	.word	0x40020410
 8101a20:	40020428 	.word	0x40020428
 8101a24:	40020440 	.word	0x40020440
 8101a28:	40020458 	.word	0x40020458
 8101a2c:	40020470 	.word	0x40020470
 8101a30:	40020488 	.word	0x40020488
 8101a34:	400204a0 	.word	0x400204a0
 8101a38:	400204b8 	.word	0x400204b8
 8101a3c:	58025408 	.word	0x58025408
 8101a40:	5802541c 	.word	0x5802541c
 8101a44:	58025430 	.word	0x58025430
 8101a48:	58025444 	.word	0x58025444
 8101a4c:	58025458 	.word	0x58025458
 8101a50:	5802546c 	.word	0x5802546c
 8101a54:	58025480 	.word	0x58025480
 8101a58:	58025494 	.word	0x58025494

08101a5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b086      	sub	sp, #24
 8101a60:	af00      	add	r7, sp, #0
 8101a62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8101a64:	f7ff f906 	bl	8100c74 <HAL_GetTick>
 8101a68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101a6a:	687b      	ldr	r3, [r7, #4]
 8101a6c:	2b00      	cmp	r3, #0
 8101a6e:	d101      	bne.n	8101a74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8101a70:	2301      	movs	r3, #1
 8101a72:	e2dc      	b.n	810202e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8101a7a:	b2db      	uxtb	r3, r3
 8101a7c:	2b02      	cmp	r3, #2
 8101a7e:	d008      	beq.n	8101a92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	2280      	movs	r2, #128	; 0x80
 8101a84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	2200      	movs	r2, #0
 8101a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8101a8e:	2301      	movs	r3, #1
 8101a90:	e2cd      	b.n	810202e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	681b      	ldr	r3, [r3, #0]
 8101a96:	4a76      	ldr	r2, [pc, #472]	; (8101c70 <HAL_DMA_Abort+0x214>)
 8101a98:	4293      	cmp	r3, r2
 8101a9a:	d04a      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	4a74      	ldr	r2, [pc, #464]	; (8101c74 <HAL_DMA_Abort+0x218>)
 8101aa2:	4293      	cmp	r3, r2
 8101aa4:	d045      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	4a73      	ldr	r2, [pc, #460]	; (8101c78 <HAL_DMA_Abort+0x21c>)
 8101aac:	4293      	cmp	r3, r2
 8101aae:	d040      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	4a71      	ldr	r2, [pc, #452]	; (8101c7c <HAL_DMA_Abort+0x220>)
 8101ab6:	4293      	cmp	r3, r2
 8101ab8:	d03b      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	4a70      	ldr	r2, [pc, #448]	; (8101c80 <HAL_DMA_Abort+0x224>)
 8101ac0:	4293      	cmp	r3, r2
 8101ac2:	d036      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	4a6e      	ldr	r2, [pc, #440]	; (8101c84 <HAL_DMA_Abort+0x228>)
 8101aca:	4293      	cmp	r3, r2
 8101acc:	d031      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	681b      	ldr	r3, [r3, #0]
 8101ad2:	4a6d      	ldr	r2, [pc, #436]	; (8101c88 <HAL_DMA_Abort+0x22c>)
 8101ad4:	4293      	cmp	r3, r2
 8101ad6:	d02c      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	4a6b      	ldr	r2, [pc, #428]	; (8101c8c <HAL_DMA_Abort+0x230>)
 8101ade:	4293      	cmp	r3, r2
 8101ae0:	d027      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	4a6a      	ldr	r2, [pc, #424]	; (8101c90 <HAL_DMA_Abort+0x234>)
 8101ae8:	4293      	cmp	r3, r2
 8101aea:	d022      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	4a68      	ldr	r2, [pc, #416]	; (8101c94 <HAL_DMA_Abort+0x238>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d01d      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	681b      	ldr	r3, [r3, #0]
 8101afa:	4a67      	ldr	r2, [pc, #412]	; (8101c98 <HAL_DMA_Abort+0x23c>)
 8101afc:	4293      	cmp	r3, r2
 8101afe:	d018      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	681b      	ldr	r3, [r3, #0]
 8101b04:	4a65      	ldr	r2, [pc, #404]	; (8101c9c <HAL_DMA_Abort+0x240>)
 8101b06:	4293      	cmp	r3, r2
 8101b08:	d013      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	4a64      	ldr	r2, [pc, #400]	; (8101ca0 <HAL_DMA_Abort+0x244>)
 8101b10:	4293      	cmp	r3, r2
 8101b12:	d00e      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	4a62      	ldr	r2, [pc, #392]	; (8101ca4 <HAL_DMA_Abort+0x248>)
 8101b1a:	4293      	cmp	r3, r2
 8101b1c:	d009      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	681b      	ldr	r3, [r3, #0]
 8101b22:	4a61      	ldr	r2, [pc, #388]	; (8101ca8 <HAL_DMA_Abort+0x24c>)
 8101b24:	4293      	cmp	r3, r2
 8101b26:	d004      	beq.n	8101b32 <HAL_DMA_Abort+0xd6>
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	681b      	ldr	r3, [r3, #0]
 8101b2c:	4a5f      	ldr	r2, [pc, #380]	; (8101cac <HAL_DMA_Abort+0x250>)
 8101b2e:	4293      	cmp	r3, r2
 8101b30:	d101      	bne.n	8101b36 <HAL_DMA_Abort+0xda>
 8101b32:	2301      	movs	r3, #1
 8101b34:	e000      	b.n	8101b38 <HAL_DMA_Abort+0xdc>
 8101b36:	2300      	movs	r3, #0
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d013      	beq.n	8101b64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	681a      	ldr	r2, [r3, #0]
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	f022 021e 	bic.w	r2, r2, #30
 8101b4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	695a      	ldr	r2, [r3, #20]
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8101b5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	617b      	str	r3, [r7, #20]
 8101b62:	e00a      	b.n	8101b7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	681a      	ldr	r2, [r3, #0]
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	f022 020e 	bic.w	r2, r2, #14
 8101b72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	4a3c      	ldr	r2, [pc, #240]	; (8101c70 <HAL_DMA_Abort+0x214>)
 8101b80:	4293      	cmp	r3, r2
 8101b82:	d072      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	4a3a      	ldr	r2, [pc, #232]	; (8101c74 <HAL_DMA_Abort+0x218>)
 8101b8a:	4293      	cmp	r3, r2
 8101b8c:	d06d      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	4a39      	ldr	r2, [pc, #228]	; (8101c78 <HAL_DMA_Abort+0x21c>)
 8101b94:	4293      	cmp	r3, r2
 8101b96:	d068      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	681b      	ldr	r3, [r3, #0]
 8101b9c:	4a37      	ldr	r2, [pc, #220]	; (8101c7c <HAL_DMA_Abort+0x220>)
 8101b9e:	4293      	cmp	r3, r2
 8101ba0:	d063      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	4a36      	ldr	r2, [pc, #216]	; (8101c80 <HAL_DMA_Abort+0x224>)
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d05e      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	681b      	ldr	r3, [r3, #0]
 8101bb0:	4a34      	ldr	r2, [pc, #208]	; (8101c84 <HAL_DMA_Abort+0x228>)
 8101bb2:	4293      	cmp	r3, r2
 8101bb4:	d059      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	681b      	ldr	r3, [r3, #0]
 8101bba:	4a33      	ldr	r2, [pc, #204]	; (8101c88 <HAL_DMA_Abort+0x22c>)
 8101bbc:	4293      	cmp	r3, r2
 8101bbe:	d054      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	4a31      	ldr	r2, [pc, #196]	; (8101c8c <HAL_DMA_Abort+0x230>)
 8101bc6:	4293      	cmp	r3, r2
 8101bc8:	d04f      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	4a30      	ldr	r2, [pc, #192]	; (8101c90 <HAL_DMA_Abort+0x234>)
 8101bd0:	4293      	cmp	r3, r2
 8101bd2:	d04a      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	4a2e      	ldr	r2, [pc, #184]	; (8101c94 <HAL_DMA_Abort+0x238>)
 8101bda:	4293      	cmp	r3, r2
 8101bdc:	d045      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	4a2d      	ldr	r2, [pc, #180]	; (8101c98 <HAL_DMA_Abort+0x23c>)
 8101be4:	4293      	cmp	r3, r2
 8101be6:	d040      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	4a2b      	ldr	r2, [pc, #172]	; (8101c9c <HAL_DMA_Abort+0x240>)
 8101bee:	4293      	cmp	r3, r2
 8101bf0:	d03b      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a2a      	ldr	r2, [pc, #168]	; (8101ca0 <HAL_DMA_Abort+0x244>)
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d036      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	681b      	ldr	r3, [r3, #0]
 8101c00:	4a28      	ldr	r2, [pc, #160]	; (8101ca4 <HAL_DMA_Abort+0x248>)
 8101c02:	4293      	cmp	r3, r2
 8101c04:	d031      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4a27      	ldr	r2, [pc, #156]	; (8101ca8 <HAL_DMA_Abort+0x24c>)
 8101c0c:	4293      	cmp	r3, r2
 8101c0e:	d02c      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	4a25      	ldr	r2, [pc, #148]	; (8101cac <HAL_DMA_Abort+0x250>)
 8101c16:	4293      	cmp	r3, r2
 8101c18:	d027      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	4a24      	ldr	r2, [pc, #144]	; (8101cb0 <HAL_DMA_Abort+0x254>)
 8101c20:	4293      	cmp	r3, r2
 8101c22:	d022      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	4a22      	ldr	r2, [pc, #136]	; (8101cb4 <HAL_DMA_Abort+0x258>)
 8101c2a:	4293      	cmp	r3, r2
 8101c2c:	d01d      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	4a21      	ldr	r2, [pc, #132]	; (8101cb8 <HAL_DMA_Abort+0x25c>)
 8101c34:	4293      	cmp	r3, r2
 8101c36:	d018      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	4a1f      	ldr	r2, [pc, #124]	; (8101cbc <HAL_DMA_Abort+0x260>)
 8101c3e:	4293      	cmp	r3, r2
 8101c40:	d013      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	4a1e      	ldr	r2, [pc, #120]	; (8101cc0 <HAL_DMA_Abort+0x264>)
 8101c48:	4293      	cmp	r3, r2
 8101c4a:	d00e      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	4a1c      	ldr	r2, [pc, #112]	; (8101cc4 <HAL_DMA_Abort+0x268>)
 8101c52:	4293      	cmp	r3, r2
 8101c54:	d009      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	681b      	ldr	r3, [r3, #0]
 8101c5a:	4a1b      	ldr	r2, [pc, #108]	; (8101cc8 <HAL_DMA_Abort+0x26c>)
 8101c5c:	4293      	cmp	r3, r2
 8101c5e:	d004      	beq.n	8101c6a <HAL_DMA_Abort+0x20e>
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	681b      	ldr	r3, [r3, #0]
 8101c64:	4a19      	ldr	r2, [pc, #100]	; (8101ccc <HAL_DMA_Abort+0x270>)
 8101c66:	4293      	cmp	r3, r2
 8101c68:	d132      	bne.n	8101cd0 <HAL_DMA_Abort+0x274>
 8101c6a:	2301      	movs	r3, #1
 8101c6c:	e031      	b.n	8101cd2 <HAL_DMA_Abort+0x276>
 8101c6e:	bf00      	nop
 8101c70:	40020010 	.word	0x40020010
 8101c74:	40020028 	.word	0x40020028
 8101c78:	40020040 	.word	0x40020040
 8101c7c:	40020058 	.word	0x40020058
 8101c80:	40020070 	.word	0x40020070
 8101c84:	40020088 	.word	0x40020088
 8101c88:	400200a0 	.word	0x400200a0
 8101c8c:	400200b8 	.word	0x400200b8
 8101c90:	40020410 	.word	0x40020410
 8101c94:	40020428 	.word	0x40020428
 8101c98:	40020440 	.word	0x40020440
 8101c9c:	40020458 	.word	0x40020458
 8101ca0:	40020470 	.word	0x40020470
 8101ca4:	40020488 	.word	0x40020488
 8101ca8:	400204a0 	.word	0x400204a0
 8101cac:	400204b8 	.word	0x400204b8
 8101cb0:	58025408 	.word	0x58025408
 8101cb4:	5802541c 	.word	0x5802541c
 8101cb8:	58025430 	.word	0x58025430
 8101cbc:	58025444 	.word	0x58025444
 8101cc0:	58025458 	.word	0x58025458
 8101cc4:	5802546c 	.word	0x5802546c
 8101cc8:	58025480 	.word	0x58025480
 8101ccc:	58025494 	.word	0x58025494
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	2b00      	cmp	r3, #0
 8101cd4:	d007      	beq.n	8101ce6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101cda:	681a      	ldr	r2, [r3, #0]
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	4a6d      	ldr	r2, [pc, #436]	; (8101ea0 <HAL_DMA_Abort+0x444>)
 8101cec:	4293      	cmp	r3, r2
 8101cee:	d04a      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a6b      	ldr	r2, [pc, #428]	; (8101ea4 <HAL_DMA_Abort+0x448>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d045      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4a6a      	ldr	r2, [pc, #424]	; (8101ea8 <HAL_DMA_Abort+0x44c>)
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d040      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a68      	ldr	r2, [pc, #416]	; (8101eac <HAL_DMA_Abort+0x450>)
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d03b      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	681b      	ldr	r3, [r3, #0]
 8101d12:	4a67      	ldr	r2, [pc, #412]	; (8101eb0 <HAL_DMA_Abort+0x454>)
 8101d14:	4293      	cmp	r3, r2
 8101d16:	d036      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	4a65      	ldr	r2, [pc, #404]	; (8101eb4 <HAL_DMA_Abort+0x458>)
 8101d1e:	4293      	cmp	r3, r2
 8101d20:	d031      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	4a64      	ldr	r2, [pc, #400]	; (8101eb8 <HAL_DMA_Abort+0x45c>)
 8101d28:	4293      	cmp	r3, r2
 8101d2a:	d02c      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4a62      	ldr	r2, [pc, #392]	; (8101ebc <HAL_DMA_Abort+0x460>)
 8101d32:	4293      	cmp	r3, r2
 8101d34:	d027      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4a61      	ldr	r2, [pc, #388]	; (8101ec0 <HAL_DMA_Abort+0x464>)
 8101d3c:	4293      	cmp	r3, r2
 8101d3e:	d022      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	681b      	ldr	r3, [r3, #0]
 8101d44:	4a5f      	ldr	r2, [pc, #380]	; (8101ec4 <HAL_DMA_Abort+0x468>)
 8101d46:	4293      	cmp	r3, r2
 8101d48:	d01d      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	681b      	ldr	r3, [r3, #0]
 8101d4e:	4a5e      	ldr	r2, [pc, #376]	; (8101ec8 <HAL_DMA_Abort+0x46c>)
 8101d50:	4293      	cmp	r3, r2
 8101d52:	d018      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	4a5c      	ldr	r2, [pc, #368]	; (8101ecc <HAL_DMA_Abort+0x470>)
 8101d5a:	4293      	cmp	r3, r2
 8101d5c:	d013      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	4a5b      	ldr	r2, [pc, #364]	; (8101ed0 <HAL_DMA_Abort+0x474>)
 8101d64:	4293      	cmp	r3, r2
 8101d66:	d00e      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	4a59      	ldr	r2, [pc, #356]	; (8101ed4 <HAL_DMA_Abort+0x478>)
 8101d6e:	4293      	cmp	r3, r2
 8101d70:	d009      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	4a58      	ldr	r2, [pc, #352]	; (8101ed8 <HAL_DMA_Abort+0x47c>)
 8101d78:	4293      	cmp	r3, r2
 8101d7a:	d004      	beq.n	8101d86 <HAL_DMA_Abort+0x32a>
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	4a56      	ldr	r2, [pc, #344]	; (8101edc <HAL_DMA_Abort+0x480>)
 8101d82:	4293      	cmp	r3, r2
 8101d84:	d108      	bne.n	8101d98 <HAL_DMA_Abort+0x33c>
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	681a      	ldr	r2, [r3, #0]
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	f022 0201 	bic.w	r2, r2, #1
 8101d94:	601a      	str	r2, [r3, #0]
 8101d96:	e007      	b.n	8101da8 <HAL_DMA_Abort+0x34c>
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	681a      	ldr	r2, [r3, #0]
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	f022 0201 	bic.w	r2, r2, #1
 8101da6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101da8:	e013      	b.n	8101dd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101daa:	f7fe ff63 	bl	8100c74 <HAL_GetTick>
 8101dae:	4602      	mov	r2, r0
 8101db0:	693b      	ldr	r3, [r7, #16]
 8101db2:	1ad3      	subs	r3, r2, r3
 8101db4:	2b05      	cmp	r3, #5
 8101db6:	d90c      	bls.n	8101dd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	2220      	movs	r2, #32
 8101dbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	2200      	movs	r2, #0
 8101dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	2203      	movs	r2, #3
 8101dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101dce:	2301      	movs	r3, #1
 8101dd0:	e12d      	b.n	810202e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101dd2:	697b      	ldr	r3, [r7, #20]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	f003 0301 	and.w	r3, r3, #1
 8101dda:	2b00      	cmp	r3, #0
 8101ddc:	d1e5      	bne.n	8101daa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	4a2f      	ldr	r2, [pc, #188]	; (8101ea0 <HAL_DMA_Abort+0x444>)
 8101de4:	4293      	cmp	r3, r2
 8101de6:	d04a      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	4a2d      	ldr	r2, [pc, #180]	; (8101ea4 <HAL_DMA_Abort+0x448>)
 8101dee:	4293      	cmp	r3, r2
 8101df0:	d045      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	4a2c      	ldr	r2, [pc, #176]	; (8101ea8 <HAL_DMA_Abort+0x44c>)
 8101df8:	4293      	cmp	r3, r2
 8101dfa:	d040      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	4a2a      	ldr	r2, [pc, #168]	; (8101eac <HAL_DMA_Abort+0x450>)
 8101e02:	4293      	cmp	r3, r2
 8101e04:	d03b      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	681b      	ldr	r3, [r3, #0]
 8101e0a:	4a29      	ldr	r2, [pc, #164]	; (8101eb0 <HAL_DMA_Abort+0x454>)
 8101e0c:	4293      	cmp	r3, r2
 8101e0e:	d036      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	4a27      	ldr	r2, [pc, #156]	; (8101eb4 <HAL_DMA_Abort+0x458>)
 8101e16:	4293      	cmp	r3, r2
 8101e18:	d031      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	681b      	ldr	r3, [r3, #0]
 8101e1e:	4a26      	ldr	r2, [pc, #152]	; (8101eb8 <HAL_DMA_Abort+0x45c>)
 8101e20:	4293      	cmp	r3, r2
 8101e22:	d02c      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	4a24      	ldr	r2, [pc, #144]	; (8101ebc <HAL_DMA_Abort+0x460>)
 8101e2a:	4293      	cmp	r3, r2
 8101e2c:	d027      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	4a23      	ldr	r2, [pc, #140]	; (8101ec0 <HAL_DMA_Abort+0x464>)
 8101e34:	4293      	cmp	r3, r2
 8101e36:	d022      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	4a21      	ldr	r2, [pc, #132]	; (8101ec4 <HAL_DMA_Abort+0x468>)
 8101e3e:	4293      	cmp	r3, r2
 8101e40:	d01d      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	4a20      	ldr	r2, [pc, #128]	; (8101ec8 <HAL_DMA_Abort+0x46c>)
 8101e48:	4293      	cmp	r3, r2
 8101e4a:	d018      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	4a1e      	ldr	r2, [pc, #120]	; (8101ecc <HAL_DMA_Abort+0x470>)
 8101e52:	4293      	cmp	r3, r2
 8101e54:	d013      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	4a1d      	ldr	r2, [pc, #116]	; (8101ed0 <HAL_DMA_Abort+0x474>)
 8101e5c:	4293      	cmp	r3, r2
 8101e5e:	d00e      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	4a1b      	ldr	r2, [pc, #108]	; (8101ed4 <HAL_DMA_Abort+0x478>)
 8101e66:	4293      	cmp	r3, r2
 8101e68:	d009      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	4a1a      	ldr	r2, [pc, #104]	; (8101ed8 <HAL_DMA_Abort+0x47c>)
 8101e70:	4293      	cmp	r3, r2
 8101e72:	d004      	beq.n	8101e7e <HAL_DMA_Abort+0x422>
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	4a18      	ldr	r2, [pc, #96]	; (8101edc <HAL_DMA_Abort+0x480>)
 8101e7a:	4293      	cmp	r3, r2
 8101e7c:	d101      	bne.n	8101e82 <HAL_DMA_Abort+0x426>
 8101e7e:	2301      	movs	r3, #1
 8101e80:	e000      	b.n	8101e84 <HAL_DMA_Abort+0x428>
 8101e82:	2300      	movs	r3, #0
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d02b      	beq.n	8101ee0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e92:	f003 031f 	and.w	r3, r3, #31
 8101e96:	223f      	movs	r2, #63	; 0x3f
 8101e98:	409a      	lsls	r2, r3
 8101e9a:	68bb      	ldr	r3, [r7, #8]
 8101e9c:	609a      	str	r2, [r3, #8]
 8101e9e:	e02a      	b.n	8101ef6 <HAL_DMA_Abort+0x49a>
 8101ea0:	40020010 	.word	0x40020010
 8101ea4:	40020028 	.word	0x40020028
 8101ea8:	40020040 	.word	0x40020040
 8101eac:	40020058 	.word	0x40020058
 8101eb0:	40020070 	.word	0x40020070
 8101eb4:	40020088 	.word	0x40020088
 8101eb8:	400200a0 	.word	0x400200a0
 8101ebc:	400200b8 	.word	0x400200b8
 8101ec0:	40020410 	.word	0x40020410
 8101ec4:	40020428 	.word	0x40020428
 8101ec8:	40020440 	.word	0x40020440
 8101ecc:	40020458 	.word	0x40020458
 8101ed0:	40020470 	.word	0x40020470
 8101ed4:	40020488 	.word	0x40020488
 8101ed8:	400204a0 	.word	0x400204a0
 8101edc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ee4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101eea:	f003 031f 	and.w	r3, r3, #31
 8101eee:	2201      	movs	r2, #1
 8101ef0:	409a      	lsls	r2, r3
 8101ef2:	68fb      	ldr	r3, [r7, #12]
 8101ef4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	4a4f      	ldr	r2, [pc, #316]	; (8102038 <HAL_DMA_Abort+0x5dc>)
 8101efc:	4293      	cmp	r3, r2
 8101efe:	d072      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	4a4d      	ldr	r2, [pc, #308]	; (810203c <HAL_DMA_Abort+0x5e0>)
 8101f06:	4293      	cmp	r3, r2
 8101f08:	d06d      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	681b      	ldr	r3, [r3, #0]
 8101f0e:	4a4c      	ldr	r2, [pc, #304]	; (8102040 <HAL_DMA_Abort+0x5e4>)
 8101f10:	4293      	cmp	r3, r2
 8101f12:	d068      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	4a4a      	ldr	r2, [pc, #296]	; (8102044 <HAL_DMA_Abort+0x5e8>)
 8101f1a:	4293      	cmp	r3, r2
 8101f1c:	d063      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	4a49      	ldr	r2, [pc, #292]	; (8102048 <HAL_DMA_Abort+0x5ec>)
 8101f24:	4293      	cmp	r3, r2
 8101f26:	d05e      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	681b      	ldr	r3, [r3, #0]
 8101f2c:	4a47      	ldr	r2, [pc, #284]	; (810204c <HAL_DMA_Abort+0x5f0>)
 8101f2e:	4293      	cmp	r3, r2
 8101f30:	d059      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	681b      	ldr	r3, [r3, #0]
 8101f36:	4a46      	ldr	r2, [pc, #280]	; (8102050 <HAL_DMA_Abort+0x5f4>)
 8101f38:	4293      	cmp	r3, r2
 8101f3a:	d054      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	4a44      	ldr	r2, [pc, #272]	; (8102054 <HAL_DMA_Abort+0x5f8>)
 8101f42:	4293      	cmp	r3, r2
 8101f44:	d04f      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	4a43      	ldr	r2, [pc, #268]	; (8102058 <HAL_DMA_Abort+0x5fc>)
 8101f4c:	4293      	cmp	r3, r2
 8101f4e:	d04a      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	4a41      	ldr	r2, [pc, #260]	; (810205c <HAL_DMA_Abort+0x600>)
 8101f56:	4293      	cmp	r3, r2
 8101f58:	d045      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	4a40      	ldr	r2, [pc, #256]	; (8102060 <HAL_DMA_Abort+0x604>)
 8101f60:	4293      	cmp	r3, r2
 8101f62:	d040      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	4a3e      	ldr	r2, [pc, #248]	; (8102064 <HAL_DMA_Abort+0x608>)
 8101f6a:	4293      	cmp	r3, r2
 8101f6c:	d03b      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	681b      	ldr	r3, [r3, #0]
 8101f72:	4a3d      	ldr	r2, [pc, #244]	; (8102068 <HAL_DMA_Abort+0x60c>)
 8101f74:	4293      	cmp	r3, r2
 8101f76:	d036      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	4a3b      	ldr	r2, [pc, #236]	; (810206c <HAL_DMA_Abort+0x610>)
 8101f7e:	4293      	cmp	r3, r2
 8101f80:	d031      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	4a3a      	ldr	r2, [pc, #232]	; (8102070 <HAL_DMA_Abort+0x614>)
 8101f88:	4293      	cmp	r3, r2
 8101f8a:	d02c      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	4a38      	ldr	r2, [pc, #224]	; (8102074 <HAL_DMA_Abort+0x618>)
 8101f92:	4293      	cmp	r3, r2
 8101f94:	d027      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	4a37      	ldr	r2, [pc, #220]	; (8102078 <HAL_DMA_Abort+0x61c>)
 8101f9c:	4293      	cmp	r3, r2
 8101f9e:	d022      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	4a35      	ldr	r2, [pc, #212]	; (810207c <HAL_DMA_Abort+0x620>)
 8101fa6:	4293      	cmp	r3, r2
 8101fa8:	d01d      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	681b      	ldr	r3, [r3, #0]
 8101fae:	4a34      	ldr	r2, [pc, #208]	; (8102080 <HAL_DMA_Abort+0x624>)
 8101fb0:	4293      	cmp	r3, r2
 8101fb2:	d018      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	4a32      	ldr	r2, [pc, #200]	; (8102084 <HAL_DMA_Abort+0x628>)
 8101fba:	4293      	cmp	r3, r2
 8101fbc:	d013      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	4a31      	ldr	r2, [pc, #196]	; (8102088 <HAL_DMA_Abort+0x62c>)
 8101fc4:	4293      	cmp	r3, r2
 8101fc6:	d00e      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	4a2f      	ldr	r2, [pc, #188]	; (810208c <HAL_DMA_Abort+0x630>)
 8101fce:	4293      	cmp	r3, r2
 8101fd0:	d009      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	681b      	ldr	r3, [r3, #0]
 8101fd6:	4a2e      	ldr	r2, [pc, #184]	; (8102090 <HAL_DMA_Abort+0x634>)
 8101fd8:	4293      	cmp	r3, r2
 8101fda:	d004      	beq.n	8101fe6 <HAL_DMA_Abort+0x58a>
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	4a2c      	ldr	r2, [pc, #176]	; (8102094 <HAL_DMA_Abort+0x638>)
 8101fe2:	4293      	cmp	r3, r2
 8101fe4:	d101      	bne.n	8101fea <HAL_DMA_Abort+0x58e>
 8101fe6:	2301      	movs	r3, #1
 8101fe8:	e000      	b.n	8101fec <HAL_DMA_Abort+0x590>
 8101fea:	2300      	movs	r3, #0
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d015      	beq.n	810201c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101ff4:	687a      	ldr	r2, [r7, #4]
 8101ff6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101ff8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101ffe:	2b00      	cmp	r3, #0
 8102000:	d00c      	beq.n	810201c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102006:	681a      	ldr	r2, [r3, #0]
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810200c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102010:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102016:	687a      	ldr	r2, [r7, #4]
 8102018:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810201a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	2200      	movs	r2, #0
 8102020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	2201      	movs	r2, #1
 8102028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 810202c:	2300      	movs	r3, #0
}
 810202e:	4618      	mov	r0, r3
 8102030:	3718      	adds	r7, #24
 8102032:	46bd      	mov	sp, r7
 8102034:	bd80      	pop	{r7, pc}
 8102036:	bf00      	nop
 8102038:	40020010 	.word	0x40020010
 810203c:	40020028 	.word	0x40020028
 8102040:	40020040 	.word	0x40020040
 8102044:	40020058 	.word	0x40020058
 8102048:	40020070 	.word	0x40020070
 810204c:	40020088 	.word	0x40020088
 8102050:	400200a0 	.word	0x400200a0
 8102054:	400200b8 	.word	0x400200b8
 8102058:	40020410 	.word	0x40020410
 810205c:	40020428 	.word	0x40020428
 8102060:	40020440 	.word	0x40020440
 8102064:	40020458 	.word	0x40020458
 8102068:	40020470 	.word	0x40020470
 810206c:	40020488 	.word	0x40020488
 8102070:	400204a0 	.word	0x400204a0
 8102074:	400204b8 	.word	0x400204b8
 8102078:	58025408 	.word	0x58025408
 810207c:	5802541c 	.word	0x5802541c
 8102080:	58025430 	.word	0x58025430
 8102084:	58025444 	.word	0x58025444
 8102088:	58025458 	.word	0x58025458
 810208c:	5802546c 	.word	0x5802546c
 8102090:	58025480 	.word	0x58025480
 8102094:	58025494 	.word	0x58025494

08102098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102098:	b580      	push	{r7, lr}
 810209a:	b084      	sub	sp, #16
 810209c:	af00      	add	r7, sp, #0
 810209e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d101      	bne.n	81020aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81020a6:	2301      	movs	r3, #1
 81020a8:	e205      	b.n	81024b6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81020b0:	b2db      	uxtb	r3, r3
 81020b2:	2b02      	cmp	r3, #2
 81020b4:	d004      	beq.n	81020c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	2280      	movs	r2, #128	; 0x80
 81020ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81020bc:	2301      	movs	r3, #1
 81020be:	e1fa      	b.n	81024b6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	4a8c      	ldr	r2, [pc, #560]	; (81022f8 <HAL_DMA_Abort_IT+0x260>)
 81020c6:	4293      	cmp	r3, r2
 81020c8:	d04a      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	4a8b      	ldr	r2, [pc, #556]	; (81022fc <HAL_DMA_Abort_IT+0x264>)
 81020d0:	4293      	cmp	r3, r2
 81020d2:	d045      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	4a89      	ldr	r2, [pc, #548]	; (8102300 <HAL_DMA_Abort_IT+0x268>)
 81020da:	4293      	cmp	r3, r2
 81020dc:	d040      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	4a88      	ldr	r2, [pc, #544]	; (8102304 <HAL_DMA_Abort_IT+0x26c>)
 81020e4:	4293      	cmp	r3, r2
 81020e6:	d03b      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	4a86      	ldr	r2, [pc, #536]	; (8102308 <HAL_DMA_Abort_IT+0x270>)
 81020ee:	4293      	cmp	r3, r2
 81020f0:	d036      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	4a85      	ldr	r2, [pc, #532]	; (810230c <HAL_DMA_Abort_IT+0x274>)
 81020f8:	4293      	cmp	r3, r2
 81020fa:	d031      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	4a83      	ldr	r2, [pc, #524]	; (8102310 <HAL_DMA_Abort_IT+0x278>)
 8102102:	4293      	cmp	r3, r2
 8102104:	d02c      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	681b      	ldr	r3, [r3, #0]
 810210a:	4a82      	ldr	r2, [pc, #520]	; (8102314 <HAL_DMA_Abort_IT+0x27c>)
 810210c:	4293      	cmp	r3, r2
 810210e:	d027      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	4a80      	ldr	r2, [pc, #512]	; (8102318 <HAL_DMA_Abort_IT+0x280>)
 8102116:	4293      	cmp	r3, r2
 8102118:	d022      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	4a7f      	ldr	r2, [pc, #508]	; (810231c <HAL_DMA_Abort_IT+0x284>)
 8102120:	4293      	cmp	r3, r2
 8102122:	d01d      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	4a7d      	ldr	r2, [pc, #500]	; (8102320 <HAL_DMA_Abort_IT+0x288>)
 810212a:	4293      	cmp	r3, r2
 810212c:	d018      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	681b      	ldr	r3, [r3, #0]
 8102132:	4a7c      	ldr	r2, [pc, #496]	; (8102324 <HAL_DMA_Abort_IT+0x28c>)
 8102134:	4293      	cmp	r3, r2
 8102136:	d013      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	4a7a      	ldr	r2, [pc, #488]	; (8102328 <HAL_DMA_Abort_IT+0x290>)
 810213e:	4293      	cmp	r3, r2
 8102140:	d00e      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	4a79      	ldr	r2, [pc, #484]	; (810232c <HAL_DMA_Abort_IT+0x294>)
 8102148:	4293      	cmp	r3, r2
 810214a:	d009      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	4a77      	ldr	r2, [pc, #476]	; (8102330 <HAL_DMA_Abort_IT+0x298>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d004      	beq.n	8102160 <HAL_DMA_Abort_IT+0xc8>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	4a76      	ldr	r2, [pc, #472]	; (8102334 <HAL_DMA_Abort_IT+0x29c>)
 810215c:	4293      	cmp	r3, r2
 810215e:	d101      	bne.n	8102164 <HAL_DMA_Abort_IT+0xcc>
 8102160:	2301      	movs	r3, #1
 8102162:	e000      	b.n	8102166 <HAL_DMA_Abort_IT+0xce>
 8102164:	2300      	movs	r3, #0
 8102166:	2b00      	cmp	r3, #0
 8102168:	d065      	beq.n	8102236 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	2204      	movs	r2, #4
 810216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	4a60      	ldr	r2, [pc, #384]	; (81022f8 <HAL_DMA_Abort_IT+0x260>)
 8102178:	4293      	cmp	r3, r2
 810217a:	d04a      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	4a5e      	ldr	r2, [pc, #376]	; (81022fc <HAL_DMA_Abort_IT+0x264>)
 8102182:	4293      	cmp	r3, r2
 8102184:	d045      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	4a5d      	ldr	r2, [pc, #372]	; (8102300 <HAL_DMA_Abort_IT+0x268>)
 810218c:	4293      	cmp	r3, r2
 810218e:	d040      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	4a5b      	ldr	r2, [pc, #364]	; (8102304 <HAL_DMA_Abort_IT+0x26c>)
 8102196:	4293      	cmp	r3, r2
 8102198:	d03b      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	4a5a      	ldr	r2, [pc, #360]	; (8102308 <HAL_DMA_Abort_IT+0x270>)
 81021a0:	4293      	cmp	r3, r2
 81021a2:	d036      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	4a58      	ldr	r2, [pc, #352]	; (810230c <HAL_DMA_Abort_IT+0x274>)
 81021aa:	4293      	cmp	r3, r2
 81021ac:	d031      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	4a57      	ldr	r2, [pc, #348]	; (8102310 <HAL_DMA_Abort_IT+0x278>)
 81021b4:	4293      	cmp	r3, r2
 81021b6:	d02c      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	4a55      	ldr	r2, [pc, #340]	; (8102314 <HAL_DMA_Abort_IT+0x27c>)
 81021be:	4293      	cmp	r3, r2
 81021c0:	d027      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a54      	ldr	r2, [pc, #336]	; (8102318 <HAL_DMA_Abort_IT+0x280>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d022      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a52      	ldr	r2, [pc, #328]	; (810231c <HAL_DMA_Abort_IT+0x284>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d01d      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a51      	ldr	r2, [pc, #324]	; (8102320 <HAL_DMA_Abort_IT+0x288>)
 81021dc:	4293      	cmp	r3, r2
 81021de:	d018      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	4a4f      	ldr	r2, [pc, #316]	; (8102324 <HAL_DMA_Abort_IT+0x28c>)
 81021e6:	4293      	cmp	r3, r2
 81021e8:	d013      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a4e      	ldr	r2, [pc, #312]	; (8102328 <HAL_DMA_Abort_IT+0x290>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d00e      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a4c      	ldr	r2, [pc, #304]	; (810232c <HAL_DMA_Abort_IT+0x294>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d009      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a4b      	ldr	r2, [pc, #300]	; (8102330 <HAL_DMA_Abort_IT+0x298>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d004      	beq.n	8102212 <HAL_DMA_Abort_IT+0x17a>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a49      	ldr	r2, [pc, #292]	; (8102334 <HAL_DMA_Abort_IT+0x29c>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d108      	bne.n	8102224 <HAL_DMA_Abort_IT+0x18c>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	681a      	ldr	r2, [r3, #0]
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f022 0201 	bic.w	r2, r2, #1
 8102220:	601a      	str	r2, [r3, #0]
 8102222:	e147      	b.n	81024b4 <HAL_DMA_Abort_IT+0x41c>
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	681a      	ldr	r2, [r3, #0]
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	681b      	ldr	r3, [r3, #0]
 810222e:	f022 0201 	bic.w	r2, r2, #1
 8102232:	601a      	str	r2, [r3, #0]
 8102234:	e13e      	b.n	81024b4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	681a      	ldr	r2, [r3, #0]
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	f022 020e 	bic.w	r2, r2, #14
 8102244:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	4a2b      	ldr	r2, [pc, #172]	; (81022f8 <HAL_DMA_Abort_IT+0x260>)
 810224c:	4293      	cmp	r3, r2
 810224e:	d04a      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	4a29      	ldr	r2, [pc, #164]	; (81022fc <HAL_DMA_Abort_IT+0x264>)
 8102256:	4293      	cmp	r3, r2
 8102258:	d045      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	4a28      	ldr	r2, [pc, #160]	; (8102300 <HAL_DMA_Abort_IT+0x268>)
 8102260:	4293      	cmp	r3, r2
 8102262:	d040      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	4a26      	ldr	r2, [pc, #152]	; (8102304 <HAL_DMA_Abort_IT+0x26c>)
 810226a:	4293      	cmp	r3, r2
 810226c:	d03b      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	4a25      	ldr	r2, [pc, #148]	; (8102308 <HAL_DMA_Abort_IT+0x270>)
 8102274:	4293      	cmp	r3, r2
 8102276:	d036      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	4a23      	ldr	r2, [pc, #140]	; (810230c <HAL_DMA_Abort_IT+0x274>)
 810227e:	4293      	cmp	r3, r2
 8102280:	d031      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	681b      	ldr	r3, [r3, #0]
 8102286:	4a22      	ldr	r2, [pc, #136]	; (8102310 <HAL_DMA_Abort_IT+0x278>)
 8102288:	4293      	cmp	r3, r2
 810228a:	d02c      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	4a20      	ldr	r2, [pc, #128]	; (8102314 <HAL_DMA_Abort_IT+0x27c>)
 8102292:	4293      	cmp	r3, r2
 8102294:	d027      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	4a1f      	ldr	r2, [pc, #124]	; (8102318 <HAL_DMA_Abort_IT+0x280>)
 810229c:	4293      	cmp	r3, r2
 810229e:	d022      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	4a1d      	ldr	r2, [pc, #116]	; (810231c <HAL_DMA_Abort_IT+0x284>)
 81022a6:	4293      	cmp	r3, r2
 81022a8:	d01d      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	4a1c      	ldr	r2, [pc, #112]	; (8102320 <HAL_DMA_Abort_IT+0x288>)
 81022b0:	4293      	cmp	r3, r2
 81022b2:	d018      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	4a1a      	ldr	r2, [pc, #104]	; (8102324 <HAL_DMA_Abort_IT+0x28c>)
 81022ba:	4293      	cmp	r3, r2
 81022bc:	d013      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	4a19      	ldr	r2, [pc, #100]	; (8102328 <HAL_DMA_Abort_IT+0x290>)
 81022c4:	4293      	cmp	r3, r2
 81022c6:	d00e      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	4a17      	ldr	r2, [pc, #92]	; (810232c <HAL_DMA_Abort_IT+0x294>)
 81022ce:	4293      	cmp	r3, r2
 81022d0:	d009      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	4a16      	ldr	r2, [pc, #88]	; (8102330 <HAL_DMA_Abort_IT+0x298>)
 81022d8:	4293      	cmp	r3, r2
 81022da:	d004      	beq.n	81022e6 <HAL_DMA_Abort_IT+0x24e>
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	4a14      	ldr	r2, [pc, #80]	; (8102334 <HAL_DMA_Abort_IT+0x29c>)
 81022e2:	4293      	cmp	r3, r2
 81022e4:	d128      	bne.n	8102338 <HAL_DMA_Abort_IT+0x2a0>
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	681a      	ldr	r2, [r3, #0]
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	f022 0201 	bic.w	r2, r2, #1
 81022f4:	601a      	str	r2, [r3, #0]
 81022f6:	e027      	b.n	8102348 <HAL_DMA_Abort_IT+0x2b0>
 81022f8:	40020010 	.word	0x40020010
 81022fc:	40020028 	.word	0x40020028
 8102300:	40020040 	.word	0x40020040
 8102304:	40020058 	.word	0x40020058
 8102308:	40020070 	.word	0x40020070
 810230c:	40020088 	.word	0x40020088
 8102310:	400200a0 	.word	0x400200a0
 8102314:	400200b8 	.word	0x400200b8
 8102318:	40020410 	.word	0x40020410
 810231c:	40020428 	.word	0x40020428
 8102320:	40020440 	.word	0x40020440
 8102324:	40020458 	.word	0x40020458
 8102328:	40020470 	.word	0x40020470
 810232c:	40020488 	.word	0x40020488
 8102330:	400204a0 	.word	0x400204a0
 8102334:	400204b8 	.word	0x400204b8
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	681a      	ldr	r2, [r3, #0]
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	f022 0201 	bic.w	r2, r2, #1
 8102346:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	4a5c      	ldr	r2, [pc, #368]	; (81024c0 <HAL_DMA_Abort_IT+0x428>)
 810234e:	4293      	cmp	r3, r2
 8102350:	d072      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	4a5b      	ldr	r2, [pc, #364]	; (81024c4 <HAL_DMA_Abort_IT+0x42c>)
 8102358:	4293      	cmp	r3, r2
 810235a:	d06d      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	4a59      	ldr	r2, [pc, #356]	; (81024c8 <HAL_DMA_Abort_IT+0x430>)
 8102362:	4293      	cmp	r3, r2
 8102364:	d068      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	4a58      	ldr	r2, [pc, #352]	; (81024cc <HAL_DMA_Abort_IT+0x434>)
 810236c:	4293      	cmp	r3, r2
 810236e:	d063      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	4a56      	ldr	r2, [pc, #344]	; (81024d0 <HAL_DMA_Abort_IT+0x438>)
 8102376:	4293      	cmp	r3, r2
 8102378:	d05e      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	681b      	ldr	r3, [r3, #0]
 810237e:	4a55      	ldr	r2, [pc, #340]	; (81024d4 <HAL_DMA_Abort_IT+0x43c>)
 8102380:	4293      	cmp	r3, r2
 8102382:	d059      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	681b      	ldr	r3, [r3, #0]
 8102388:	4a53      	ldr	r2, [pc, #332]	; (81024d8 <HAL_DMA_Abort_IT+0x440>)
 810238a:	4293      	cmp	r3, r2
 810238c:	d054      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	4a52      	ldr	r2, [pc, #328]	; (81024dc <HAL_DMA_Abort_IT+0x444>)
 8102394:	4293      	cmp	r3, r2
 8102396:	d04f      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	4a50      	ldr	r2, [pc, #320]	; (81024e0 <HAL_DMA_Abort_IT+0x448>)
 810239e:	4293      	cmp	r3, r2
 81023a0:	d04a      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	681b      	ldr	r3, [r3, #0]
 81023a6:	4a4f      	ldr	r2, [pc, #316]	; (81024e4 <HAL_DMA_Abort_IT+0x44c>)
 81023a8:	4293      	cmp	r3, r2
 81023aa:	d045      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	681b      	ldr	r3, [r3, #0]
 81023b0:	4a4d      	ldr	r2, [pc, #308]	; (81024e8 <HAL_DMA_Abort_IT+0x450>)
 81023b2:	4293      	cmp	r3, r2
 81023b4:	d040      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a4c      	ldr	r2, [pc, #304]	; (81024ec <HAL_DMA_Abort_IT+0x454>)
 81023bc:	4293      	cmp	r3, r2
 81023be:	d03b      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	4a4a      	ldr	r2, [pc, #296]	; (81024f0 <HAL_DMA_Abort_IT+0x458>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d036      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	4a49      	ldr	r2, [pc, #292]	; (81024f4 <HAL_DMA_Abort_IT+0x45c>)
 81023d0:	4293      	cmp	r3, r2
 81023d2:	d031      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	4a47      	ldr	r2, [pc, #284]	; (81024f8 <HAL_DMA_Abort_IT+0x460>)
 81023da:	4293      	cmp	r3, r2
 81023dc:	d02c      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	4a46      	ldr	r2, [pc, #280]	; (81024fc <HAL_DMA_Abort_IT+0x464>)
 81023e4:	4293      	cmp	r3, r2
 81023e6:	d027      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	4a44      	ldr	r2, [pc, #272]	; (8102500 <HAL_DMA_Abort_IT+0x468>)
 81023ee:	4293      	cmp	r3, r2
 81023f0:	d022      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	4a43      	ldr	r2, [pc, #268]	; (8102504 <HAL_DMA_Abort_IT+0x46c>)
 81023f8:	4293      	cmp	r3, r2
 81023fa:	d01d      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	4a41      	ldr	r2, [pc, #260]	; (8102508 <HAL_DMA_Abort_IT+0x470>)
 8102402:	4293      	cmp	r3, r2
 8102404:	d018      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	4a40      	ldr	r2, [pc, #256]	; (810250c <HAL_DMA_Abort_IT+0x474>)
 810240c:	4293      	cmp	r3, r2
 810240e:	d013      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	4a3e      	ldr	r2, [pc, #248]	; (8102510 <HAL_DMA_Abort_IT+0x478>)
 8102416:	4293      	cmp	r3, r2
 8102418:	d00e      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	4a3d      	ldr	r2, [pc, #244]	; (8102514 <HAL_DMA_Abort_IT+0x47c>)
 8102420:	4293      	cmp	r3, r2
 8102422:	d009      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	4a3b      	ldr	r2, [pc, #236]	; (8102518 <HAL_DMA_Abort_IT+0x480>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d004      	beq.n	8102438 <HAL_DMA_Abort_IT+0x3a0>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	4a3a      	ldr	r2, [pc, #232]	; (810251c <HAL_DMA_Abort_IT+0x484>)
 8102434:	4293      	cmp	r3, r2
 8102436:	d101      	bne.n	810243c <HAL_DMA_Abort_IT+0x3a4>
 8102438:	2301      	movs	r3, #1
 810243a:	e000      	b.n	810243e <HAL_DMA_Abort_IT+0x3a6>
 810243c:	2300      	movs	r3, #0
 810243e:	2b00      	cmp	r3, #0
 8102440:	d028      	beq.n	8102494 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102446:	681a      	ldr	r2, [r3, #0]
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102450:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102456:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810245c:	f003 031f 	and.w	r3, r3, #31
 8102460:	2201      	movs	r2, #1
 8102462:	409a      	lsls	r2, r3
 8102464:	68fb      	ldr	r3, [r7, #12]
 8102466:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810246c:	687a      	ldr	r2, [r7, #4]
 810246e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102470:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102476:	2b00      	cmp	r3, #0
 8102478:	d00c      	beq.n	8102494 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810247e:	681a      	ldr	r2, [r3, #0]
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102488:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810248e:	687a      	ldr	r2, [r7, #4]
 8102490:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102492:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	2200      	movs	r2, #0
 8102498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	2201      	movs	r2, #1
 81024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d003      	beq.n	81024b4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024b0:	6878      	ldr	r0, [r7, #4]
 81024b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81024b4:	2300      	movs	r3, #0
}
 81024b6:	4618      	mov	r0, r3
 81024b8:	3710      	adds	r7, #16
 81024ba:	46bd      	mov	sp, r7
 81024bc:	bd80      	pop	{r7, pc}
 81024be:	bf00      	nop
 81024c0:	40020010 	.word	0x40020010
 81024c4:	40020028 	.word	0x40020028
 81024c8:	40020040 	.word	0x40020040
 81024cc:	40020058 	.word	0x40020058
 81024d0:	40020070 	.word	0x40020070
 81024d4:	40020088 	.word	0x40020088
 81024d8:	400200a0 	.word	0x400200a0
 81024dc:	400200b8 	.word	0x400200b8
 81024e0:	40020410 	.word	0x40020410
 81024e4:	40020428 	.word	0x40020428
 81024e8:	40020440 	.word	0x40020440
 81024ec:	40020458 	.word	0x40020458
 81024f0:	40020470 	.word	0x40020470
 81024f4:	40020488 	.word	0x40020488
 81024f8:	400204a0 	.word	0x400204a0
 81024fc:	400204b8 	.word	0x400204b8
 8102500:	58025408 	.word	0x58025408
 8102504:	5802541c 	.word	0x5802541c
 8102508:	58025430 	.word	0x58025430
 810250c:	58025444 	.word	0x58025444
 8102510:	58025458 	.word	0x58025458
 8102514:	5802546c 	.word	0x5802546c
 8102518:	58025480 	.word	0x58025480
 810251c:	58025494 	.word	0x58025494

08102520 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102520:	b580      	push	{r7, lr}
 8102522:	b08a      	sub	sp, #40	; 0x28
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102528:	2300      	movs	r3, #0
 810252a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 810252c:	4b67      	ldr	r3, [pc, #412]	; (81026cc <HAL_DMA_IRQHandler+0x1ac>)
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	4a67      	ldr	r2, [pc, #412]	; (81026d0 <HAL_DMA_IRQHandler+0x1b0>)
 8102532:	fba2 2303 	umull	r2, r3, r2, r3
 8102536:	0a9b      	lsrs	r3, r3, #10
 8102538:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810253e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102544:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102546:	6a3b      	ldr	r3, [r7, #32]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 810254c:	69fb      	ldr	r3, [r7, #28]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a5f      	ldr	r2, [pc, #380]	; (81026d4 <HAL_DMA_IRQHandler+0x1b4>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d04a      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a5d      	ldr	r2, [pc, #372]	; (81026d8 <HAL_DMA_IRQHandler+0x1b8>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d045      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	4a5c      	ldr	r2, [pc, #368]	; (81026dc <HAL_DMA_IRQHandler+0x1bc>)
 810256c:	4293      	cmp	r3, r2
 810256e:	d040      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4a5a      	ldr	r2, [pc, #360]	; (81026e0 <HAL_DMA_IRQHandler+0x1c0>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d03b      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	4a59      	ldr	r2, [pc, #356]	; (81026e4 <HAL_DMA_IRQHandler+0x1c4>)
 8102580:	4293      	cmp	r3, r2
 8102582:	d036      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	4a57      	ldr	r2, [pc, #348]	; (81026e8 <HAL_DMA_IRQHandler+0x1c8>)
 810258a:	4293      	cmp	r3, r2
 810258c:	d031      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	4a56      	ldr	r2, [pc, #344]	; (81026ec <HAL_DMA_IRQHandler+0x1cc>)
 8102594:	4293      	cmp	r3, r2
 8102596:	d02c      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	4a54      	ldr	r2, [pc, #336]	; (81026f0 <HAL_DMA_IRQHandler+0x1d0>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d027      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	4a53      	ldr	r2, [pc, #332]	; (81026f4 <HAL_DMA_IRQHandler+0x1d4>)
 81025a8:	4293      	cmp	r3, r2
 81025aa:	d022      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	4a51      	ldr	r2, [pc, #324]	; (81026f8 <HAL_DMA_IRQHandler+0x1d8>)
 81025b2:	4293      	cmp	r3, r2
 81025b4:	d01d      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	4a50      	ldr	r2, [pc, #320]	; (81026fc <HAL_DMA_IRQHandler+0x1dc>)
 81025bc:	4293      	cmp	r3, r2
 81025be:	d018      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	4a4e      	ldr	r2, [pc, #312]	; (8102700 <HAL_DMA_IRQHandler+0x1e0>)
 81025c6:	4293      	cmp	r3, r2
 81025c8:	d013      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	4a4d      	ldr	r2, [pc, #308]	; (8102704 <HAL_DMA_IRQHandler+0x1e4>)
 81025d0:	4293      	cmp	r3, r2
 81025d2:	d00e      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	681b      	ldr	r3, [r3, #0]
 81025d8:	4a4b      	ldr	r2, [pc, #300]	; (8102708 <HAL_DMA_IRQHandler+0x1e8>)
 81025da:	4293      	cmp	r3, r2
 81025dc:	d009      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	681b      	ldr	r3, [r3, #0]
 81025e2:	4a4a      	ldr	r2, [pc, #296]	; (810270c <HAL_DMA_IRQHandler+0x1ec>)
 81025e4:	4293      	cmp	r3, r2
 81025e6:	d004      	beq.n	81025f2 <HAL_DMA_IRQHandler+0xd2>
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	4a48      	ldr	r2, [pc, #288]	; (8102710 <HAL_DMA_IRQHandler+0x1f0>)
 81025ee:	4293      	cmp	r3, r2
 81025f0:	d101      	bne.n	81025f6 <HAL_DMA_IRQHandler+0xd6>
 81025f2:	2301      	movs	r3, #1
 81025f4:	e000      	b.n	81025f8 <HAL_DMA_IRQHandler+0xd8>
 81025f6:	2300      	movs	r3, #0
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	f000 842b 	beq.w	8102e54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102602:	f003 031f 	and.w	r3, r3, #31
 8102606:	2208      	movs	r2, #8
 8102608:	409a      	lsls	r2, r3
 810260a:	69bb      	ldr	r3, [r7, #24]
 810260c:	4013      	ands	r3, r2
 810260e:	2b00      	cmp	r3, #0
 8102610:	f000 80a2 	beq.w	8102758 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	4a2e      	ldr	r2, [pc, #184]	; (81026d4 <HAL_DMA_IRQHandler+0x1b4>)
 810261a:	4293      	cmp	r3, r2
 810261c:	d04a      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	681b      	ldr	r3, [r3, #0]
 8102622:	4a2d      	ldr	r2, [pc, #180]	; (81026d8 <HAL_DMA_IRQHandler+0x1b8>)
 8102624:	4293      	cmp	r3, r2
 8102626:	d045      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	4a2b      	ldr	r2, [pc, #172]	; (81026dc <HAL_DMA_IRQHandler+0x1bc>)
 810262e:	4293      	cmp	r3, r2
 8102630:	d040      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	681b      	ldr	r3, [r3, #0]
 8102636:	4a2a      	ldr	r2, [pc, #168]	; (81026e0 <HAL_DMA_IRQHandler+0x1c0>)
 8102638:	4293      	cmp	r3, r2
 810263a:	d03b      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	4a28      	ldr	r2, [pc, #160]	; (81026e4 <HAL_DMA_IRQHandler+0x1c4>)
 8102642:	4293      	cmp	r3, r2
 8102644:	d036      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	4a27      	ldr	r2, [pc, #156]	; (81026e8 <HAL_DMA_IRQHandler+0x1c8>)
 810264c:	4293      	cmp	r3, r2
 810264e:	d031      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	4a25      	ldr	r2, [pc, #148]	; (81026ec <HAL_DMA_IRQHandler+0x1cc>)
 8102656:	4293      	cmp	r3, r2
 8102658:	d02c      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	4a24      	ldr	r2, [pc, #144]	; (81026f0 <HAL_DMA_IRQHandler+0x1d0>)
 8102660:	4293      	cmp	r3, r2
 8102662:	d027      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	4a22      	ldr	r2, [pc, #136]	; (81026f4 <HAL_DMA_IRQHandler+0x1d4>)
 810266a:	4293      	cmp	r3, r2
 810266c:	d022      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	681b      	ldr	r3, [r3, #0]
 8102672:	4a21      	ldr	r2, [pc, #132]	; (81026f8 <HAL_DMA_IRQHandler+0x1d8>)
 8102674:	4293      	cmp	r3, r2
 8102676:	d01d      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	4a1f      	ldr	r2, [pc, #124]	; (81026fc <HAL_DMA_IRQHandler+0x1dc>)
 810267e:	4293      	cmp	r3, r2
 8102680:	d018      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	4a1e      	ldr	r2, [pc, #120]	; (8102700 <HAL_DMA_IRQHandler+0x1e0>)
 8102688:	4293      	cmp	r3, r2
 810268a:	d013      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	4a1c      	ldr	r2, [pc, #112]	; (8102704 <HAL_DMA_IRQHandler+0x1e4>)
 8102692:	4293      	cmp	r3, r2
 8102694:	d00e      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	681b      	ldr	r3, [r3, #0]
 810269a:	4a1b      	ldr	r2, [pc, #108]	; (8102708 <HAL_DMA_IRQHandler+0x1e8>)
 810269c:	4293      	cmp	r3, r2
 810269e:	d009      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	4a19      	ldr	r2, [pc, #100]	; (810270c <HAL_DMA_IRQHandler+0x1ec>)
 81026a6:	4293      	cmp	r3, r2
 81026a8:	d004      	beq.n	81026b4 <HAL_DMA_IRQHandler+0x194>
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	681b      	ldr	r3, [r3, #0]
 81026ae:	4a18      	ldr	r2, [pc, #96]	; (8102710 <HAL_DMA_IRQHandler+0x1f0>)
 81026b0:	4293      	cmp	r3, r2
 81026b2:	d12f      	bne.n	8102714 <HAL_DMA_IRQHandler+0x1f4>
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	f003 0304 	and.w	r3, r3, #4
 81026be:	2b00      	cmp	r3, #0
 81026c0:	bf14      	ite	ne
 81026c2:	2301      	movne	r3, #1
 81026c4:	2300      	moveq	r3, #0
 81026c6:	b2db      	uxtb	r3, r3
 81026c8:	e02e      	b.n	8102728 <HAL_DMA_IRQHandler+0x208>
 81026ca:	bf00      	nop
 81026cc:	10000000 	.word	0x10000000
 81026d0:	1b4e81b5 	.word	0x1b4e81b5
 81026d4:	40020010 	.word	0x40020010
 81026d8:	40020028 	.word	0x40020028
 81026dc:	40020040 	.word	0x40020040
 81026e0:	40020058 	.word	0x40020058
 81026e4:	40020070 	.word	0x40020070
 81026e8:	40020088 	.word	0x40020088
 81026ec:	400200a0 	.word	0x400200a0
 81026f0:	400200b8 	.word	0x400200b8
 81026f4:	40020410 	.word	0x40020410
 81026f8:	40020428 	.word	0x40020428
 81026fc:	40020440 	.word	0x40020440
 8102700:	40020458 	.word	0x40020458
 8102704:	40020470 	.word	0x40020470
 8102708:	40020488 	.word	0x40020488
 810270c:	400204a0 	.word	0x400204a0
 8102710:	400204b8 	.word	0x400204b8
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	681b      	ldr	r3, [r3, #0]
 810271a:	f003 0308 	and.w	r3, r3, #8
 810271e:	2b00      	cmp	r3, #0
 8102720:	bf14      	ite	ne
 8102722:	2301      	movne	r3, #1
 8102724:	2300      	moveq	r3, #0
 8102726:	b2db      	uxtb	r3, r3
 8102728:	2b00      	cmp	r3, #0
 810272a:	d015      	beq.n	8102758 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	681a      	ldr	r2, [r3, #0]
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	f022 0204 	bic.w	r2, r2, #4
 810273a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102740:	f003 031f 	and.w	r3, r3, #31
 8102744:	2208      	movs	r2, #8
 8102746:	409a      	lsls	r2, r3
 8102748:	6a3b      	ldr	r3, [r7, #32]
 810274a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102750:	f043 0201 	orr.w	r2, r3, #1
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810275c:	f003 031f 	and.w	r3, r3, #31
 8102760:	69ba      	ldr	r2, [r7, #24]
 8102762:	fa22 f303 	lsr.w	r3, r2, r3
 8102766:	f003 0301 	and.w	r3, r3, #1
 810276a:	2b00      	cmp	r3, #0
 810276c:	d06e      	beq.n	810284c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	4a69      	ldr	r2, [pc, #420]	; (8102918 <HAL_DMA_IRQHandler+0x3f8>)
 8102774:	4293      	cmp	r3, r2
 8102776:	d04a      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	4a67      	ldr	r2, [pc, #412]	; (810291c <HAL_DMA_IRQHandler+0x3fc>)
 810277e:	4293      	cmp	r3, r2
 8102780:	d045      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	4a66      	ldr	r2, [pc, #408]	; (8102920 <HAL_DMA_IRQHandler+0x400>)
 8102788:	4293      	cmp	r3, r2
 810278a:	d040      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	4a64      	ldr	r2, [pc, #400]	; (8102924 <HAL_DMA_IRQHandler+0x404>)
 8102792:	4293      	cmp	r3, r2
 8102794:	d03b      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	4a63      	ldr	r2, [pc, #396]	; (8102928 <HAL_DMA_IRQHandler+0x408>)
 810279c:	4293      	cmp	r3, r2
 810279e:	d036      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	4a61      	ldr	r2, [pc, #388]	; (810292c <HAL_DMA_IRQHandler+0x40c>)
 81027a6:	4293      	cmp	r3, r2
 81027a8:	d031      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	4a60      	ldr	r2, [pc, #384]	; (8102930 <HAL_DMA_IRQHandler+0x410>)
 81027b0:	4293      	cmp	r3, r2
 81027b2:	d02c      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	681b      	ldr	r3, [r3, #0]
 81027b8:	4a5e      	ldr	r2, [pc, #376]	; (8102934 <HAL_DMA_IRQHandler+0x414>)
 81027ba:	4293      	cmp	r3, r2
 81027bc:	d027      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	4a5d      	ldr	r2, [pc, #372]	; (8102938 <HAL_DMA_IRQHandler+0x418>)
 81027c4:	4293      	cmp	r3, r2
 81027c6:	d022      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	681b      	ldr	r3, [r3, #0]
 81027cc:	4a5b      	ldr	r2, [pc, #364]	; (810293c <HAL_DMA_IRQHandler+0x41c>)
 81027ce:	4293      	cmp	r3, r2
 81027d0:	d01d      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	4a5a      	ldr	r2, [pc, #360]	; (8102940 <HAL_DMA_IRQHandler+0x420>)
 81027d8:	4293      	cmp	r3, r2
 81027da:	d018      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	4a58      	ldr	r2, [pc, #352]	; (8102944 <HAL_DMA_IRQHandler+0x424>)
 81027e2:	4293      	cmp	r3, r2
 81027e4:	d013      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	4a57      	ldr	r2, [pc, #348]	; (8102948 <HAL_DMA_IRQHandler+0x428>)
 81027ec:	4293      	cmp	r3, r2
 81027ee:	d00e      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	4a55      	ldr	r2, [pc, #340]	; (810294c <HAL_DMA_IRQHandler+0x42c>)
 81027f6:	4293      	cmp	r3, r2
 81027f8:	d009      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	4a54      	ldr	r2, [pc, #336]	; (8102950 <HAL_DMA_IRQHandler+0x430>)
 8102800:	4293      	cmp	r3, r2
 8102802:	d004      	beq.n	810280e <HAL_DMA_IRQHandler+0x2ee>
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	4a52      	ldr	r2, [pc, #328]	; (8102954 <HAL_DMA_IRQHandler+0x434>)
 810280a:	4293      	cmp	r3, r2
 810280c:	d10a      	bne.n	8102824 <HAL_DMA_IRQHandler+0x304>
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	695b      	ldr	r3, [r3, #20]
 8102814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102818:	2b00      	cmp	r3, #0
 810281a:	bf14      	ite	ne
 810281c:	2301      	movne	r3, #1
 810281e:	2300      	moveq	r3, #0
 8102820:	b2db      	uxtb	r3, r3
 8102822:	e003      	b.n	810282c <HAL_DMA_IRQHandler+0x30c>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	2300      	movs	r3, #0
 810282c:	2b00      	cmp	r3, #0
 810282e:	d00d      	beq.n	810284c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102834:	f003 031f 	and.w	r3, r3, #31
 8102838:	2201      	movs	r2, #1
 810283a:	409a      	lsls	r2, r3
 810283c:	6a3b      	ldr	r3, [r7, #32]
 810283e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102844:	f043 0202 	orr.w	r2, r3, #2
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102850:	f003 031f 	and.w	r3, r3, #31
 8102854:	2204      	movs	r2, #4
 8102856:	409a      	lsls	r2, r3
 8102858:	69bb      	ldr	r3, [r7, #24]
 810285a:	4013      	ands	r3, r2
 810285c:	2b00      	cmp	r3, #0
 810285e:	f000 808f 	beq.w	8102980 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	4a2c      	ldr	r2, [pc, #176]	; (8102918 <HAL_DMA_IRQHandler+0x3f8>)
 8102868:	4293      	cmp	r3, r2
 810286a:	d04a      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	4a2a      	ldr	r2, [pc, #168]	; (810291c <HAL_DMA_IRQHandler+0x3fc>)
 8102872:	4293      	cmp	r3, r2
 8102874:	d045      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a29      	ldr	r2, [pc, #164]	; (8102920 <HAL_DMA_IRQHandler+0x400>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d040      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a27      	ldr	r2, [pc, #156]	; (8102924 <HAL_DMA_IRQHandler+0x404>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d03b      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a26      	ldr	r2, [pc, #152]	; (8102928 <HAL_DMA_IRQHandler+0x408>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d036      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a24      	ldr	r2, [pc, #144]	; (810292c <HAL_DMA_IRQHandler+0x40c>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d031      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	4a23      	ldr	r2, [pc, #140]	; (8102930 <HAL_DMA_IRQHandler+0x410>)
 81028a4:	4293      	cmp	r3, r2
 81028a6:	d02c      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	4a21      	ldr	r2, [pc, #132]	; (8102934 <HAL_DMA_IRQHandler+0x414>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	d027      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	4a20      	ldr	r2, [pc, #128]	; (8102938 <HAL_DMA_IRQHandler+0x418>)
 81028b8:	4293      	cmp	r3, r2
 81028ba:	d022      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	4a1e      	ldr	r2, [pc, #120]	; (810293c <HAL_DMA_IRQHandler+0x41c>)
 81028c2:	4293      	cmp	r3, r2
 81028c4:	d01d      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	681b      	ldr	r3, [r3, #0]
 81028ca:	4a1d      	ldr	r2, [pc, #116]	; (8102940 <HAL_DMA_IRQHandler+0x420>)
 81028cc:	4293      	cmp	r3, r2
 81028ce:	d018      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	681b      	ldr	r3, [r3, #0]
 81028d4:	4a1b      	ldr	r2, [pc, #108]	; (8102944 <HAL_DMA_IRQHandler+0x424>)
 81028d6:	4293      	cmp	r3, r2
 81028d8:	d013      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	681b      	ldr	r3, [r3, #0]
 81028de:	4a1a      	ldr	r2, [pc, #104]	; (8102948 <HAL_DMA_IRQHandler+0x428>)
 81028e0:	4293      	cmp	r3, r2
 81028e2:	d00e      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	4a18      	ldr	r2, [pc, #96]	; (810294c <HAL_DMA_IRQHandler+0x42c>)
 81028ea:	4293      	cmp	r3, r2
 81028ec:	d009      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	4a17      	ldr	r2, [pc, #92]	; (8102950 <HAL_DMA_IRQHandler+0x430>)
 81028f4:	4293      	cmp	r3, r2
 81028f6:	d004      	beq.n	8102902 <HAL_DMA_IRQHandler+0x3e2>
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	4a15      	ldr	r2, [pc, #84]	; (8102954 <HAL_DMA_IRQHandler+0x434>)
 81028fe:	4293      	cmp	r3, r2
 8102900:	d12a      	bne.n	8102958 <HAL_DMA_IRQHandler+0x438>
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	f003 0302 	and.w	r3, r3, #2
 810290c:	2b00      	cmp	r3, #0
 810290e:	bf14      	ite	ne
 8102910:	2301      	movne	r3, #1
 8102912:	2300      	moveq	r3, #0
 8102914:	b2db      	uxtb	r3, r3
 8102916:	e023      	b.n	8102960 <HAL_DMA_IRQHandler+0x440>
 8102918:	40020010 	.word	0x40020010
 810291c:	40020028 	.word	0x40020028
 8102920:	40020040 	.word	0x40020040
 8102924:	40020058 	.word	0x40020058
 8102928:	40020070 	.word	0x40020070
 810292c:	40020088 	.word	0x40020088
 8102930:	400200a0 	.word	0x400200a0
 8102934:	400200b8 	.word	0x400200b8
 8102938:	40020410 	.word	0x40020410
 810293c:	40020428 	.word	0x40020428
 8102940:	40020440 	.word	0x40020440
 8102944:	40020458 	.word	0x40020458
 8102948:	40020470 	.word	0x40020470
 810294c:	40020488 	.word	0x40020488
 8102950:	400204a0 	.word	0x400204a0
 8102954:	400204b8 	.word	0x400204b8
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	2300      	movs	r3, #0
 8102960:	2b00      	cmp	r3, #0
 8102962:	d00d      	beq.n	8102980 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102968:	f003 031f 	and.w	r3, r3, #31
 810296c:	2204      	movs	r2, #4
 810296e:	409a      	lsls	r2, r3
 8102970:	6a3b      	ldr	r3, [r7, #32]
 8102972:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102978:	f043 0204 	orr.w	r2, r3, #4
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102984:	f003 031f 	and.w	r3, r3, #31
 8102988:	2210      	movs	r2, #16
 810298a:	409a      	lsls	r2, r3
 810298c:	69bb      	ldr	r3, [r7, #24]
 810298e:	4013      	ands	r3, r2
 8102990:	2b00      	cmp	r3, #0
 8102992:	f000 80a6 	beq.w	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a85      	ldr	r2, [pc, #532]	; (8102bb0 <HAL_DMA_IRQHandler+0x690>)
 810299c:	4293      	cmp	r3, r2
 810299e:	d04a      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	4a83      	ldr	r2, [pc, #524]	; (8102bb4 <HAL_DMA_IRQHandler+0x694>)
 81029a6:	4293      	cmp	r3, r2
 81029a8:	d045      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	4a82      	ldr	r2, [pc, #520]	; (8102bb8 <HAL_DMA_IRQHandler+0x698>)
 81029b0:	4293      	cmp	r3, r2
 81029b2:	d040      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	4a80      	ldr	r2, [pc, #512]	; (8102bbc <HAL_DMA_IRQHandler+0x69c>)
 81029ba:	4293      	cmp	r3, r2
 81029bc:	d03b      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	4a7f      	ldr	r2, [pc, #508]	; (8102bc0 <HAL_DMA_IRQHandler+0x6a0>)
 81029c4:	4293      	cmp	r3, r2
 81029c6:	d036      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	4a7d      	ldr	r2, [pc, #500]	; (8102bc4 <HAL_DMA_IRQHandler+0x6a4>)
 81029ce:	4293      	cmp	r3, r2
 81029d0:	d031      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	4a7c      	ldr	r2, [pc, #496]	; (8102bc8 <HAL_DMA_IRQHandler+0x6a8>)
 81029d8:	4293      	cmp	r3, r2
 81029da:	d02c      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a7a      	ldr	r2, [pc, #488]	; (8102bcc <HAL_DMA_IRQHandler+0x6ac>)
 81029e2:	4293      	cmp	r3, r2
 81029e4:	d027      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	4a79      	ldr	r2, [pc, #484]	; (8102bd0 <HAL_DMA_IRQHandler+0x6b0>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d022      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4a77      	ldr	r2, [pc, #476]	; (8102bd4 <HAL_DMA_IRQHandler+0x6b4>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d01d      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	4a76      	ldr	r2, [pc, #472]	; (8102bd8 <HAL_DMA_IRQHandler+0x6b8>)
 8102a00:	4293      	cmp	r3, r2
 8102a02:	d018      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	4a74      	ldr	r2, [pc, #464]	; (8102bdc <HAL_DMA_IRQHandler+0x6bc>)
 8102a0a:	4293      	cmp	r3, r2
 8102a0c:	d013      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	4a73      	ldr	r2, [pc, #460]	; (8102be0 <HAL_DMA_IRQHandler+0x6c0>)
 8102a14:	4293      	cmp	r3, r2
 8102a16:	d00e      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	4a71      	ldr	r2, [pc, #452]	; (8102be4 <HAL_DMA_IRQHandler+0x6c4>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d009      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	4a70      	ldr	r2, [pc, #448]	; (8102be8 <HAL_DMA_IRQHandler+0x6c8>)
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d004      	beq.n	8102a36 <HAL_DMA_IRQHandler+0x516>
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4a6e      	ldr	r2, [pc, #440]	; (8102bec <HAL_DMA_IRQHandler+0x6cc>)
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d10a      	bne.n	8102a4c <HAL_DMA_IRQHandler+0x52c>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	f003 0308 	and.w	r3, r3, #8
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	bf14      	ite	ne
 8102a44:	2301      	movne	r3, #1
 8102a46:	2300      	moveq	r3, #0
 8102a48:	b2db      	uxtb	r3, r3
 8102a4a:	e009      	b.n	8102a60 <HAL_DMA_IRQHandler+0x540>
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	f003 0304 	and.w	r3, r3, #4
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	bf14      	ite	ne
 8102a5a:	2301      	movne	r3, #1
 8102a5c:	2300      	moveq	r3, #0
 8102a5e:	b2db      	uxtb	r3, r3
 8102a60:	2b00      	cmp	r3, #0
 8102a62:	d03e      	beq.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a68:	f003 031f 	and.w	r3, r3, #31
 8102a6c:	2210      	movs	r2, #16
 8102a6e:	409a      	lsls	r2, r3
 8102a70:	6a3b      	ldr	r3, [r7, #32]
 8102a72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	d018      	beq.n	8102ab4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	d108      	bne.n	8102aa2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d024      	beq.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a9c:	6878      	ldr	r0, [r7, #4]
 8102a9e:	4798      	blx	r3
 8102aa0:	e01f      	b.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102aa6:	2b00      	cmp	r3, #0
 8102aa8:	d01b      	beq.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102aae:	6878      	ldr	r0, [r7, #4]
 8102ab0:	4798      	blx	r3
 8102ab2:	e016      	b.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d107      	bne.n	8102ad2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	681a      	ldr	r2, [r3, #0]
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	f022 0208 	bic.w	r2, r2, #8
 8102ad0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ad6:	2b00      	cmp	r3, #0
 8102ad8:	d003      	beq.n	8102ae2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ade:	6878      	ldr	r0, [r7, #4]
 8102ae0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ae6:	f003 031f 	and.w	r3, r3, #31
 8102aea:	2220      	movs	r2, #32
 8102aec:	409a      	lsls	r2, r3
 8102aee:	69bb      	ldr	r3, [r7, #24]
 8102af0:	4013      	ands	r3, r2
 8102af2:	2b00      	cmp	r3, #0
 8102af4:	f000 8110 	beq.w	8102d18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	4a2c      	ldr	r2, [pc, #176]	; (8102bb0 <HAL_DMA_IRQHandler+0x690>)
 8102afe:	4293      	cmp	r3, r2
 8102b00:	d04a      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	4a2b      	ldr	r2, [pc, #172]	; (8102bb4 <HAL_DMA_IRQHandler+0x694>)
 8102b08:	4293      	cmp	r3, r2
 8102b0a:	d045      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	4a29      	ldr	r2, [pc, #164]	; (8102bb8 <HAL_DMA_IRQHandler+0x698>)
 8102b12:	4293      	cmp	r3, r2
 8102b14:	d040      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	4a28      	ldr	r2, [pc, #160]	; (8102bbc <HAL_DMA_IRQHandler+0x69c>)
 8102b1c:	4293      	cmp	r3, r2
 8102b1e:	d03b      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	681b      	ldr	r3, [r3, #0]
 8102b24:	4a26      	ldr	r2, [pc, #152]	; (8102bc0 <HAL_DMA_IRQHandler+0x6a0>)
 8102b26:	4293      	cmp	r3, r2
 8102b28:	d036      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	4a25      	ldr	r2, [pc, #148]	; (8102bc4 <HAL_DMA_IRQHandler+0x6a4>)
 8102b30:	4293      	cmp	r3, r2
 8102b32:	d031      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	4a23      	ldr	r2, [pc, #140]	; (8102bc8 <HAL_DMA_IRQHandler+0x6a8>)
 8102b3a:	4293      	cmp	r3, r2
 8102b3c:	d02c      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b3e:	687b      	ldr	r3, [r7, #4]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	4a22      	ldr	r2, [pc, #136]	; (8102bcc <HAL_DMA_IRQHandler+0x6ac>)
 8102b44:	4293      	cmp	r3, r2
 8102b46:	d027      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b48:	687b      	ldr	r3, [r7, #4]
 8102b4a:	681b      	ldr	r3, [r3, #0]
 8102b4c:	4a20      	ldr	r2, [pc, #128]	; (8102bd0 <HAL_DMA_IRQHandler+0x6b0>)
 8102b4e:	4293      	cmp	r3, r2
 8102b50:	d022      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	4a1f      	ldr	r2, [pc, #124]	; (8102bd4 <HAL_DMA_IRQHandler+0x6b4>)
 8102b58:	4293      	cmp	r3, r2
 8102b5a:	d01d      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	4a1d      	ldr	r2, [pc, #116]	; (8102bd8 <HAL_DMA_IRQHandler+0x6b8>)
 8102b62:	4293      	cmp	r3, r2
 8102b64:	d018      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	681b      	ldr	r3, [r3, #0]
 8102b6a:	4a1c      	ldr	r2, [pc, #112]	; (8102bdc <HAL_DMA_IRQHandler+0x6bc>)
 8102b6c:	4293      	cmp	r3, r2
 8102b6e:	d013      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	4a1a      	ldr	r2, [pc, #104]	; (8102be0 <HAL_DMA_IRQHandler+0x6c0>)
 8102b76:	4293      	cmp	r3, r2
 8102b78:	d00e      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	4a19      	ldr	r2, [pc, #100]	; (8102be4 <HAL_DMA_IRQHandler+0x6c4>)
 8102b80:	4293      	cmp	r3, r2
 8102b82:	d009      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	4a17      	ldr	r2, [pc, #92]	; (8102be8 <HAL_DMA_IRQHandler+0x6c8>)
 8102b8a:	4293      	cmp	r3, r2
 8102b8c:	d004      	beq.n	8102b98 <HAL_DMA_IRQHandler+0x678>
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	4a16      	ldr	r2, [pc, #88]	; (8102bec <HAL_DMA_IRQHandler+0x6cc>)
 8102b94:	4293      	cmp	r3, r2
 8102b96:	d12b      	bne.n	8102bf0 <HAL_DMA_IRQHandler+0x6d0>
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	f003 0310 	and.w	r3, r3, #16
 8102ba2:	2b00      	cmp	r3, #0
 8102ba4:	bf14      	ite	ne
 8102ba6:	2301      	movne	r3, #1
 8102ba8:	2300      	moveq	r3, #0
 8102baa:	b2db      	uxtb	r3, r3
 8102bac:	e02a      	b.n	8102c04 <HAL_DMA_IRQHandler+0x6e4>
 8102bae:	bf00      	nop
 8102bb0:	40020010 	.word	0x40020010
 8102bb4:	40020028 	.word	0x40020028
 8102bb8:	40020040 	.word	0x40020040
 8102bbc:	40020058 	.word	0x40020058
 8102bc0:	40020070 	.word	0x40020070
 8102bc4:	40020088 	.word	0x40020088
 8102bc8:	400200a0 	.word	0x400200a0
 8102bcc:	400200b8 	.word	0x400200b8
 8102bd0:	40020410 	.word	0x40020410
 8102bd4:	40020428 	.word	0x40020428
 8102bd8:	40020440 	.word	0x40020440
 8102bdc:	40020458 	.word	0x40020458
 8102be0:	40020470 	.word	0x40020470
 8102be4:	40020488 	.word	0x40020488
 8102be8:	400204a0 	.word	0x400204a0
 8102bec:	400204b8 	.word	0x400204b8
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	f003 0302 	and.w	r3, r3, #2
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	bf14      	ite	ne
 8102bfe:	2301      	movne	r3, #1
 8102c00:	2300      	moveq	r3, #0
 8102c02:	b2db      	uxtb	r3, r3
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	f000 8087 	beq.w	8102d18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c0e:	f003 031f 	and.w	r3, r3, #31
 8102c12:	2220      	movs	r2, #32
 8102c14:	409a      	lsls	r2, r3
 8102c16:	6a3b      	ldr	r3, [r7, #32]
 8102c18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c20:	b2db      	uxtb	r3, r3
 8102c22:	2b04      	cmp	r3, #4
 8102c24:	d139      	bne.n	8102c9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	681a      	ldr	r2, [r3, #0]
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	f022 0216 	bic.w	r2, r2, #22
 8102c34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	695a      	ldr	r2, [r3, #20]
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102c44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c4a:	2b00      	cmp	r3, #0
 8102c4c:	d103      	bne.n	8102c56 <HAL_DMA_IRQHandler+0x736>
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d007      	beq.n	8102c66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	681a      	ldr	r2, [r3, #0]
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	f022 0208 	bic.w	r2, r2, #8
 8102c64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c6a:	f003 031f 	and.w	r3, r3, #31
 8102c6e:	223f      	movs	r2, #63	; 0x3f
 8102c70:	409a      	lsls	r2, r3
 8102c72:	6a3b      	ldr	r3, [r7, #32]
 8102c74:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	2200      	movs	r2, #0
 8102c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	2201      	movs	r2, #1
 8102c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	f000 834a 	beq.w	8103324 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c94:	6878      	ldr	r0, [r7, #4]
 8102c96:	4798      	blx	r3
          }
          return;
 8102c98:	e344      	b.n	8103324 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	d018      	beq.n	8102cda <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102cb2:	2b00      	cmp	r3, #0
 8102cb4:	d108      	bne.n	8102cc8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102cb6:	687b      	ldr	r3, [r7, #4]
 8102cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cba:	2b00      	cmp	r3, #0
 8102cbc:	d02c      	beq.n	8102d18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cc2:	6878      	ldr	r0, [r7, #4]
 8102cc4:	4798      	blx	r3
 8102cc6:	e027      	b.n	8102d18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d023      	beq.n	8102d18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cd4:	6878      	ldr	r0, [r7, #4]
 8102cd6:	4798      	blx	r3
 8102cd8:	e01e      	b.n	8102d18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	681b      	ldr	r3, [r3, #0]
 8102ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ce4:	2b00      	cmp	r3, #0
 8102ce6:	d10f      	bne.n	8102d08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	681a      	ldr	r2, [r3, #0]
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	f022 0210 	bic.w	r2, r2, #16
 8102cf6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	2201      	movs	r2, #1
 8102d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d0c:	2b00      	cmp	r3, #0
 8102d0e:	d003      	beq.n	8102d18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d14:	6878      	ldr	r0, [r7, #4]
 8102d16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	f000 8306 	beq.w	810332e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d26:	f003 0301 	and.w	r3, r3, #1
 8102d2a:	2b00      	cmp	r3, #0
 8102d2c:	f000 8088 	beq.w	8102e40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	2204      	movs	r2, #4
 8102d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	4a7a      	ldr	r2, [pc, #488]	; (8102f28 <HAL_DMA_IRQHandler+0xa08>)
 8102d3e:	4293      	cmp	r3, r2
 8102d40:	d04a      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	4a79      	ldr	r2, [pc, #484]	; (8102f2c <HAL_DMA_IRQHandler+0xa0c>)
 8102d48:	4293      	cmp	r3, r2
 8102d4a:	d045      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	4a77      	ldr	r2, [pc, #476]	; (8102f30 <HAL_DMA_IRQHandler+0xa10>)
 8102d52:	4293      	cmp	r3, r2
 8102d54:	d040      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a76      	ldr	r2, [pc, #472]	; (8102f34 <HAL_DMA_IRQHandler+0xa14>)
 8102d5c:	4293      	cmp	r3, r2
 8102d5e:	d03b      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	4a74      	ldr	r2, [pc, #464]	; (8102f38 <HAL_DMA_IRQHandler+0xa18>)
 8102d66:	4293      	cmp	r3, r2
 8102d68:	d036      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	4a73      	ldr	r2, [pc, #460]	; (8102f3c <HAL_DMA_IRQHandler+0xa1c>)
 8102d70:	4293      	cmp	r3, r2
 8102d72:	d031      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a71      	ldr	r2, [pc, #452]	; (8102f40 <HAL_DMA_IRQHandler+0xa20>)
 8102d7a:	4293      	cmp	r3, r2
 8102d7c:	d02c      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a70      	ldr	r2, [pc, #448]	; (8102f44 <HAL_DMA_IRQHandler+0xa24>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d027      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a6e      	ldr	r2, [pc, #440]	; (8102f48 <HAL_DMA_IRQHandler+0xa28>)
 8102d8e:	4293      	cmp	r3, r2
 8102d90:	d022      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4a6d      	ldr	r2, [pc, #436]	; (8102f4c <HAL_DMA_IRQHandler+0xa2c>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d01d      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	4a6b      	ldr	r2, [pc, #428]	; (8102f50 <HAL_DMA_IRQHandler+0xa30>)
 8102da2:	4293      	cmp	r3, r2
 8102da4:	d018      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	4a6a      	ldr	r2, [pc, #424]	; (8102f54 <HAL_DMA_IRQHandler+0xa34>)
 8102dac:	4293      	cmp	r3, r2
 8102dae:	d013      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4a68      	ldr	r2, [pc, #416]	; (8102f58 <HAL_DMA_IRQHandler+0xa38>)
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d00e      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	4a67      	ldr	r2, [pc, #412]	; (8102f5c <HAL_DMA_IRQHandler+0xa3c>)
 8102dc0:	4293      	cmp	r3, r2
 8102dc2:	d009      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	4a65      	ldr	r2, [pc, #404]	; (8102f60 <HAL_DMA_IRQHandler+0xa40>)
 8102dca:	4293      	cmp	r3, r2
 8102dcc:	d004      	beq.n	8102dd8 <HAL_DMA_IRQHandler+0x8b8>
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	4a64      	ldr	r2, [pc, #400]	; (8102f64 <HAL_DMA_IRQHandler+0xa44>)
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d108      	bne.n	8102dea <HAL_DMA_IRQHandler+0x8ca>
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	681a      	ldr	r2, [r3, #0]
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	f022 0201 	bic.w	r2, r2, #1
 8102de6:	601a      	str	r2, [r3, #0]
 8102de8:	e007      	b.n	8102dfa <HAL_DMA_IRQHandler+0x8da>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	681a      	ldr	r2, [r3, #0]
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	f022 0201 	bic.w	r2, r2, #1
 8102df8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8102dfa:	68fb      	ldr	r3, [r7, #12]
 8102dfc:	3301      	adds	r3, #1
 8102dfe:	60fb      	str	r3, [r7, #12]
 8102e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e02:	429a      	cmp	r2, r3
 8102e04:	d307      	bcc.n	8102e16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f003 0301 	and.w	r3, r3, #1
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d1f2      	bne.n	8102dfa <HAL_DMA_IRQHandler+0x8da>
 8102e14:	e000      	b.n	8102e18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102e16:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	2200      	movs	r2, #0
 8102e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	f003 0301 	and.w	r3, r3, #1
 8102e2a:	2b00      	cmp	r3, #0
 8102e2c:	d004      	beq.n	8102e38 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	2203      	movs	r2, #3
 8102e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102e36:	e003      	b.n	8102e40 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	2201      	movs	r2, #1
 8102e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e44:	2b00      	cmp	r3, #0
 8102e46:	f000 8272 	beq.w	810332e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e4e:	6878      	ldr	r0, [r7, #4]
 8102e50:	4798      	blx	r3
 8102e52:	e26c      	b.n	810332e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	4a43      	ldr	r2, [pc, #268]	; (8102f68 <HAL_DMA_IRQHandler+0xa48>)
 8102e5a:	4293      	cmp	r3, r2
 8102e5c:	d022      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	4a42      	ldr	r2, [pc, #264]	; (8102f6c <HAL_DMA_IRQHandler+0xa4c>)
 8102e64:	4293      	cmp	r3, r2
 8102e66:	d01d      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	4a40      	ldr	r2, [pc, #256]	; (8102f70 <HAL_DMA_IRQHandler+0xa50>)
 8102e6e:	4293      	cmp	r3, r2
 8102e70:	d018      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	4a3f      	ldr	r2, [pc, #252]	; (8102f74 <HAL_DMA_IRQHandler+0xa54>)
 8102e78:	4293      	cmp	r3, r2
 8102e7a:	d013      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	4a3d      	ldr	r2, [pc, #244]	; (8102f78 <HAL_DMA_IRQHandler+0xa58>)
 8102e82:	4293      	cmp	r3, r2
 8102e84:	d00e      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	4a3c      	ldr	r2, [pc, #240]	; (8102f7c <HAL_DMA_IRQHandler+0xa5c>)
 8102e8c:	4293      	cmp	r3, r2
 8102e8e:	d009      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	4a3a      	ldr	r2, [pc, #232]	; (8102f80 <HAL_DMA_IRQHandler+0xa60>)
 8102e96:	4293      	cmp	r3, r2
 8102e98:	d004      	beq.n	8102ea4 <HAL_DMA_IRQHandler+0x984>
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	4a39      	ldr	r2, [pc, #228]	; (8102f84 <HAL_DMA_IRQHandler+0xa64>)
 8102ea0:	4293      	cmp	r3, r2
 8102ea2:	d101      	bne.n	8102ea8 <HAL_DMA_IRQHandler+0x988>
 8102ea4:	2301      	movs	r3, #1
 8102ea6:	e000      	b.n	8102eaa <HAL_DMA_IRQHandler+0x98a>
 8102ea8:	2300      	movs	r3, #0
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	f000 823f 	beq.w	810332e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ebc:	f003 031f 	and.w	r3, r3, #31
 8102ec0:	2204      	movs	r2, #4
 8102ec2:	409a      	lsls	r2, r3
 8102ec4:	697b      	ldr	r3, [r7, #20]
 8102ec6:	4013      	ands	r3, r2
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	f000 80cd 	beq.w	8103068 <HAL_DMA_IRQHandler+0xb48>
 8102ece:	693b      	ldr	r3, [r7, #16]
 8102ed0:	f003 0304 	and.w	r3, r3, #4
 8102ed4:	2b00      	cmp	r3, #0
 8102ed6:	f000 80c7 	beq.w	8103068 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ede:	f003 031f 	and.w	r3, r3, #31
 8102ee2:	2204      	movs	r2, #4
 8102ee4:	409a      	lsls	r2, r3
 8102ee6:	69fb      	ldr	r3, [r7, #28]
 8102ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102eea:	693b      	ldr	r3, [r7, #16]
 8102eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	d049      	beq.n	8102f88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102ef4:	693b      	ldr	r3, [r7, #16]
 8102ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d109      	bne.n	8102f12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	f000 8210 	beq.w	8103328 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f0c:	6878      	ldr	r0, [r7, #4]
 8102f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f10:	e20a      	b.n	8103328 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f16:	2b00      	cmp	r3, #0
 8102f18:	f000 8206 	beq.w	8103328 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f20:	6878      	ldr	r0, [r7, #4]
 8102f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f24:	e200      	b.n	8103328 <HAL_DMA_IRQHandler+0xe08>
 8102f26:	bf00      	nop
 8102f28:	40020010 	.word	0x40020010
 8102f2c:	40020028 	.word	0x40020028
 8102f30:	40020040 	.word	0x40020040
 8102f34:	40020058 	.word	0x40020058
 8102f38:	40020070 	.word	0x40020070
 8102f3c:	40020088 	.word	0x40020088
 8102f40:	400200a0 	.word	0x400200a0
 8102f44:	400200b8 	.word	0x400200b8
 8102f48:	40020410 	.word	0x40020410
 8102f4c:	40020428 	.word	0x40020428
 8102f50:	40020440 	.word	0x40020440
 8102f54:	40020458 	.word	0x40020458
 8102f58:	40020470 	.word	0x40020470
 8102f5c:	40020488 	.word	0x40020488
 8102f60:	400204a0 	.word	0x400204a0
 8102f64:	400204b8 	.word	0x400204b8
 8102f68:	58025408 	.word	0x58025408
 8102f6c:	5802541c 	.word	0x5802541c
 8102f70:	58025430 	.word	0x58025430
 8102f74:	58025444 	.word	0x58025444
 8102f78:	58025458 	.word	0x58025458
 8102f7c:	5802546c 	.word	0x5802546c
 8102f80:	58025480 	.word	0x58025480
 8102f84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8102f88:	693b      	ldr	r3, [r7, #16]
 8102f8a:	f003 0320 	and.w	r3, r3, #32
 8102f8e:	2b00      	cmp	r3, #0
 8102f90:	d160      	bne.n	8103054 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a8c      	ldr	r2, [pc, #560]	; (81031c8 <HAL_DMA_IRQHandler+0xca8>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d04a      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a8a      	ldr	r2, [pc, #552]	; (81031cc <HAL_DMA_IRQHandler+0xcac>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d045      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a89      	ldr	r2, [pc, #548]	; (81031d0 <HAL_DMA_IRQHandler+0xcb0>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d040      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a87      	ldr	r2, [pc, #540]	; (81031d4 <HAL_DMA_IRQHandler+0xcb4>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d03b      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a86      	ldr	r2, [pc, #536]	; (81031d8 <HAL_DMA_IRQHandler+0xcb8>)
 8102fc0:	4293      	cmp	r3, r2
 8102fc2:	d036      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a84      	ldr	r2, [pc, #528]	; (81031dc <HAL_DMA_IRQHandler+0xcbc>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d031      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	4a83      	ldr	r2, [pc, #524]	; (81031e0 <HAL_DMA_IRQHandler+0xcc0>)
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d02c      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a81      	ldr	r2, [pc, #516]	; (81031e4 <HAL_DMA_IRQHandler+0xcc4>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d027      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	4a80      	ldr	r2, [pc, #512]	; (81031e8 <HAL_DMA_IRQHandler+0xcc8>)
 8102fe8:	4293      	cmp	r3, r2
 8102fea:	d022      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	4a7e      	ldr	r2, [pc, #504]	; (81031ec <HAL_DMA_IRQHandler+0xccc>)
 8102ff2:	4293      	cmp	r3, r2
 8102ff4:	d01d      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	681b      	ldr	r3, [r3, #0]
 8102ffa:	4a7d      	ldr	r2, [pc, #500]	; (81031f0 <HAL_DMA_IRQHandler+0xcd0>)
 8102ffc:	4293      	cmp	r3, r2
 8102ffe:	d018      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	4a7b      	ldr	r2, [pc, #492]	; (81031f4 <HAL_DMA_IRQHandler+0xcd4>)
 8103006:	4293      	cmp	r3, r2
 8103008:	d013      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	4a7a      	ldr	r2, [pc, #488]	; (81031f8 <HAL_DMA_IRQHandler+0xcd8>)
 8103010:	4293      	cmp	r3, r2
 8103012:	d00e      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4a78      	ldr	r2, [pc, #480]	; (81031fc <HAL_DMA_IRQHandler+0xcdc>)
 810301a:	4293      	cmp	r3, r2
 810301c:	d009      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a77      	ldr	r2, [pc, #476]	; (8103200 <HAL_DMA_IRQHandler+0xce0>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d004      	beq.n	8103032 <HAL_DMA_IRQHandler+0xb12>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a75      	ldr	r2, [pc, #468]	; (8103204 <HAL_DMA_IRQHandler+0xce4>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d108      	bne.n	8103044 <HAL_DMA_IRQHandler+0xb24>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	681a      	ldr	r2, [r3, #0]
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	f022 0208 	bic.w	r2, r2, #8
 8103040:	601a      	str	r2, [r3, #0]
 8103042:	e007      	b.n	8103054 <HAL_DMA_IRQHandler+0xb34>
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	681a      	ldr	r2, [r3, #0]
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	f022 0204 	bic.w	r2, r2, #4
 8103052:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103058:	2b00      	cmp	r3, #0
 810305a:	f000 8165 	beq.w	8103328 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103062:	6878      	ldr	r0, [r7, #4]
 8103064:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103066:	e15f      	b.n	8103328 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810306c:	f003 031f 	and.w	r3, r3, #31
 8103070:	2202      	movs	r2, #2
 8103072:	409a      	lsls	r2, r3
 8103074:	697b      	ldr	r3, [r7, #20]
 8103076:	4013      	ands	r3, r2
 8103078:	2b00      	cmp	r3, #0
 810307a:	f000 80c5 	beq.w	8103208 <HAL_DMA_IRQHandler+0xce8>
 810307e:	693b      	ldr	r3, [r7, #16]
 8103080:	f003 0302 	and.w	r3, r3, #2
 8103084:	2b00      	cmp	r3, #0
 8103086:	f000 80bf 	beq.w	8103208 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810308e:	f003 031f 	and.w	r3, r3, #31
 8103092:	2202      	movs	r2, #2
 8103094:	409a      	lsls	r2, r3
 8103096:	69fb      	ldr	r3, [r7, #28]
 8103098:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810309a:	693b      	ldr	r3, [r7, #16]
 810309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81030a0:	2b00      	cmp	r3, #0
 81030a2:	d018      	beq.n	81030d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81030a4:	693b      	ldr	r3, [r7, #16]
 81030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81030aa:	2b00      	cmp	r3, #0
 81030ac:	d109      	bne.n	81030c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030b2:	2b00      	cmp	r3, #0
 81030b4:	f000 813a 	beq.w	810332c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030bc:	6878      	ldr	r0, [r7, #4]
 81030be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030c0:	e134      	b.n	810332c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	f000 8130 	beq.w	810332c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030d0:	6878      	ldr	r0, [r7, #4]
 81030d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030d4:	e12a      	b.n	810332c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81030d6:	693b      	ldr	r3, [r7, #16]
 81030d8:	f003 0320 	and.w	r3, r3, #32
 81030dc:	2b00      	cmp	r3, #0
 81030de:	d168      	bne.n	81031b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a38      	ldr	r2, [pc, #224]	; (81031c8 <HAL_DMA_IRQHandler+0xca8>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d04a      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	4a37      	ldr	r2, [pc, #220]	; (81031cc <HAL_DMA_IRQHandler+0xcac>)
 81030f0:	4293      	cmp	r3, r2
 81030f2:	d045      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a35      	ldr	r2, [pc, #212]	; (81031d0 <HAL_DMA_IRQHandler+0xcb0>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d040      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a34      	ldr	r2, [pc, #208]	; (81031d4 <HAL_DMA_IRQHandler+0xcb4>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d03b      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	4a32      	ldr	r2, [pc, #200]	; (81031d8 <HAL_DMA_IRQHandler+0xcb8>)
 810310e:	4293      	cmp	r3, r2
 8103110:	d036      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4a31      	ldr	r2, [pc, #196]	; (81031dc <HAL_DMA_IRQHandler+0xcbc>)
 8103118:	4293      	cmp	r3, r2
 810311a:	d031      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	4a2f      	ldr	r2, [pc, #188]	; (81031e0 <HAL_DMA_IRQHandler+0xcc0>)
 8103122:	4293      	cmp	r3, r2
 8103124:	d02c      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a2e      	ldr	r2, [pc, #184]	; (81031e4 <HAL_DMA_IRQHandler+0xcc4>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d027      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4a2c      	ldr	r2, [pc, #176]	; (81031e8 <HAL_DMA_IRQHandler+0xcc8>)
 8103136:	4293      	cmp	r3, r2
 8103138:	d022      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	4a2b      	ldr	r2, [pc, #172]	; (81031ec <HAL_DMA_IRQHandler+0xccc>)
 8103140:	4293      	cmp	r3, r2
 8103142:	d01d      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a29      	ldr	r2, [pc, #164]	; (81031f0 <HAL_DMA_IRQHandler+0xcd0>)
 810314a:	4293      	cmp	r3, r2
 810314c:	d018      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	4a28      	ldr	r2, [pc, #160]	; (81031f4 <HAL_DMA_IRQHandler+0xcd4>)
 8103154:	4293      	cmp	r3, r2
 8103156:	d013      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	4a26      	ldr	r2, [pc, #152]	; (81031f8 <HAL_DMA_IRQHandler+0xcd8>)
 810315e:	4293      	cmp	r3, r2
 8103160:	d00e      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4a25      	ldr	r2, [pc, #148]	; (81031fc <HAL_DMA_IRQHandler+0xcdc>)
 8103168:	4293      	cmp	r3, r2
 810316a:	d009      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	4a23      	ldr	r2, [pc, #140]	; (8103200 <HAL_DMA_IRQHandler+0xce0>)
 8103172:	4293      	cmp	r3, r2
 8103174:	d004      	beq.n	8103180 <HAL_DMA_IRQHandler+0xc60>
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4a22      	ldr	r2, [pc, #136]	; (8103204 <HAL_DMA_IRQHandler+0xce4>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d108      	bne.n	8103192 <HAL_DMA_IRQHandler+0xc72>
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	681a      	ldr	r2, [r3, #0]
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	f022 0214 	bic.w	r2, r2, #20
 810318e:	601a      	str	r2, [r3, #0]
 8103190:	e007      	b.n	81031a2 <HAL_DMA_IRQHandler+0xc82>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	681a      	ldr	r2, [r3, #0]
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	f022 020a 	bic.w	r2, r2, #10
 81031a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	2200      	movs	r2, #0
 81031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	2201      	movs	r2, #1
 81031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81031b6:	2b00      	cmp	r3, #0
 81031b8:	f000 80b8 	beq.w	810332c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81031c0:	6878      	ldr	r0, [r7, #4]
 81031c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81031c4:	e0b2      	b.n	810332c <HAL_DMA_IRQHandler+0xe0c>
 81031c6:	bf00      	nop
 81031c8:	40020010 	.word	0x40020010
 81031cc:	40020028 	.word	0x40020028
 81031d0:	40020040 	.word	0x40020040
 81031d4:	40020058 	.word	0x40020058
 81031d8:	40020070 	.word	0x40020070
 81031dc:	40020088 	.word	0x40020088
 81031e0:	400200a0 	.word	0x400200a0
 81031e4:	400200b8 	.word	0x400200b8
 81031e8:	40020410 	.word	0x40020410
 81031ec:	40020428 	.word	0x40020428
 81031f0:	40020440 	.word	0x40020440
 81031f4:	40020458 	.word	0x40020458
 81031f8:	40020470 	.word	0x40020470
 81031fc:	40020488 	.word	0x40020488
 8103200:	400204a0 	.word	0x400204a0
 8103204:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810320c:	f003 031f 	and.w	r3, r3, #31
 8103210:	2208      	movs	r2, #8
 8103212:	409a      	lsls	r2, r3
 8103214:	697b      	ldr	r3, [r7, #20]
 8103216:	4013      	ands	r3, r2
 8103218:	2b00      	cmp	r3, #0
 810321a:	f000 8088 	beq.w	810332e <HAL_DMA_IRQHandler+0xe0e>
 810321e:	693b      	ldr	r3, [r7, #16]
 8103220:	f003 0308 	and.w	r3, r3, #8
 8103224:	2b00      	cmp	r3, #0
 8103226:	f000 8082 	beq.w	810332e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a41      	ldr	r2, [pc, #260]	; (8103334 <HAL_DMA_IRQHandler+0xe14>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d04a      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a3f      	ldr	r2, [pc, #252]	; (8103338 <HAL_DMA_IRQHandler+0xe18>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d045      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a3e      	ldr	r2, [pc, #248]	; (810333c <HAL_DMA_IRQHandler+0xe1c>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d040      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a3c      	ldr	r2, [pc, #240]	; (8103340 <HAL_DMA_IRQHandler+0xe20>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d03b      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a3b      	ldr	r2, [pc, #236]	; (8103344 <HAL_DMA_IRQHandler+0xe24>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d036      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a39      	ldr	r2, [pc, #228]	; (8103348 <HAL_DMA_IRQHandler+0xe28>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d031      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	4a38      	ldr	r2, [pc, #224]	; (810334c <HAL_DMA_IRQHandler+0xe2c>)
 810326c:	4293      	cmp	r3, r2
 810326e:	d02c      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	4a36      	ldr	r2, [pc, #216]	; (8103350 <HAL_DMA_IRQHandler+0xe30>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d027      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	4a35      	ldr	r2, [pc, #212]	; (8103354 <HAL_DMA_IRQHandler+0xe34>)
 8103280:	4293      	cmp	r3, r2
 8103282:	d022      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	4a33      	ldr	r2, [pc, #204]	; (8103358 <HAL_DMA_IRQHandler+0xe38>)
 810328a:	4293      	cmp	r3, r2
 810328c:	d01d      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a32      	ldr	r2, [pc, #200]	; (810335c <HAL_DMA_IRQHandler+0xe3c>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d018      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a30      	ldr	r2, [pc, #192]	; (8103360 <HAL_DMA_IRQHandler+0xe40>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d013      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	4a2f      	ldr	r2, [pc, #188]	; (8103364 <HAL_DMA_IRQHandler+0xe44>)
 81032a8:	4293      	cmp	r3, r2
 81032aa:	d00e      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	4a2d      	ldr	r2, [pc, #180]	; (8103368 <HAL_DMA_IRQHandler+0xe48>)
 81032b2:	4293      	cmp	r3, r2
 81032b4:	d009      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	4a2c      	ldr	r2, [pc, #176]	; (810336c <HAL_DMA_IRQHandler+0xe4c>)
 81032bc:	4293      	cmp	r3, r2
 81032be:	d004      	beq.n	81032ca <HAL_DMA_IRQHandler+0xdaa>
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	4a2a      	ldr	r2, [pc, #168]	; (8103370 <HAL_DMA_IRQHandler+0xe50>)
 81032c6:	4293      	cmp	r3, r2
 81032c8:	d108      	bne.n	81032dc <HAL_DMA_IRQHandler+0xdbc>
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	681a      	ldr	r2, [r3, #0]
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	f022 021c 	bic.w	r2, r2, #28
 81032d8:	601a      	str	r2, [r3, #0]
 81032da:	e007      	b.n	81032ec <HAL_DMA_IRQHandler+0xdcc>
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	681a      	ldr	r2, [r3, #0]
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	f022 020e 	bic.w	r2, r2, #14
 81032ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032f0:	f003 031f 	and.w	r3, r3, #31
 81032f4:	2201      	movs	r2, #1
 81032f6:	409a      	lsls	r2, r3
 81032f8:	69fb      	ldr	r3, [r7, #28]
 81032fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	2201      	movs	r2, #1
 8103300:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	2200      	movs	r2, #0
 8103306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	2201      	movs	r2, #1
 810330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103316:	2b00      	cmp	r3, #0
 8103318:	d009      	beq.n	810332e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810331e:	6878      	ldr	r0, [r7, #4]
 8103320:	4798      	blx	r3
 8103322:	e004      	b.n	810332e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103324:	bf00      	nop
 8103326:	e002      	b.n	810332e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103328:	bf00      	nop
 810332a:	e000      	b.n	810332e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810332c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810332e:	3728      	adds	r7, #40	; 0x28
 8103330:	46bd      	mov	sp, r7
 8103332:	bd80      	pop	{r7, pc}
 8103334:	40020010 	.word	0x40020010
 8103338:	40020028 	.word	0x40020028
 810333c:	40020040 	.word	0x40020040
 8103340:	40020058 	.word	0x40020058
 8103344:	40020070 	.word	0x40020070
 8103348:	40020088 	.word	0x40020088
 810334c:	400200a0 	.word	0x400200a0
 8103350:	400200b8 	.word	0x400200b8
 8103354:	40020410 	.word	0x40020410
 8103358:	40020428 	.word	0x40020428
 810335c:	40020440 	.word	0x40020440
 8103360:	40020458 	.word	0x40020458
 8103364:	40020470 	.word	0x40020470
 8103368:	40020488 	.word	0x40020488
 810336c:	400204a0 	.word	0x400204a0
 8103370:	400204b8 	.word	0x400204b8

08103374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103374:	b480      	push	{r7}
 8103376:	b087      	sub	sp, #28
 8103378:	af00      	add	r7, sp, #0
 810337a:	60f8      	str	r0, [r7, #12]
 810337c:	60b9      	str	r1, [r7, #8]
 810337e:	607a      	str	r2, [r7, #4]
 8103380:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103382:	68fb      	ldr	r3, [r7, #12]
 8103384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103386:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103388:	68fb      	ldr	r3, [r7, #12]
 810338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810338c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810338e:	68fb      	ldr	r3, [r7, #12]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a84      	ldr	r2, [pc, #528]	; (81035a4 <DMA_SetConfig+0x230>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d072      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103398:	68fb      	ldr	r3, [r7, #12]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	4a82      	ldr	r2, [pc, #520]	; (81035a8 <DMA_SetConfig+0x234>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d06d      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033a2:	68fb      	ldr	r3, [r7, #12]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	4a81      	ldr	r2, [pc, #516]	; (81035ac <DMA_SetConfig+0x238>)
 81033a8:	4293      	cmp	r3, r2
 81033aa:	d068      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033ac:	68fb      	ldr	r3, [r7, #12]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	4a7f      	ldr	r2, [pc, #508]	; (81035b0 <DMA_SetConfig+0x23c>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d063      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033b6:	68fb      	ldr	r3, [r7, #12]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a7e      	ldr	r2, [pc, #504]	; (81035b4 <DMA_SetConfig+0x240>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d05e      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a7c      	ldr	r2, [pc, #496]	; (81035b8 <DMA_SetConfig+0x244>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d059      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033ca:	68fb      	ldr	r3, [r7, #12]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a7b      	ldr	r2, [pc, #492]	; (81035bc <DMA_SetConfig+0x248>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d054      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033d4:	68fb      	ldr	r3, [r7, #12]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a79      	ldr	r2, [pc, #484]	; (81035c0 <DMA_SetConfig+0x24c>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d04f      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033de:	68fb      	ldr	r3, [r7, #12]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a78      	ldr	r2, [pc, #480]	; (81035c4 <DMA_SetConfig+0x250>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d04a      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033e8:	68fb      	ldr	r3, [r7, #12]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a76      	ldr	r2, [pc, #472]	; (81035c8 <DMA_SetConfig+0x254>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d045      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	4a75      	ldr	r2, [pc, #468]	; (81035cc <DMA_SetConfig+0x258>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d040      	beq.n	810347e <DMA_SetConfig+0x10a>
 81033fc:	68fb      	ldr	r3, [r7, #12]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	4a73      	ldr	r2, [pc, #460]	; (81035d0 <DMA_SetConfig+0x25c>)
 8103402:	4293      	cmp	r3, r2
 8103404:	d03b      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103406:	68fb      	ldr	r3, [r7, #12]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	4a72      	ldr	r2, [pc, #456]	; (81035d4 <DMA_SetConfig+0x260>)
 810340c:	4293      	cmp	r3, r2
 810340e:	d036      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103410:	68fb      	ldr	r3, [r7, #12]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	4a70      	ldr	r2, [pc, #448]	; (81035d8 <DMA_SetConfig+0x264>)
 8103416:	4293      	cmp	r3, r2
 8103418:	d031      	beq.n	810347e <DMA_SetConfig+0x10a>
 810341a:	68fb      	ldr	r3, [r7, #12]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	4a6f      	ldr	r2, [pc, #444]	; (81035dc <DMA_SetConfig+0x268>)
 8103420:	4293      	cmp	r3, r2
 8103422:	d02c      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103424:	68fb      	ldr	r3, [r7, #12]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	4a6d      	ldr	r2, [pc, #436]	; (81035e0 <DMA_SetConfig+0x26c>)
 810342a:	4293      	cmp	r3, r2
 810342c:	d027      	beq.n	810347e <DMA_SetConfig+0x10a>
 810342e:	68fb      	ldr	r3, [r7, #12]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	4a6c      	ldr	r2, [pc, #432]	; (81035e4 <DMA_SetConfig+0x270>)
 8103434:	4293      	cmp	r3, r2
 8103436:	d022      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103438:	68fb      	ldr	r3, [r7, #12]
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	4a6a      	ldr	r2, [pc, #424]	; (81035e8 <DMA_SetConfig+0x274>)
 810343e:	4293      	cmp	r3, r2
 8103440:	d01d      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	4a69      	ldr	r2, [pc, #420]	; (81035ec <DMA_SetConfig+0x278>)
 8103448:	4293      	cmp	r3, r2
 810344a:	d018      	beq.n	810347e <DMA_SetConfig+0x10a>
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	4a67      	ldr	r2, [pc, #412]	; (81035f0 <DMA_SetConfig+0x27c>)
 8103452:	4293      	cmp	r3, r2
 8103454:	d013      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103456:	68fb      	ldr	r3, [r7, #12]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	4a66      	ldr	r2, [pc, #408]	; (81035f4 <DMA_SetConfig+0x280>)
 810345c:	4293      	cmp	r3, r2
 810345e:	d00e      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103460:	68fb      	ldr	r3, [r7, #12]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	4a64      	ldr	r2, [pc, #400]	; (81035f8 <DMA_SetConfig+0x284>)
 8103466:	4293      	cmp	r3, r2
 8103468:	d009      	beq.n	810347e <DMA_SetConfig+0x10a>
 810346a:	68fb      	ldr	r3, [r7, #12]
 810346c:	681b      	ldr	r3, [r3, #0]
 810346e:	4a63      	ldr	r2, [pc, #396]	; (81035fc <DMA_SetConfig+0x288>)
 8103470:	4293      	cmp	r3, r2
 8103472:	d004      	beq.n	810347e <DMA_SetConfig+0x10a>
 8103474:	68fb      	ldr	r3, [r7, #12]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	4a61      	ldr	r2, [pc, #388]	; (8103600 <DMA_SetConfig+0x28c>)
 810347a:	4293      	cmp	r3, r2
 810347c:	d101      	bne.n	8103482 <DMA_SetConfig+0x10e>
 810347e:	2301      	movs	r3, #1
 8103480:	e000      	b.n	8103484 <DMA_SetConfig+0x110>
 8103482:	2300      	movs	r3, #0
 8103484:	2b00      	cmp	r3, #0
 8103486:	d00d      	beq.n	81034a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103488:	68fb      	ldr	r3, [r7, #12]
 810348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810348c:	68fa      	ldr	r2, [r7, #12]
 810348e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103490:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8103492:	68fb      	ldr	r3, [r7, #12]
 8103494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103496:	2b00      	cmp	r3, #0
 8103498:	d004      	beq.n	81034a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810349a:	68fb      	ldr	r3, [r7, #12]
 810349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810349e:	68fa      	ldr	r2, [r7, #12]
 81034a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81034a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81034a4:	68fb      	ldr	r3, [r7, #12]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	4a3e      	ldr	r2, [pc, #248]	; (81035a4 <DMA_SetConfig+0x230>)
 81034aa:	4293      	cmp	r3, r2
 81034ac:	d04a      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034ae:	68fb      	ldr	r3, [r7, #12]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a3d      	ldr	r2, [pc, #244]	; (81035a8 <DMA_SetConfig+0x234>)
 81034b4:	4293      	cmp	r3, r2
 81034b6:	d045      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034b8:	68fb      	ldr	r3, [r7, #12]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a3b      	ldr	r2, [pc, #236]	; (81035ac <DMA_SetConfig+0x238>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d040      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034c2:	68fb      	ldr	r3, [r7, #12]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a3a      	ldr	r2, [pc, #232]	; (81035b0 <DMA_SetConfig+0x23c>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d03b      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4a38      	ldr	r2, [pc, #224]	; (81035b4 <DMA_SetConfig+0x240>)
 81034d2:	4293      	cmp	r3, r2
 81034d4:	d036      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034d6:	68fb      	ldr	r3, [r7, #12]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4a37      	ldr	r2, [pc, #220]	; (81035b8 <DMA_SetConfig+0x244>)
 81034dc:	4293      	cmp	r3, r2
 81034de:	d031      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034e0:	68fb      	ldr	r3, [r7, #12]
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	4a35      	ldr	r2, [pc, #212]	; (81035bc <DMA_SetConfig+0x248>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d02c      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034ea:	68fb      	ldr	r3, [r7, #12]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a34      	ldr	r2, [pc, #208]	; (81035c0 <DMA_SetConfig+0x24c>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d027      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034f4:	68fb      	ldr	r3, [r7, #12]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a32      	ldr	r2, [pc, #200]	; (81035c4 <DMA_SetConfig+0x250>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d022      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 81034fe:	68fb      	ldr	r3, [r7, #12]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a31      	ldr	r2, [pc, #196]	; (81035c8 <DMA_SetConfig+0x254>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d01d      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 8103508:	68fb      	ldr	r3, [r7, #12]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a2f      	ldr	r2, [pc, #188]	; (81035cc <DMA_SetConfig+0x258>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d018      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 8103512:	68fb      	ldr	r3, [r7, #12]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a2e      	ldr	r2, [pc, #184]	; (81035d0 <DMA_SetConfig+0x25c>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d013      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 810351c:	68fb      	ldr	r3, [r7, #12]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a2c      	ldr	r2, [pc, #176]	; (81035d4 <DMA_SetConfig+0x260>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d00e      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 8103526:	68fb      	ldr	r3, [r7, #12]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a2b      	ldr	r2, [pc, #172]	; (81035d8 <DMA_SetConfig+0x264>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d009      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a29      	ldr	r2, [pc, #164]	; (81035dc <DMA_SetConfig+0x268>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d004      	beq.n	8103544 <DMA_SetConfig+0x1d0>
 810353a:	68fb      	ldr	r3, [r7, #12]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a28      	ldr	r2, [pc, #160]	; (81035e0 <DMA_SetConfig+0x26c>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d101      	bne.n	8103548 <DMA_SetConfig+0x1d4>
 8103544:	2301      	movs	r3, #1
 8103546:	e000      	b.n	810354a <DMA_SetConfig+0x1d6>
 8103548:	2300      	movs	r3, #0
 810354a:	2b00      	cmp	r3, #0
 810354c:	d05a      	beq.n	8103604 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810354e:	68fb      	ldr	r3, [r7, #12]
 8103550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103552:	f003 031f 	and.w	r3, r3, #31
 8103556:	223f      	movs	r2, #63	; 0x3f
 8103558:	409a      	lsls	r2, r3
 810355a:	697b      	ldr	r3, [r7, #20]
 810355c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810355e:	68fb      	ldr	r3, [r7, #12]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	681a      	ldr	r2, [r3, #0]
 8103564:	68fb      	ldr	r3, [r7, #12]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810356c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810356e:	68fb      	ldr	r3, [r7, #12]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	683a      	ldr	r2, [r7, #0]
 8103574:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103576:	68fb      	ldr	r3, [r7, #12]
 8103578:	689b      	ldr	r3, [r3, #8]
 810357a:	2b40      	cmp	r3, #64	; 0x40
 810357c:	d108      	bne.n	8103590 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810357e:	68fb      	ldr	r3, [r7, #12]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	687a      	ldr	r2, [r7, #4]
 8103584:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8103586:	68fb      	ldr	r3, [r7, #12]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	68ba      	ldr	r2, [r7, #8]
 810358c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810358e:	e087      	b.n	81036a0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8103590:	68fb      	ldr	r3, [r7, #12]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	68ba      	ldr	r2, [r7, #8]
 8103596:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	687a      	ldr	r2, [r7, #4]
 810359e:	60da      	str	r2, [r3, #12]
}
 81035a0:	e07e      	b.n	81036a0 <DMA_SetConfig+0x32c>
 81035a2:	bf00      	nop
 81035a4:	40020010 	.word	0x40020010
 81035a8:	40020028 	.word	0x40020028
 81035ac:	40020040 	.word	0x40020040
 81035b0:	40020058 	.word	0x40020058
 81035b4:	40020070 	.word	0x40020070
 81035b8:	40020088 	.word	0x40020088
 81035bc:	400200a0 	.word	0x400200a0
 81035c0:	400200b8 	.word	0x400200b8
 81035c4:	40020410 	.word	0x40020410
 81035c8:	40020428 	.word	0x40020428
 81035cc:	40020440 	.word	0x40020440
 81035d0:	40020458 	.word	0x40020458
 81035d4:	40020470 	.word	0x40020470
 81035d8:	40020488 	.word	0x40020488
 81035dc:	400204a0 	.word	0x400204a0
 81035e0:	400204b8 	.word	0x400204b8
 81035e4:	58025408 	.word	0x58025408
 81035e8:	5802541c 	.word	0x5802541c
 81035ec:	58025430 	.word	0x58025430
 81035f0:	58025444 	.word	0x58025444
 81035f4:	58025458 	.word	0x58025458
 81035f8:	5802546c 	.word	0x5802546c
 81035fc:	58025480 	.word	0x58025480
 8103600:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103604:	68fb      	ldr	r3, [r7, #12]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	4a28      	ldr	r2, [pc, #160]	; (81036ac <DMA_SetConfig+0x338>)
 810360a:	4293      	cmp	r3, r2
 810360c:	d022      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 810360e:	68fb      	ldr	r3, [r7, #12]
 8103610:	681b      	ldr	r3, [r3, #0]
 8103612:	4a27      	ldr	r2, [pc, #156]	; (81036b0 <DMA_SetConfig+0x33c>)
 8103614:	4293      	cmp	r3, r2
 8103616:	d01d      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 8103618:	68fb      	ldr	r3, [r7, #12]
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	4a25      	ldr	r2, [pc, #148]	; (81036b4 <DMA_SetConfig+0x340>)
 810361e:	4293      	cmp	r3, r2
 8103620:	d018      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 8103622:	68fb      	ldr	r3, [r7, #12]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	4a24      	ldr	r2, [pc, #144]	; (81036b8 <DMA_SetConfig+0x344>)
 8103628:	4293      	cmp	r3, r2
 810362a:	d013      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 810362c:	68fb      	ldr	r3, [r7, #12]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	4a22      	ldr	r2, [pc, #136]	; (81036bc <DMA_SetConfig+0x348>)
 8103632:	4293      	cmp	r3, r2
 8103634:	d00e      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 8103636:	68fb      	ldr	r3, [r7, #12]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	4a21      	ldr	r2, [pc, #132]	; (81036c0 <DMA_SetConfig+0x34c>)
 810363c:	4293      	cmp	r3, r2
 810363e:	d009      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 8103640:	68fb      	ldr	r3, [r7, #12]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4a1f      	ldr	r2, [pc, #124]	; (81036c4 <DMA_SetConfig+0x350>)
 8103646:	4293      	cmp	r3, r2
 8103648:	d004      	beq.n	8103654 <DMA_SetConfig+0x2e0>
 810364a:	68fb      	ldr	r3, [r7, #12]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	4a1e      	ldr	r2, [pc, #120]	; (81036c8 <DMA_SetConfig+0x354>)
 8103650:	4293      	cmp	r3, r2
 8103652:	d101      	bne.n	8103658 <DMA_SetConfig+0x2e4>
 8103654:	2301      	movs	r3, #1
 8103656:	e000      	b.n	810365a <DMA_SetConfig+0x2e6>
 8103658:	2300      	movs	r3, #0
 810365a:	2b00      	cmp	r3, #0
 810365c:	d020      	beq.n	81036a0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810365e:	68fb      	ldr	r3, [r7, #12]
 8103660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103662:	f003 031f 	and.w	r3, r3, #31
 8103666:	2201      	movs	r2, #1
 8103668:	409a      	lsls	r2, r3
 810366a:	693b      	ldr	r3, [r7, #16]
 810366c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810366e:	68fb      	ldr	r3, [r7, #12]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	683a      	ldr	r2, [r7, #0]
 8103674:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103676:	68fb      	ldr	r3, [r7, #12]
 8103678:	689b      	ldr	r3, [r3, #8]
 810367a:	2b40      	cmp	r3, #64	; 0x40
 810367c:	d108      	bne.n	8103690 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810367e:	68fb      	ldr	r3, [r7, #12]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	687a      	ldr	r2, [r7, #4]
 8103684:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8103686:	68fb      	ldr	r3, [r7, #12]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	68ba      	ldr	r2, [r7, #8]
 810368c:	60da      	str	r2, [r3, #12]
}
 810368e:	e007      	b.n	81036a0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	68ba      	ldr	r2, [r7, #8]
 8103696:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	687a      	ldr	r2, [r7, #4]
 810369e:	60da      	str	r2, [r3, #12]
}
 81036a0:	bf00      	nop
 81036a2:	371c      	adds	r7, #28
 81036a4:	46bd      	mov	sp, r7
 81036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036aa:	4770      	bx	lr
 81036ac:	58025408 	.word	0x58025408
 81036b0:	5802541c 	.word	0x5802541c
 81036b4:	58025430 	.word	0x58025430
 81036b8:	58025444 	.word	0x58025444
 81036bc:	58025458 	.word	0x58025458
 81036c0:	5802546c 	.word	0x5802546c
 81036c4:	58025480 	.word	0x58025480
 81036c8:	58025494 	.word	0x58025494

081036cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81036cc:	b480      	push	{r7}
 81036ce:	b085      	sub	sp, #20
 81036d0:	af00      	add	r7, sp, #0
 81036d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a43      	ldr	r2, [pc, #268]	; (81037e8 <DMA_CalcBaseAndBitshift+0x11c>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d04a      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	4a42      	ldr	r2, [pc, #264]	; (81037ec <DMA_CalcBaseAndBitshift+0x120>)
 81036e4:	4293      	cmp	r3, r2
 81036e6:	d045      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	4a40      	ldr	r2, [pc, #256]	; (81037f0 <DMA_CalcBaseAndBitshift+0x124>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d040      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a3f      	ldr	r2, [pc, #252]	; (81037f4 <DMA_CalcBaseAndBitshift+0x128>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d03b      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a3d      	ldr	r2, [pc, #244]	; (81037f8 <DMA_CalcBaseAndBitshift+0x12c>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d036      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a3c      	ldr	r2, [pc, #240]	; (81037fc <DMA_CalcBaseAndBitshift+0x130>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d031      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	4a3a      	ldr	r2, [pc, #232]	; (8103800 <DMA_CalcBaseAndBitshift+0x134>)
 8103716:	4293      	cmp	r3, r2
 8103718:	d02c      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4a39      	ldr	r2, [pc, #228]	; (8103804 <DMA_CalcBaseAndBitshift+0x138>)
 8103720:	4293      	cmp	r3, r2
 8103722:	d027      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a37      	ldr	r2, [pc, #220]	; (8103808 <DMA_CalcBaseAndBitshift+0x13c>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d022      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a36      	ldr	r2, [pc, #216]	; (810380c <DMA_CalcBaseAndBitshift+0x140>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d01d      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	4a34      	ldr	r2, [pc, #208]	; (8103810 <DMA_CalcBaseAndBitshift+0x144>)
 810373e:	4293      	cmp	r3, r2
 8103740:	d018      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a33      	ldr	r2, [pc, #204]	; (8103814 <DMA_CalcBaseAndBitshift+0x148>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d013      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a31      	ldr	r2, [pc, #196]	; (8103818 <DMA_CalcBaseAndBitshift+0x14c>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d00e      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4a30      	ldr	r2, [pc, #192]	; (810381c <DMA_CalcBaseAndBitshift+0x150>)
 810375c:	4293      	cmp	r3, r2
 810375e:	d009      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a2e      	ldr	r2, [pc, #184]	; (8103820 <DMA_CalcBaseAndBitshift+0x154>)
 8103766:	4293      	cmp	r3, r2
 8103768:	d004      	beq.n	8103774 <DMA_CalcBaseAndBitshift+0xa8>
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	4a2d      	ldr	r2, [pc, #180]	; (8103824 <DMA_CalcBaseAndBitshift+0x158>)
 8103770:	4293      	cmp	r3, r2
 8103772:	d101      	bne.n	8103778 <DMA_CalcBaseAndBitshift+0xac>
 8103774:	2301      	movs	r3, #1
 8103776:	e000      	b.n	810377a <DMA_CalcBaseAndBitshift+0xae>
 8103778:	2300      	movs	r3, #0
 810377a:	2b00      	cmp	r3, #0
 810377c:	d026      	beq.n	81037cc <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	b2db      	uxtb	r3, r3
 8103784:	3b10      	subs	r3, #16
 8103786:	4a28      	ldr	r2, [pc, #160]	; (8103828 <DMA_CalcBaseAndBitshift+0x15c>)
 8103788:	fba2 2303 	umull	r2, r3, r2, r3
 810378c:	091b      	lsrs	r3, r3, #4
 810378e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103790:	68fb      	ldr	r3, [r7, #12]
 8103792:	f003 0307 	and.w	r3, r3, #7
 8103796:	4a25      	ldr	r2, [pc, #148]	; (810382c <DMA_CalcBaseAndBitshift+0x160>)
 8103798:	5cd3      	ldrb	r3, [r2, r3]
 810379a:	461a      	mov	r2, r3
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81037a0:	68fb      	ldr	r3, [r7, #12]
 81037a2:	2b03      	cmp	r3, #3
 81037a4:	d909      	bls.n	81037ba <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81037ae:	f023 0303 	bic.w	r3, r3, #3
 81037b2:	1d1a      	adds	r2, r3, #4
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	659a      	str	r2, [r3, #88]	; 0x58
 81037b8:	e00e      	b.n	81037d8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81037c2:	f023 0303 	bic.w	r3, r3, #3
 81037c6:	687a      	ldr	r2, [r7, #4]
 81037c8:	6593      	str	r3, [r2, #88]	; 0x58
 81037ca:	e005      	b.n	81037d8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81037dc:	4618      	mov	r0, r3
 81037de:	3714      	adds	r7, #20
 81037e0:	46bd      	mov	sp, r7
 81037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e6:	4770      	bx	lr
 81037e8:	40020010 	.word	0x40020010
 81037ec:	40020028 	.word	0x40020028
 81037f0:	40020040 	.word	0x40020040
 81037f4:	40020058 	.word	0x40020058
 81037f8:	40020070 	.word	0x40020070
 81037fc:	40020088 	.word	0x40020088
 8103800:	400200a0 	.word	0x400200a0
 8103804:	400200b8 	.word	0x400200b8
 8103808:	40020410 	.word	0x40020410
 810380c:	40020428 	.word	0x40020428
 8103810:	40020440 	.word	0x40020440
 8103814:	40020458 	.word	0x40020458
 8103818:	40020470 	.word	0x40020470
 810381c:	40020488 	.word	0x40020488
 8103820:	400204a0 	.word	0x400204a0
 8103824:	400204b8 	.word	0x400204b8
 8103828:	aaaaaaab 	.word	0xaaaaaaab
 810382c:	08107430 	.word	0x08107430

08103830 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103830:	b480      	push	{r7}
 8103832:	b085      	sub	sp, #20
 8103834:	af00      	add	r7, sp, #0
 8103836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103838:	2300      	movs	r3, #0
 810383a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	699b      	ldr	r3, [r3, #24]
 8103840:	2b00      	cmp	r3, #0
 8103842:	d120      	bne.n	8103886 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103848:	2b03      	cmp	r3, #3
 810384a:	d858      	bhi.n	81038fe <DMA_CheckFifoParam+0xce>
 810384c:	a201      	add	r2, pc, #4	; (adr r2, 8103854 <DMA_CheckFifoParam+0x24>)
 810384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103852:	bf00      	nop
 8103854:	08103865 	.word	0x08103865
 8103858:	08103877 	.word	0x08103877
 810385c:	08103865 	.word	0x08103865
 8103860:	081038ff 	.word	0x081038ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810386c:	2b00      	cmp	r3, #0
 810386e:	d048      	beq.n	8103902 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103870:	2301      	movs	r3, #1
 8103872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103874:	e045      	b.n	8103902 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810387a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810387e:	d142      	bne.n	8103906 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103880:	2301      	movs	r3, #1
 8103882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103884:	e03f      	b.n	8103906 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	699b      	ldr	r3, [r3, #24]
 810388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810388e:	d123      	bne.n	81038d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103894:	2b03      	cmp	r3, #3
 8103896:	d838      	bhi.n	810390a <DMA_CheckFifoParam+0xda>
 8103898:	a201      	add	r2, pc, #4	; (adr r2, 81038a0 <DMA_CheckFifoParam+0x70>)
 810389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810389e:	bf00      	nop
 81038a0:	081038b1 	.word	0x081038b1
 81038a4:	081038b7 	.word	0x081038b7
 81038a8:	081038b1 	.word	0x081038b1
 81038ac:	081038c9 	.word	0x081038c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81038b0:	2301      	movs	r3, #1
 81038b2:	73fb      	strb	r3, [r7, #15]
        break;
 81038b4:	e030      	b.n	8103918 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81038be:	2b00      	cmp	r3, #0
 81038c0:	d025      	beq.n	810390e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81038c2:	2301      	movs	r3, #1
 81038c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81038c6:	e022      	b.n	810390e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81038d0:	d11f      	bne.n	8103912 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81038d2:	2301      	movs	r3, #1
 81038d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81038d6:	e01c      	b.n	8103912 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038dc:	2b02      	cmp	r3, #2
 81038de:	d902      	bls.n	81038e6 <DMA_CheckFifoParam+0xb6>
 81038e0:	2b03      	cmp	r3, #3
 81038e2:	d003      	beq.n	81038ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81038e4:	e018      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81038e6:	2301      	movs	r3, #1
 81038e8:	73fb      	strb	r3, [r7, #15]
        break;
 81038ea:	e015      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d00e      	beq.n	8103916 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81038f8:	2301      	movs	r3, #1
 81038fa:	73fb      	strb	r3, [r7, #15]
    break;
 81038fc:	e00b      	b.n	8103916 <DMA_CheckFifoParam+0xe6>
        break;
 81038fe:	bf00      	nop
 8103900:	e00a      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        break;
 8103902:	bf00      	nop
 8103904:	e008      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        break;
 8103906:	bf00      	nop
 8103908:	e006      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        break;
 810390a:	bf00      	nop
 810390c:	e004      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        break;
 810390e:	bf00      	nop
 8103910:	e002      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
        break;
 8103912:	bf00      	nop
 8103914:	e000      	b.n	8103918 <DMA_CheckFifoParam+0xe8>
    break;
 8103916:	bf00      	nop
    }
  }

  return status;
 8103918:	7bfb      	ldrb	r3, [r7, #15]
}
 810391a:	4618      	mov	r0, r3
 810391c:	3714      	adds	r7, #20
 810391e:	46bd      	mov	sp, r7
 8103920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103924:	4770      	bx	lr
 8103926:	bf00      	nop

08103928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103928:	b480      	push	{r7}
 810392a:	b085      	sub	sp, #20
 810392c:	af00      	add	r7, sp, #0
 810392e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	681b      	ldr	r3, [r3, #0]
 810393a:	4a3a      	ldr	r2, [pc, #232]	; (8103a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810393c:	4293      	cmp	r3, r2
 810393e:	d022      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	4a38      	ldr	r2, [pc, #224]	; (8103a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103946:	4293      	cmp	r3, r2
 8103948:	d01d      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	4a37      	ldr	r2, [pc, #220]	; (8103a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103950:	4293      	cmp	r3, r2
 8103952:	d018      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	4a35      	ldr	r2, [pc, #212]	; (8103a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810395a:	4293      	cmp	r3, r2
 810395c:	d013      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	4a34      	ldr	r2, [pc, #208]	; (8103a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103964:	4293      	cmp	r3, r2
 8103966:	d00e      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	4a32      	ldr	r2, [pc, #200]	; (8103a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810396e:	4293      	cmp	r3, r2
 8103970:	d009      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	4a31      	ldr	r2, [pc, #196]	; (8103a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103978:	4293      	cmp	r3, r2
 810397a:	d004      	beq.n	8103986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	4a2f      	ldr	r2, [pc, #188]	; (8103a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103982:	4293      	cmp	r3, r2
 8103984:	d101      	bne.n	810398a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103986:	2301      	movs	r3, #1
 8103988:	e000      	b.n	810398c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810398a:	2300      	movs	r3, #0
 810398c:	2b00      	cmp	r3, #0
 810398e:	d01c      	beq.n	81039ca <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	b2db      	uxtb	r3, r3
 8103996:	3b08      	subs	r3, #8
 8103998:	4a2a      	ldr	r2, [pc, #168]	; (8103a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810399a:	fba2 2303 	umull	r2, r3, r2, r3
 810399e:	091b      	lsrs	r3, r3, #4
 81039a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81039a8:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81039ac:	009b      	lsls	r3, r3, #2
 81039ae:	461a      	mov	r2, r3
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	4a24      	ldr	r2, [pc, #144]	; (8103a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81039b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	f003 031f 	and.w	r3, r3, #31
 81039c0:	2201      	movs	r2, #1
 81039c2:	409a      	lsls	r2, r3
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81039c8:	e026      	b.n	8103a18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	b2db      	uxtb	r3, r3
 81039d0:	3b10      	subs	r3, #16
 81039d2:	4a1e      	ldr	r2, [pc, #120]	; (8103a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81039d4:	fba2 2303 	umull	r2, r3, r2, r3
 81039d8:	091b      	lsrs	r3, r3, #4
 81039da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81039dc:	68bb      	ldr	r3, [r7, #8]
 81039de:	4a1c      	ldr	r2, [pc, #112]	; (8103a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d806      	bhi.n	81039f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81039e4:	68bb      	ldr	r3, [r7, #8]
 81039e6:	4a1b      	ldr	r2, [pc, #108]	; (8103a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d902      	bls.n	81039f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81039ec:	68fb      	ldr	r3, [r7, #12]
 81039ee:	3308      	adds	r3, #8
 81039f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81039f2:	68fb      	ldr	r3, [r7, #12]
 81039f4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81039f8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81039fc:	009b      	lsls	r3, r3, #2
 81039fe:	461a      	mov	r2, r3
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	4a14      	ldr	r2, [pc, #80]	; (8103a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103a08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	f003 031f 	and.w	r3, r3, #31
 8103a10:	2201      	movs	r2, #1
 8103a12:	409a      	lsls	r2, r3
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103a18:	bf00      	nop
 8103a1a:	3714      	adds	r7, #20
 8103a1c:	46bd      	mov	sp, r7
 8103a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a22:	4770      	bx	lr
 8103a24:	58025408 	.word	0x58025408
 8103a28:	5802541c 	.word	0x5802541c
 8103a2c:	58025430 	.word	0x58025430
 8103a30:	58025444 	.word	0x58025444
 8103a34:	58025458 	.word	0x58025458
 8103a38:	5802546c 	.word	0x5802546c
 8103a3c:	58025480 	.word	0x58025480
 8103a40:	58025494 	.word	0x58025494
 8103a44:	cccccccd 	.word	0xcccccccd
 8103a48:	58025880 	.word	0x58025880
 8103a4c:	aaaaaaab 	.word	0xaaaaaaab
 8103a50:	400204b8 	.word	0x400204b8
 8103a54:	4002040f 	.word	0x4002040f
 8103a58:	40020880 	.word	0x40020880

08103a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103a5c:	b480      	push	{r7}
 8103a5e:	b085      	sub	sp, #20
 8103a60:	af00      	add	r7, sp, #0
 8103a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	685b      	ldr	r3, [r3, #4]
 8103a68:	b2db      	uxtb	r3, r3
 8103a6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103a6c:	68fb      	ldr	r3, [r7, #12]
 8103a6e:	2b00      	cmp	r3, #0
 8103a70:	d04a      	beq.n	8103b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	2b08      	cmp	r3, #8
 8103a76:	d847      	bhi.n	8103b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a25      	ldr	r2, [pc, #148]	; (8103b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d022      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a24      	ldr	r2, [pc, #144]	; (8103b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d01d      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a22      	ldr	r2, [pc, #136]	; (8103b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d018      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a21      	ldr	r2, [pc, #132]	; (8103b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d013      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a1f      	ldr	r2, [pc, #124]	; (8103b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d00e      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a1e      	ldr	r2, [pc, #120]	; (8103b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d009      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a1c      	ldr	r2, [pc, #112]	; (8103b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d004      	beq.n	8103ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a1b      	ldr	r2, [pc, #108]	; (8103b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d101      	bne.n	8103acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8103ac8:	2301      	movs	r3, #1
 8103aca:	e000      	b.n	8103ace <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8103acc:	2300      	movs	r3, #0
 8103ace:	2b00      	cmp	r3, #0
 8103ad0:	d00a      	beq.n	8103ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103ad2:	68fa      	ldr	r2, [r7, #12]
 8103ad4:	4b17      	ldr	r3, [pc, #92]	; (8103b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103ad6:	4413      	add	r3, r2
 8103ad8:	009b      	lsls	r3, r3, #2
 8103ada:	461a      	mov	r2, r3
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	4a15      	ldr	r2, [pc, #84]	; (8103b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103ae4:	671a      	str	r2, [r3, #112]	; 0x70
 8103ae6:	e009      	b.n	8103afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103ae8:	68fa      	ldr	r2, [r7, #12]
 8103aea:	4b14      	ldr	r3, [pc, #80]	; (8103b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103aec:	4413      	add	r3, r2
 8103aee:	009b      	lsls	r3, r3, #2
 8103af0:	461a      	mov	r2, r3
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	4a11      	ldr	r2, [pc, #68]	; (8103b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8103afa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	3b01      	subs	r3, #1
 8103b00:	2201      	movs	r2, #1
 8103b02:	409a      	lsls	r2, r3
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103b08:	bf00      	nop
 8103b0a:	3714      	adds	r7, #20
 8103b0c:	46bd      	mov	sp, r7
 8103b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b12:	4770      	bx	lr
 8103b14:	58025408 	.word	0x58025408
 8103b18:	5802541c 	.word	0x5802541c
 8103b1c:	58025430 	.word	0x58025430
 8103b20:	58025444 	.word	0x58025444
 8103b24:	58025458 	.word	0x58025458
 8103b28:	5802546c 	.word	0x5802546c
 8103b2c:	58025480 	.word	0x58025480
 8103b30:	58025494 	.word	0x58025494
 8103b34:	1600963f 	.word	0x1600963f
 8103b38:	58025940 	.word	0x58025940
 8103b3c:	1000823f 	.word	0x1000823f
 8103b40:	40020940 	.word	0x40020940

08103b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103b44:	b480      	push	{r7}
 8103b46:	b089      	sub	sp, #36	; 0x24
 8103b48:	af00      	add	r7, sp, #0
 8103b4a:	6078      	str	r0, [r7, #4]
 8103b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103b4e:	2300      	movs	r3, #0
 8103b50:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103b52:	4b89      	ldr	r3, [pc, #548]	; (8103d78 <HAL_GPIO_Init+0x234>)
 8103b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b56:	e194      	b.n	8103e82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103b58:	683b      	ldr	r3, [r7, #0]
 8103b5a:	681a      	ldr	r2, [r3, #0]
 8103b5c:	2101      	movs	r1, #1
 8103b5e:	69fb      	ldr	r3, [r7, #28]
 8103b60:	fa01 f303 	lsl.w	r3, r1, r3
 8103b64:	4013      	ands	r3, r2
 8103b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103b68:	693b      	ldr	r3, [r7, #16]
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	f000 8186 	beq.w	8103e7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103b70:	683b      	ldr	r3, [r7, #0]
 8103b72:	685b      	ldr	r3, [r3, #4]
 8103b74:	2b01      	cmp	r3, #1
 8103b76:	d00b      	beq.n	8103b90 <HAL_GPIO_Init+0x4c>
 8103b78:	683b      	ldr	r3, [r7, #0]
 8103b7a:	685b      	ldr	r3, [r3, #4]
 8103b7c:	2b02      	cmp	r3, #2
 8103b7e:	d007      	beq.n	8103b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103b80:	683b      	ldr	r3, [r7, #0]
 8103b82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103b84:	2b11      	cmp	r3, #17
 8103b86:	d003      	beq.n	8103b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103b88:	683b      	ldr	r3, [r7, #0]
 8103b8a:	685b      	ldr	r3, [r3, #4]
 8103b8c:	2b12      	cmp	r3, #18
 8103b8e:	d130      	bne.n	8103bf2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	689b      	ldr	r3, [r3, #8]
 8103b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103b96:	69fb      	ldr	r3, [r7, #28]
 8103b98:	005b      	lsls	r3, r3, #1
 8103b9a:	2203      	movs	r2, #3
 8103b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8103ba0:	43db      	mvns	r3, r3
 8103ba2:	69ba      	ldr	r2, [r7, #24]
 8103ba4:	4013      	ands	r3, r2
 8103ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103ba8:	683b      	ldr	r3, [r7, #0]
 8103baa:	68da      	ldr	r2, [r3, #12]
 8103bac:	69fb      	ldr	r3, [r7, #28]
 8103bae:	005b      	lsls	r3, r3, #1
 8103bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8103bb4:	69ba      	ldr	r2, [r7, #24]
 8103bb6:	4313      	orrs	r3, r2
 8103bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	69ba      	ldr	r2, [r7, #24]
 8103bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	685b      	ldr	r3, [r3, #4]
 8103bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103bc6:	2201      	movs	r2, #1
 8103bc8:	69fb      	ldr	r3, [r7, #28]
 8103bca:	fa02 f303 	lsl.w	r3, r2, r3
 8103bce:	43db      	mvns	r3, r3
 8103bd0:	69ba      	ldr	r2, [r7, #24]
 8103bd2:	4013      	ands	r3, r2
 8103bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8103bd6:	683b      	ldr	r3, [r7, #0]
 8103bd8:	685b      	ldr	r3, [r3, #4]
 8103bda:	091b      	lsrs	r3, r3, #4
 8103bdc:	f003 0201 	and.w	r2, r3, #1
 8103be0:	69fb      	ldr	r3, [r7, #28]
 8103be2:	fa02 f303 	lsl.w	r3, r2, r3
 8103be6:	69ba      	ldr	r2, [r7, #24]
 8103be8:	4313      	orrs	r3, r2
 8103bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	69ba      	ldr	r2, [r7, #24]
 8103bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	68db      	ldr	r3, [r3, #12]
 8103bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103bf8:	69fb      	ldr	r3, [r7, #28]
 8103bfa:	005b      	lsls	r3, r3, #1
 8103bfc:	2203      	movs	r2, #3
 8103bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8103c02:	43db      	mvns	r3, r3
 8103c04:	69ba      	ldr	r2, [r7, #24]
 8103c06:	4013      	ands	r3, r2
 8103c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103c0a:	683b      	ldr	r3, [r7, #0]
 8103c0c:	689a      	ldr	r2, [r3, #8]
 8103c0e:	69fb      	ldr	r3, [r7, #28]
 8103c10:	005b      	lsls	r3, r3, #1
 8103c12:	fa02 f303 	lsl.w	r3, r2, r3
 8103c16:	69ba      	ldr	r2, [r7, #24]
 8103c18:	4313      	orrs	r3, r2
 8103c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	69ba      	ldr	r2, [r7, #24]
 8103c20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103c22:	683b      	ldr	r3, [r7, #0]
 8103c24:	685b      	ldr	r3, [r3, #4]
 8103c26:	2b02      	cmp	r3, #2
 8103c28:	d003      	beq.n	8103c32 <HAL_GPIO_Init+0xee>
 8103c2a:	683b      	ldr	r3, [r7, #0]
 8103c2c:	685b      	ldr	r3, [r3, #4]
 8103c2e:	2b12      	cmp	r3, #18
 8103c30:	d123      	bne.n	8103c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103c32:	69fb      	ldr	r3, [r7, #28]
 8103c34:	08da      	lsrs	r2, r3, #3
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	3208      	adds	r2, #8
 8103c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103c40:	69fb      	ldr	r3, [r7, #28]
 8103c42:	f003 0307 	and.w	r3, r3, #7
 8103c46:	009b      	lsls	r3, r3, #2
 8103c48:	220f      	movs	r2, #15
 8103c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8103c4e:	43db      	mvns	r3, r3
 8103c50:	69ba      	ldr	r2, [r7, #24]
 8103c52:	4013      	ands	r3, r2
 8103c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103c56:	683b      	ldr	r3, [r7, #0]
 8103c58:	691a      	ldr	r2, [r3, #16]
 8103c5a:	69fb      	ldr	r3, [r7, #28]
 8103c5c:	f003 0307 	and.w	r3, r3, #7
 8103c60:	009b      	lsls	r3, r3, #2
 8103c62:	fa02 f303 	lsl.w	r3, r2, r3
 8103c66:	69ba      	ldr	r2, [r7, #24]
 8103c68:	4313      	orrs	r3, r2
 8103c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103c6c:	69fb      	ldr	r3, [r7, #28]
 8103c6e:	08da      	lsrs	r2, r3, #3
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	3208      	adds	r2, #8
 8103c74:	69b9      	ldr	r1, [r7, #24]
 8103c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103c80:	69fb      	ldr	r3, [r7, #28]
 8103c82:	005b      	lsls	r3, r3, #1
 8103c84:	2203      	movs	r2, #3
 8103c86:	fa02 f303 	lsl.w	r3, r2, r3
 8103c8a:	43db      	mvns	r3, r3
 8103c8c:	69ba      	ldr	r2, [r7, #24]
 8103c8e:	4013      	ands	r3, r2
 8103c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103c92:	683b      	ldr	r3, [r7, #0]
 8103c94:	685b      	ldr	r3, [r3, #4]
 8103c96:	f003 0203 	and.w	r2, r3, #3
 8103c9a:	69fb      	ldr	r3, [r7, #28]
 8103c9c:	005b      	lsls	r3, r3, #1
 8103c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8103ca2:	69ba      	ldr	r2, [r7, #24]
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	69ba      	ldr	r2, [r7, #24]
 8103cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8103cae:	683b      	ldr	r3, [r7, #0]
 8103cb0:	685b      	ldr	r3, [r3, #4]
 8103cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	f000 80e0 	beq.w	8103e7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103cbc:	4b2f      	ldr	r3, [pc, #188]	; (8103d7c <HAL_GPIO_Init+0x238>)
 8103cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103cc2:	4a2e      	ldr	r2, [pc, #184]	; (8103d7c <HAL_GPIO_Init+0x238>)
 8103cc4:	f043 0302 	orr.w	r3, r3, #2
 8103cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103ccc:	4b2b      	ldr	r3, [pc, #172]	; (8103d7c <HAL_GPIO_Init+0x238>)
 8103cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103cd2:	f003 0302 	and.w	r3, r3, #2
 8103cd6:	60fb      	str	r3, [r7, #12]
 8103cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103cda:	4a29      	ldr	r2, [pc, #164]	; (8103d80 <HAL_GPIO_Init+0x23c>)
 8103cdc:	69fb      	ldr	r3, [r7, #28]
 8103cde:	089b      	lsrs	r3, r3, #2
 8103ce0:	3302      	adds	r3, #2
 8103ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103ce8:	69fb      	ldr	r3, [r7, #28]
 8103cea:	f003 0303 	and.w	r3, r3, #3
 8103cee:	009b      	lsls	r3, r3, #2
 8103cf0:	220f      	movs	r2, #15
 8103cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8103cf6:	43db      	mvns	r3, r3
 8103cf8:	69ba      	ldr	r2, [r7, #24]
 8103cfa:	4013      	ands	r3, r2
 8103cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	4a20      	ldr	r2, [pc, #128]	; (8103d84 <HAL_GPIO_Init+0x240>)
 8103d02:	4293      	cmp	r3, r2
 8103d04:	d052      	beq.n	8103dac <HAL_GPIO_Init+0x268>
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	4a1f      	ldr	r2, [pc, #124]	; (8103d88 <HAL_GPIO_Init+0x244>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d031      	beq.n	8103d72 <HAL_GPIO_Init+0x22e>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	4a1e      	ldr	r2, [pc, #120]	; (8103d8c <HAL_GPIO_Init+0x248>)
 8103d12:	4293      	cmp	r3, r2
 8103d14:	d02b      	beq.n	8103d6e <HAL_GPIO_Init+0x22a>
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	4a1d      	ldr	r2, [pc, #116]	; (8103d90 <HAL_GPIO_Init+0x24c>)
 8103d1a:	4293      	cmp	r3, r2
 8103d1c:	d025      	beq.n	8103d6a <HAL_GPIO_Init+0x226>
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	4a1c      	ldr	r2, [pc, #112]	; (8103d94 <HAL_GPIO_Init+0x250>)
 8103d22:	4293      	cmp	r3, r2
 8103d24:	d01f      	beq.n	8103d66 <HAL_GPIO_Init+0x222>
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	4a1b      	ldr	r2, [pc, #108]	; (8103d98 <HAL_GPIO_Init+0x254>)
 8103d2a:	4293      	cmp	r3, r2
 8103d2c:	d019      	beq.n	8103d62 <HAL_GPIO_Init+0x21e>
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	4a1a      	ldr	r2, [pc, #104]	; (8103d9c <HAL_GPIO_Init+0x258>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d013      	beq.n	8103d5e <HAL_GPIO_Init+0x21a>
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	4a19      	ldr	r2, [pc, #100]	; (8103da0 <HAL_GPIO_Init+0x25c>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d00d      	beq.n	8103d5a <HAL_GPIO_Init+0x216>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	4a18      	ldr	r2, [pc, #96]	; (8103da4 <HAL_GPIO_Init+0x260>)
 8103d42:	4293      	cmp	r3, r2
 8103d44:	d007      	beq.n	8103d56 <HAL_GPIO_Init+0x212>
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	4a17      	ldr	r2, [pc, #92]	; (8103da8 <HAL_GPIO_Init+0x264>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d101      	bne.n	8103d52 <HAL_GPIO_Init+0x20e>
 8103d4e:	2309      	movs	r3, #9
 8103d50:	e02d      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d52:	230a      	movs	r3, #10
 8103d54:	e02b      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d56:	2308      	movs	r3, #8
 8103d58:	e029      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d5a:	2307      	movs	r3, #7
 8103d5c:	e027      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d5e:	2306      	movs	r3, #6
 8103d60:	e025      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d62:	2305      	movs	r3, #5
 8103d64:	e023      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d66:	2304      	movs	r3, #4
 8103d68:	e021      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d6a:	2303      	movs	r3, #3
 8103d6c:	e01f      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d6e:	2302      	movs	r3, #2
 8103d70:	e01d      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d72:	2301      	movs	r3, #1
 8103d74:	e01b      	b.n	8103dae <HAL_GPIO_Init+0x26a>
 8103d76:	bf00      	nop
 8103d78:	580000c0 	.word	0x580000c0
 8103d7c:	58024400 	.word	0x58024400
 8103d80:	58000400 	.word	0x58000400
 8103d84:	58020000 	.word	0x58020000
 8103d88:	58020400 	.word	0x58020400
 8103d8c:	58020800 	.word	0x58020800
 8103d90:	58020c00 	.word	0x58020c00
 8103d94:	58021000 	.word	0x58021000
 8103d98:	58021400 	.word	0x58021400
 8103d9c:	58021800 	.word	0x58021800
 8103da0:	58021c00 	.word	0x58021c00
 8103da4:	58022000 	.word	0x58022000
 8103da8:	58022400 	.word	0x58022400
 8103dac:	2300      	movs	r3, #0
 8103dae:	69fa      	ldr	r2, [r7, #28]
 8103db0:	f002 0203 	and.w	r2, r2, #3
 8103db4:	0092      	lsls	r2, r2, #2
 8103db6:	4093      	lsls	r3, r2
 8103db8:	69ba      	ldr	r2, [r7, #24]
 8103dba:	4313      	orrs	r3, r2
 8103dbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103dbe:	4938      	ldr	r1, [pc, #224]	; (8103ea0 <HAL_GPIO_Init+0x35c>)
 8103dc0:	69fb      	ldr	r3, [r7, #28]
 8103dc2:	089b      	lsrs	r3, r3, #2
 8103dc4:	3302      	adds	r3, #2
 8103dc6:	69ba      	ldr	r2, [r7, #24]
 8103dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103dcc:	697b      	ldr	r3, [r7, #20]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103dd2:	693b      	ldr	r3, [r7, #16]
 8103dd4:	43db      	mvns	r3, r3
 8103dd6:	69ba      	ldr	r2, [r7, #24]
 8103dd8:	4013      	ands	r3, r2
 8103dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8103ddc:	683b      	ldr	r3, [r7, #0]
 8103dde:	685b      	ldr	r3, [r3, #4]
 8103de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103de4:	2b00      	cmp	r3, #0
 8103de6:	d003      	beq.n	8103df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8103de8:	69ba      	ldr	r2, [r7, #24]
 8103dea:	693b      	ldr	r3, [r7, #16]
 8103dec:	4313      	orrs	r3, r2
 8103dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103df0:	697b      	ldr	r3, [r7, #20]
 8103df2:	69ba      	ldr	r2, [r7, #24]
 8103df4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8103df6:	697b      	ldr	r3, [r7, #20]
 8103df8:	685b      	ldr	r3, [r3, #4]
 8103dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103dfc:	693b      	ldr	r3, [r7, #16]
 8103dfe:	43db      	mvns	r3, r3
 8103e00:	69ba      	ldr	r2, [r7, #24]
 8103e02:	4013      	ands	r3, r2
 8103e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8103e06:	683b      	ldr	r3, [r7, #0]
 8103e08:	685b      	ldr	r3, [r3, #4]
 8103e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d003      	beq.n	8103e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8103e12:	69ba      	ldr	r2, [r7, #24]
 8103e14:	693b      	ldr	r3, [r7, #16]
 8103e16:	4313      	orrs	r3, r2
 8103e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103e1a:	697b      	ldr	r3, [r7, #20]
 8103e1c:	69ba      	ldr	r2, [r7, #24]
 8103e1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103e28:	693b      	ldr	r3, [r7, #16]
 8103e2a:	43db      	mvns	r3, r3
 8103e2c:	69ba      	ldr	r2, [r7, #24]
 8103e2e:	4013      	ands	r3, r2
 8103e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8103e32:	683b      	ldr	r3, [r7, #0]
 8103e34:	685b      	ldr	r3, [r3, #4]
 8103e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103e3a:	2b00      	cmp	r3, #0
 8103e3c:	d003      	beq.n	8103e46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8103e3e:	69ba      	ldr	r2, [r7, #24]
 8103e40:	693b      	ldr	r3, [r7, #16]
 8103e42:	4313      	orrs	r3, r2
 8103e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103e4a:	69bb      	ldr	r3, [r7, #24]
 8103e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103e52:	685b      	ldr	r3, [r3, #4]
 8103e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103e56:	693b      	ldr	r3, [r7, #16]
 8103e58:	43db      	mvns	r3, r3
 8103e5a:	69ba      	ldr	r2, [r7, #24]
 8103e5c:	4013      	ands	r3, r2
 8103e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8103e60:	683b      	ldr	r3, [r7, #0]
 8103e62:	685b      	ldr	r3, [r3, #4]
 8103e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d003      	beq.n	8103e74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8103e6c:	69ba      	ldr	r2, [r7, #24]
 8103e6e:	693b      	ldr	r3, [r7, #16]
 8103e70:	4313      	orrs	r3, r2
 8103e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103e78:	69bb      	ldr	r3, [r7, #24]
 8103e7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8103e7c:	69fb      	ldr	r3, [r7, #28]
 8103e7e:	3301      	adds	r3, #1
 8103e80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103e82:	683b      	ldr	r3, [r7, #0]
 8103e84:	681a      	ldr	r2, [r3, #0]
 8103e86:	69fb      	ldr	r3, [r7, #28]
 8103e88:	fa22 f303 	lsr.w	r3, r2, r3
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	f47f ae63 	bne.w	8103b58 <HAL_GPIO_Init+0x14>
  }
}
 8103e92:	bf00      	nop
 8103e94:	bf00      	nop
 8103e96:	3724      	adds	r7, #36	; 0x24
 8103e98:	46bd      	mov	sp, r7
 8103e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e9e:	4770      	bx	lr
 8103ea0:	58000400 	.word	0x58000400

08103ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8103ea4:	b580      	push	{r7, lr}
 8103ea6:	b082      	sub	sp, #8
 8103ea8:	af00      	add	r7, sp, #0
 8103eaa:	4603      	mov	r3, r0
 8103eac:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8103eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103eb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8103eb6:	88fb      	ldrh	r3, [r7, #6]
 8103eb8:	4013      	ands	r3, r2
 8103eba:	2b00      	cmp	r3, #0
 8103ebc:	d008      	beq.n	8103ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8103ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103ec2:	88fb      	ldrh	r3, [r7, #6]
 8103ec4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8103ec8:	88fb      	ldrh	r3, [r7, #6]
 8103eca:	4618      	mov	r0, r3
 8103ecc:	f7fc fccc 	bl	8100868 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8103ed0:	bf00      	nop
 8103ed2:	3708      	adds	r7, #8
 8103ed4:	46bd      	mov	sp, r7
 8103ed6:	bd80      	pop	{r7, pc}

08103ed8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103ed8:	b480      	push	{r7}
 8103eda:	b083      	sub	sp, #12
 8103edc:	af00      	add	r7, sp, #0
 8103ede:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103ee0:	4b05      	ldr	r3, [pc, #20]	; (8103ef8 <HAL_HSEM_ActivateNotification+0x20>)
 8103ee2:	681a      	ldr	r2, [r3, #0]
 8103ee4:	4904      	ldr	r1, [pc, #16]	; (8103ef8 <HAL_HSEM_ActivateNotification+0x20>)
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	4313      	orrs	r3, r2
 8103eea:	600b      	str	r3, [r1, #0]
#endif
}
 8103eec:	bf00      	nop
 8103eee:	370c      	adds	r7, #12
 8103ef0:	46bd      	mov	sp, r7
 8103ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ef6:	4770      	bx	lr
 8103ef8:	58026510 	.word	0x58026510

08103efc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103efc:	b580      	push	{r7, lr}
 8103efe:	b084      	sub	sp, #16
 8103f00:	af00      	add	r7, sp, #0
 8103f02:	60f8      	str	r0, [r7, #12]
 8103f04:	460b      	mov	r3, r1
 8103f06:	607a      	str	r2, [r7, #4]
 8103f08:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103f0a:	4b37      	ldr	r3, [pc, #220]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f0c:	681b      	ldr	r3, [r3, #0]
 8103f0e:	f023 0201 	bic.w	r2, r3, #1
 8103f12:	4935      	ldr	r1, [pc, #212]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f14:	68fb      	ldr	r3, [r7, #12]
 8103f16:	4313      	orrs	r3, r2
 8103f18:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d123      	bne.n	8103f68 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103f20:	f7fc ffc4 	bl	8100eac <HAL_GetCurrentCPUID>
 8103f24:	4603      	mov	r3, r0
 8103f26:	2b03      	cmp	r3, #3
 8103f28:	d158      	bne.n	8103fdc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103f2a:	4b2f      	ldr	r3, [pc, #188]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f2c:	691b      	ldr	r3, [r3, #16]
 8103f2e:	4a2e      	ldr	r2, [pc, #184]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f30:	f023 0301 	bic.w	r3, r3, #1
 8103f34:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103f36:	4b2d      	ldr	r3, [pc, #180]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f38:	691b      	ldr	r3, [r3, #16]
 8103f3a:	4a2c      	ldr	r2, [pc, #176]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f3c:	f043 0304 	orr.w	r3, r3, #4
 8103f40:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103f42:	f3bf 8f4f 	dsb	sy
}
 8103f46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103f48:	f3bf 8f6f 	isb	sy
}
 8103f4c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103f4e:	7afb      	ldrb	r3, [r7, #11]
 8103f50:	2b01      	cmp	r3, #1
 8103f52:	d101      	bne.n	8103f58 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103f54:	bf30      	wfi
 8103f56:	e000      	b.n	8103f5a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103f58:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103f5a:	4b24      	ldr	r3, [pc, #144]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f5c:	691b      	ldr	r3, [r3, #16]
 8103f5e:	4a23      	ldr	r2, [pc, #140]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f60:	f023 0304 	bic.w	r3, r3, #4
 8103f64:	6113      	str	r3, [r2, #16]
 8103f66:	e03c      	b.n	8103fe2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	2b01      	cmp	r3, #1
 8103f6c:	d123      	bne.n	8103fb6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103f6e:	f7fc ff9d 	bl	8100eac <HAL_GetCurrentCPUID>
 8103f72:	4603      	mov	r3, r0
 8103f74:	2b01      	cmp	r3, #1
 8103f76:	d133      	bne.n	8103fe0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103f78:	4b1b      	ldr	r3, [pc, #108]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f7a:	695b      	ldr	r3, [r3, #20]
 8103f7c:	4a1a      	ldr	r2, [pc, #104]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f7e:	f023 0302 	bic.w	r3, r3, #2
 8103f82:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103f84:	4b19      	ldr	r3, [pc, #100]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f86:	691b      	ldr	r3, [r3, #16]
 8103f88:	4a18      	ldr	r2, [pc, #96]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f8a:	f043 0304 	orr.w	r3, r3, #4
 8103f8e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103f90:	f3bf 8f4f 	dsb	sy
}
 8103f94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103f96:	f3bf 8f6f 	isb	sy
}
 8103f9a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103f9c:	7afb      	ldrb	r3, [r7, #11]
 8103f9e:	2b01      	cmp	r3, #1
 8103fa0:	d101      	bne.n	8103fa6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103fa2:	bf30      	wfi
 8103fa4:	e000      	b.n	8103fa8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103fa6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103fa8:	4b10      	ldr	r3, [pc, #64]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103faa:	691b      	ldr	r3, [r3, #16]
 8103fac:	4a0f      	ldr	r2, [pc, #60]	; (8103fec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103fae:	f023 0304 	bic.w	r3, r3, #4
 8103fb2:	6113      	str	r3, [r2, #16]
 8103fb4:	e015      	b.n	8103fe2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103fb6:	f7fc ff79 	bl	8100eac <HAL_GetCurrentCPUID>
 8103fba:	4603      	mov	r3, r0
 8103fbc:	2b03      	cmp	r3, #3
 8103fbe:	d106      	bne.n	8103fce <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103fc0:	4b09      	ldr	r3, [pc, #36]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fc2:	691b      	ldr	r3, [r3, #16]
 8103fc4:	4a08      	ldr	r2, [pc, #32]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fc6:	f023 0304 	bic.w	r3, r3, #4
 8103fca:	6113      	str	r3, [r2, #16]
 8103fcc:	e009      	b.n	8103fe2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103fce:	4b06      	ldr	r3, [pc, #24]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fd0:	695b      	ldr	r3, [r3, #20]
 8103fd2:	4a05      	ldr	r2, [pc, #20]	; (8103fe8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fd4:	f023 0304 	bic.w	r3, r3, #4
 8103fd8:	6153      	str	r3, [r2, #20]
 8103fda:	e002      	b.n	8103fe2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103fdc:	bf00      	nop
 8103fde:	e000      	b.n	8103fe2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103fe0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103fe2:	3710      	adds	r7, #16
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	bd80      	pop	{r7, pc}
 8103fe8:	58024800 	.word	0x58024800
 8103fec:	e000ed00 	.word	0xe000ed00

08103ff0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103ff4:	f7fc ff5a 	bl	8100eac <HAL_GetCurrentCPUID>
 8103ff8:	4603      	mov	r3, r0
 8103ffa:	2b03      	cmp	r3, #3
 8103ffc:	d101      	bne.n	8104002 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103ffe:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104000:	e001      	b.n	8104006 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104002:	bf40      	sev
    __WFE ();
 8104004:	bf20      	wfe
}
 8104006:	bf00      	nop
 8104008:	bd80      	pop	{r7, pc}
	...

0810400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810400c:	b480      	push	{r7}
 810400e:	b089      	sub	sp, #36	; 0x24
 8104010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104012:	4bb3      	ldr	r3, [pc, #716]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104014:	691b      	ldr	r3, [r3, #16]
 8104016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810401a:	2b18      	cmp	r3, #24
 810401c:	f200 8155 	bhi.w	81042ca <HAL_RCC_GetSysClockFreq+0x2be>
 8104020:	a201      	add	r2, pc, #4	; (adr r2, 8104028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104026:	bf00      	nop
 8104028:	0810408d 	.word	0x0810408d
 810402c:	081042cb 	.word	0x081042cb
 8104030:	081042cb 	.word	0x081042cb
 8104034:	081042cb 	.word	0x081042cb
 8104038:	081042cb 	.word	0x081042cb
 810403c:	081042cb 	.word	0x081042cb
 8104040:	081042cb 	.word	0x081042cb
 8104044:	081042cb 	.word	0x081042cb
 8104048:	081040b3 	.word	0x081040b3
 810404c:	081042cb 	.word	0x081042cb
 8104050:	081042cb 	.word	0x081042cb
 8104054:	081042cb 	.word	0x081042cb
 8104058:	081042cb 	.word	0x081042cb
 810405c:	081042cb 	.word	0x081042cb
 8104060:	081042cb 	.word	0x081042cb
 8104064:	081042cb 	.word	0x081042cb
 8104068:	081040b9 	.word	0x081040b9
 810406c:	081042cb 	.word	0x081042cb
 8104070:	081042cb 	.word	0x081042cb
 8104074:	081042cb 	.word	0x081042cb
 8104078:	081042cb 	.word	0x081042cb
 810407c:	081042cb 	.word	0x081042cb
 8104080:	081042cb 	.word	0x081042cb
 8104084:	081042cb 	.word	0x081042cb
 8104088:	081040bf 	.word	0x081040bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810408c:	4b94      	ldr	r3, [pc, #592]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	f003 0320 	and.w	r3, r3, #32
 8104094:	2b00      	cmp	r3, #0
 8104096:	d009      	beq.n	81040ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104098:	4b91      	ldr	r3, [pc, #580]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	08db      	lsrs	r3, r3, #3
 810409e:	f003 0303 	and.w	r3, r3, #3
 81040a2:	4a90      	ldr	r2, [pc, #576]	; (81042e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81040a4:	fa22 f303 	lsr.w	r3, r2, r3
 81040a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81040aa:	e111      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81040ac:	4b8d      	ldr	r3, [pc, #564]	; (81042e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81040ae:	61bb      	str	r3, [r7, #24]
    break;
 81040b0:	e10e      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81040b2:	4b8d      	ldr	r3, [pc, #564]	; (81042e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81040b4:	61bb      	str	r3, [r7, #24]
    break;
 81040b6:	e10b      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81040b8:	4b8c      	ldr	r3, [pc, #560]	; (81042ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 81040ba:	61bb      	str	r3, [r7, #24]
    break;
 81040bc:	e108      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81040be:	4b88      	ldr	r3, [pc, #544]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040c2:	f003 0303 	and.w	r3, r3, #3
 81040c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81040c8:	4b85      	ldr	r3, [pc, #532]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040cc:	091b      	lsrs	r3, r3, #4
 81040ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81040d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81040d4:	4b82      	ldr	r3, [pc, #520]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040d8:	f003 0301 	and.w	r3, r3, #1
 81040dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81040de:	4b80      	ldr	r3, [pc, #512]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81040e2:	08db      	lsrs	r3, r3, #3
 81040e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81040e8:	68fa      	ldr	r2, [r7, #12]
 81040ea:	fb02 f303 	mul.w	r3, r2, r3
 81040ee:	ee07 3a90 	vmov	s15, r3
 81040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81040fa:	693b      	ldr	r3, [r7, #16]
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	f000 80e1 	beq.w	81042c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104102:	697b      	ldr	r3, [r7, #20]
 8104104:	2b02      	cmp	r3, #2
 8104106:	f000 8083 	beq.w	8104210 <HAL_RCC_GetSysClockFreq+0x204>
 810410a:	697b      	ldr	r3, [r7, #20]
 810410c:	2b02      	cmp	r3, #2
 810410e:	f200 80a1 	bhi.w	8104254 <HAL_RCC_GetSysClockFreq+0x248>
 8104112:	697b      	ldr	r3, [r7, #20]
 8104114:	2b00      	cmp	r3, #0
 8104116:	d003      	beq.n	8104120 <HAL_RCC_GetSysClockFreq+0x114>
 8104118:	697b      	ldr	r3, [r7, #20]
 810411a:	2b01      	cmp	r3, #1
 810411c:	d056      	beq.n	81041cc <HAL_RCC_GetSysClockFreq+0x1c0>
 810411e:	e099      	b.n	8104254 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104120:	4b6f      	ldr	r3, [pc, #444]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	f003 0320 	and.w	r3, r3, #32
 8104128:	2b00      	cmp	r3, #0
 810412a:	d02d      	beq.n	8104188 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810412c:	4b6c      	ldr	r3, [pc, #432]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	08db      	lsrs	r3, r3, #3
 8104132:	f003 0303 	and.w	r3, r3, #3
 8104136:	4a6b      	ldr	r2, [pc, #428]	; (81042e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104138:	fa22 f303 	lsr.w	r3, r2, r3
 810413c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	ee07 3a90 	vmov	s15, r3
 8104144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104148:	693b      	ldr	r3, [r7, #16]
 810414a:	ee07 3a90 	vmov	s15, r3
 810414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104156:	4b62      	ldr	r3, [pc, #392]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810415e:	ee07 3a90 	vmov	s15, r3
 8104162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104166:	ed97 6a02 	vldr	s12, [r7, #8]
 810416a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81042f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104186:	e087      	b.n	8104298 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104188:	693b      	ldr	r3, [r7, #16]
 810418a:	ee07 3a90 	vmov	s15, r3
 810418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104192:	eddf 6a58 	vldr	s13, [pc, #352]	; 81042f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810419a:	4b51      	ldr	r3, [pc, #324]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041a2:	ee07 3a90 	vmov	s15, r3
 81041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81041ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 81042f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81041ca:	e065      	b.n	8104298 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81041cc:	693b      	ldr	r3, [r7, #16]
 81041ce:	ee07 3a90 	vmov	s15, r3
 81041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81042f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041de:	4b40      	ldr	r3, [pc, #256]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041e6:	ee07 3a90 	vmov	s15, r3
 81041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81041f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81042f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81041f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104206:	ee67 7a27 	vmul.f32	s15, s14, s15
 810420a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810420e:	e043      	b.n	8104298 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104210:	693b      	ldr	r3, [r7, #16]
 8104212:	ee07 3a90 	vmov	s15, r3
 8104216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810421a:	eddf 6a38 	vldr	s13, [pc, #224]	; 81042fc <HAL_RCC_GetSysClockFreq+0x2f0>
 810421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104222:	4b2f      	ldr	r3, [pc, #188]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810422a:	ee07 3a90 	vmov	s15, r3
 810422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104232:	ed97 6a02 	vldr	s12, [r7, #8]
 8104236:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81042f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810424e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104252:	e021      	b.n	8104298 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104254:	693b      	ldr	r3, [r7, #16]
 8104256:	ee07 3a90 	vmov	s15, r3
 810425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810425e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81042f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104266:	4b1e      	ldr	r3, [pc, #120]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810426e:	ee07 3a90 	vmov	s15, r3
 8104272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104276:	ed97 6a02 	vldr	s12, [r7, #8]
 810427a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81042f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104296:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104298:	4b11      	ldr	r3, [pc, #68]	; (81042e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810429c:	0a5b      	lsrs	r3, r3, #9
 810429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81042a2:	3301      	adds	r3, #1
 81042a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81042a6:	683b      	ldr	r3, [r7, #0]
 81042a8:	ee07 3a90 	vmov	s15, r3
 81042ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81042b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81042b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81042b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81042bc:	ee17 3a90 	vmov	r3, s15
 81042c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81042c2:	e005      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81042c4:	2300      	movs	r3, #0
 81042c6:	61bb      	str	r3, [r7, #24]
    break;
 81042c8:	e002      	b.n	81042d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81042ca:	4b07      	ldr	r3, [pc, #28]	; (81042e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81042cc:	61bb      	str	r3, [r7, #24]
    break;
 81042ce:	bf00      	nop
  }

  return sysclockfreq;
 81042d0:	69bb      	ldr	r3, [r7, #24]
}
 81042d2:	4618      	mov	r0, r3
 81042d4:	3724      	adds	r7, #36	; 0x24
 81042d6:	46bd      	mov	sp, r7
 81042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042dc:	4770      	bx	lr
 81042de:	bf00      	nop
 81042e0:	58024400 	.word	0x58024400
 81042e4:	03d09000 	.word	0x03d09000
 81042e8:	003d0900 	.word	0x003d0900
 81042ec:	007a1200 	.word	0x007a1200
 81042f0:	46000000 	.word	0x46000000
 81042f4:	4c742400 	.word	0x4c742400
 81042f8:	4a742400 	.word	0x4a742400
 81042fc:	4af42400 	.word	0x4af42400

08104300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104300:	b580      	push	{r7, lr}
 8104302:	b082      	sub	sp, #8
 8104304:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104306:	f7ff fe81 	bl	810400c <HAL_RCC_GetSysClockFreq>
 810430a:	4602      	mov	r2, r0
 810430c:	4b11      	ldr	r3, [pc, #68]	; (8104354 <HAL_RCC_GetHCLKFreq+0x54>)
 810430e:	699b      	ldr	r3, [r3, #24]
 8104310:	0a1b      	lsrs	r3, r3, #8
 8104312:	f003 030f 	and.w	r3, r3, #15
 8104316:	4910      	ldr	r1, [pc, #64]	; (8104358 <HAL_RCC_GetHCLKFreq+0x58>)
 8104318:	5ccb      	ldrb	r3, [r1, r3]
 810431a:	f003 031f 	and.w	r3, r3, #31
 810431e:	fa22 f303 	lsr.w	r3, r2, r3
 8104322:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104324:	4b0b      	ldr	r3, [pc, #44]	; (8104354 <HAL_RCC_GetHCLKFreq+0x54>)
 8104326:	699b      	ldr	r3, [r3, #24]
 8104328:	f003 030f 	and.w	r3, r3, #15
 810432c:	4a0a      	ldr	r2, [pc, #40]	; (8104358 <HAL_RCC_GetHCLKFreq+0x58>)
 810432e:	5cd3      	ldrb	r3, [r2, r3]
 8104330:	f003 031f 	and.w	r3, r3, #31
 8104334:	687a      	ldr	r2, [r7, #4]
 8104336:	fa22 f303 	lsr.w	r3, r2, r3
 810433a:	4a08      	ldr	r2, [pc, #32]	; (810435c <HAL_RCC_GetHCLKFreq+0x5c>)
 810433c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810433e:	4b07      	ldr	r3, [pc, #28]	; (810435c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a07      	ldr	r2, [pc, #28]	; (8104360 <HAL_RCC_GetHCLKFreq+0x60>)
 8104344:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104346:	4b05      	ldr	r3, [pc, #20]	; (810435c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104348:	681b      	ldr	r3, [r3, #0]
}
 810434a:	4618      	mov	r0, r3
 810434c:	3708      	adds	r7, #8
 810434e:	46bd      	mov	sp, r7
 8104350:	bd80      	pop	{r7, pc}
 8104352:	bf00      	nop
 8104354:	58024400 	.word	0x58024400
 8104358:	08107420 	.word	0x08107420
 810435c:	10000004 	.word	0x10000004
 8104360:	10000000 	.word	0x10000000

08104364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104364:	b580      	push	{r7, lr}
 8104366:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104368:	f7ff ffca 	bl	8104300 <HAL_RCC_GetHCLKFreq>
 810436c:	4602      	mov	r2, r0
 810436e:	4b06      	ldr	r3, [pc, #24]	; (8104388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104370:	69db      	ldr	r3, [r3, #28]
 8104372:	091b      	lsrs	r3, r3, #4
 8104374:	f003 0307 	and.w	r3, r3, #7
 8104378:	4904      	ldr	r1, [pc, #16]	; (810438c <HAL_RCC_GetPCLK1Freq+0x28>)
 810437a:	5ccb      	ldrb	r3, [r1, r3]
 810437c:	f003 031f 	and.w	r3, r3, #31
 8104380:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104384:	4618      	mov	r0, r3
 8104386:	bd80      	pop	{r7, pc}
 8104388:	58024400 	.word	0x58024400
 810438c:	08107420 	.word	0x08107420

08104390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104390:	b580      	push	{r7, lr}
 8104392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104394:	f7ff ffb4 	bl	8104300 <HAL_RCC_GetHCLKFreq>
 8104398:	4602      	mov	r2, r0
 810439a:	4b06      	ldr	r3, [pc, #24]	; (81043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 810439c:	69db      	ldr	r3, [r3, #28]
 810439e:	0a1b      	lsrs	r3, r3, #8
 81043a0:	f003 0307 	and.w	r3, r3, #7
 81043a4:	4904      	ldr	r1, [pc, #16]	; (81043b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 81043a6:	5ccb      	ldrb	r3, [r1, r3]
 81043a8:	f003 031f 	and.w	r3, r3, #31
 81043ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81043b0:	4618      	mov	r0, r3
 81043b2:	bd80      	pop	{r7, pc}
 81043b4:	58024400 	.word	0x58024400
 81043b8:	08107420 	.word	0x08107420

081043bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81043bc:	b580      	push	{r7, lr}
 81043be:	b086      	sub	sp, #24
 81043c0:	af00      	add	r7, sp, #0
 81043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81043c4:	2300      	movs	r3, #0
 81043c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81043c8:	2300      	movs	r3, #0
 81043ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d03f      	beq.n	8104458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81043dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81043e0:	d02a      	beq.n	8104438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81043e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81043e6:	d824      	bhi.n	8104432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81043e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81043ec:	d018      	beq.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81043ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81043f2:	d81e      	bhi.n	8104432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81043f4:	2b00      	cmp	r3, #0
 81043f6:	d003      	beq.n	8104400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81043f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81043fc:	d007      	beq.n	810440e <HAL_RCCEx_PeriphCLKConfig+0x52>
 81043fe:	e018      	b.n	8104432 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104400:	4bab      	ldr	r3, [pc, #684]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104404:	4aaa      	ldr	r2, [pc, #680]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810440a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810440c:	e015      	b.n	810443a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	3304      	adds	r3, #4
 8104412:	2102      	movs	r1, #2
 8104414:	4618      	mov	r0, r3
 8104416:	f001 f9cf 	bl	81057b8 <RCCEx_PLL2_Config>
 810441a:	4603      	mov	r3, r0
 810441c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810441e:	e00c      	b.n	810443a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	3324      	adds	r3, #36	; 0x24
 8104424:	2102      	movs	r1, #2
 8104426:	4618      	mov	r0, r3
 8104428:	f001 fa78 	bl	810591c <RCCEx_PLL3_Config>
 810442c:	4603      	mov	r3, r0
 810442e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104430:	e003      	b.n	810443a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104432:	2301      	movs	r3, #1
 8104434:	75fb      	strb	r3, [r7, #23]
      break;
 8104436:	e000      	b.n	810443a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104438:	bf00      	nop
    }

    if(ret == HAL_OK)
 810443a:	7dfb      	ldrb	r3, [r7, #23]
 810443c:	2b00      	cmp	r3, #0
 810443e:	d109      	bne.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104440:	4b9b      	ldr	r3, [pc, #620]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810444c:	4998      	ldr	r1, [pc, #608]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810444e:	4313      	orrs	r3, r2
 8104450:	650b      	str	r3, [r1, #80]	; 0x50
 8104452:	e001      	b.n	8104458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104454:	7dfb      	ldrb	r3, [r7, #23]
 8104456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104460:	2b00      	cmp	r3, #0
 8104462:	d03d      	beq.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104468:	2b04      	cmp	r3, #4
 810446a:	d826      	bhi.n	81044ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 810446c:	a201      	add	r2, pc, #4	; (adr r2, 8104474 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104472:	bf00      	nop
 8104474:	08104489 	.word	0x08104489
 8104478:	08104497 	.word	0x08104497
 810447c:	081044a9 	.word	0x081044a9
 8104480:	081044c1 	.word	0x081044c1
 8104484:	081044c1 	.word	0x081044c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104488:	4b89      	ldr	r3, [pc, #548]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810448c:	4a88      	ldr	r2, [pc, #544]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810448e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104494:	e015      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	3304      	adds	r3, #4
 810449a:	2100      	movs	r1, #0
 810449c:	4618      	mov	r0, r3
 810449e:	f001 f98b 	bl	81057b8 <RCCEx_PLL2_Config>
 81044a2:	4603      	mov	r3, r0
 81044a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81044a6:	e00c      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	3324      	adds	r3, #36	; 0x24
 81044ac:	2100      	movs	r1, #0
 81044ae:	4618      	mov	r0, r3
 81044b0:	f001 fa34 	bl	810591c <RCCEx_PLL3_Config>
 81044b4:	4603      	mov	r3, r0
 81044b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81044b8:	e003      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044ba:	2301      	movs	r3, #1
 81044bc:	75fb      	strb	r3, [r7, #23]
      break;
 81044be:	e000      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81044c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044c2:	7dfb      	ldrb	r3, [r7, #23]
 81044c4:	2b00      	cmp	r3, #0
 81044c6:	d109      	bne.n	81044dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81044c8:	4b79      	ldr	r3, [pc, #484]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81044ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81044cc:	f023 0207 	bic.w	r2, r3, #7
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044d4:	4976      	ldr	r1, [pc, #472]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81044d6:	4313      	orrs	r3, r2
 81044d8:	650b      	str	r3, [r1, #80]	; 0x50
 81044da:	e001      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044dc:	7dfb      	ldrb	r3, [r7, #23]
 81044de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81044e8:	2b00      	cmp	r3, #0
 81044ea:	d042      	beq.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044f4:	d02b      	beq.n	810454e <HAL_RCCEx_PeriphCLKConfig+0x192>
 81044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044fa:	d825      	bhi.n	8104548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81044fc:	2bc0      	cmp	r3, #192	; 0xc0
 81044fe:	d028      	beq.n	8104552 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104500:	2bc0      	cmp	r3, #192	; 0xc0
 8104502:	d821      	bhi.n	8104548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104504:	2b80      	cmp	r3, #128	; 0x80
 8104506:	d016      	beq.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104508:	2b80      	cmp	r3, #128	; 0x80
 810450a:	d81d      	bhi.n	8104548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810450c:	2b00      	cmp	r3, #0
 810450e:	d002      	beq.n	8104516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104510:	2b40      	cmp	r3, #64	; 0x40
 8104512:	d007      	beq.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104514:	e018      	b.n	8104548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104516:	4b66      	ldr	r3, [pc, #408]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810451a:	4a65      	ldr	r2, [pc, #404]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104520:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104522:	e017      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	3304      	adds	r3, #4
 8104528:	2100      	movs	r1, #0
 810452a:	4618      	mov	r0, r3
 810452c:	f001 f944 	bl	81057b8 <RCCEx_PLL2_Config>
 8104530:	4603      	mov	r3, r0
 8104532:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104534:	e00e      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	3324      	adds	r3, #36	; 0x24
 810453a:	2100      	movs	r1, #0
 810453c:	4618      	mov	r0, r3
 810453e:	f001 f9ed 	bl	810591c <RCCEx_PLL3_Config>
 8104542:	4603      	mov	r3, r0
 8104544:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104546:	e005      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104548:	2301      	movs	r3, #1
 810454a:	75fb      	strb	r3, [r7, #23]
      break;
 810454c:	e002      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810454e:	bf00      	nop
 8104550:	e000      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104554:	7dfb      	ldrb	r3, [r7, #23]
 8104556:	2b00      	cmp	r3, #0
 8104558:	d109      	bne.n	810456e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810455a:	4b55      	ldr	r3, [pc, #340]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810455e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104566:	4952      	ldr	r1, [pc, #328]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104568:	4313      	orrs	r3, r2
 810456a:	650b      	str	r3, [r1, #80]	; 0x50
 810456c:	e001      	b.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810456e:	7dfb      	ldrb	r3, [r7, #23]
 8104570:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810457a:	2b00      	cmp	r3, #0
 810457c:	d049      	beq.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104588:	d030      	beq.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 810458a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810458e:	d82a      	bhi.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104590:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104594:	d02c      	beq.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104596:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810459a:	d824      	bhi.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810459c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81045a0:	d018      	beq.n	81045d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81045a6:	d81e      	bhi.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d003      	beq.n	81045b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81045ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81045b0:	d007      	beq.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81045b2:	e018      	b.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045b4:	4b3e      	ldr	r3, [pc, #248]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045b8:	4a3d      	ldr	r2, [pc, #244]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81045ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81045c0:	e017      	b.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	3304      	adds	r3, #4
 81045c6:	2100      	movs	r1, #0
 81045c8:	4618      	mov	r0, r3
 81045ca:	f001 f8f5 	bl	81057b8 <RCCEx_PLL2_Config>
 81045ce:	4603      	mov	r3, r0
 81045d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81045d2:	e00e      	b.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	3324      	adds	r3, #36	; 0x24
 81045d8:	2100      	movs	r1, #0
 81045da:	4618      	mov	r0, r3
 81045dc:	f001 f99e 	bl	810591c <RCCEx_PLL3_Config>
 81045e0:	4603      	mov	r3, r0
 81045e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81045e4:	e005      	b.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81045e6:	2301      	movs	r3, #1
 81045e8:	75fb      	strb	r3, [r7, #23]
      break;
 81045ea:	e002      	b.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81045ec:	bf00      	nop
 81045ee:	e000      	b.n	81045f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81045f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045f2:	7dfb      	ldrb	r3, [r7, #23]
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d10a      	bne.n	810460e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81045f8:	4b2d      	ldr	r3, [pc, #180]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104606:	492a      	ldr	r1, [pc, #168]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104608:	4313      	orrs	r3, r2
 810460a:	658b      	str	r3, [r1, #88]	; 0x58
 810460c:	e001      	b.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460e:	7dfb      	ldrb	r3, [r7, #23]
 8104610:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810461a:	2b00      	cmp	r3, #0
 810461c:	d04c      	beq.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104628:	d030      	beq.n	810468c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810462a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810462e:	d82a      	bhi.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104630:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104634:	d02c      	beq.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8104636:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810463a:	d824      	bhi.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810463c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104640:	d018      	beq.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104646:	d81e      	bhi.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104648:	2b00      	cmp	r3, #0
 810464a:	d003      	beq.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810464c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104650:	d007      	beq.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104652:	e018      	b.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104654:	4b16      	ldr	r3, [pc, #88]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104658:	4a15      	ldr	r2, [pc, #84]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810465e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104660:	e017      	b.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	3304      	adds	r3, #4
 8104666:	2100      	movs	r1, #0
 8104668:	4618      	mov	r0, r3
 810466a:	f001 f8a5 	bl	81057b8 <RCCEx_PLL2_Config>
 810466e:	4603      	mov	r3, r0
 8104670:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104672:	e00e      	b.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	3324      	adds	r3, #36	; 0x24
 8104678:	2100      	movs	r1, #0
 810467a:	4618      	mov	r0, r3
 810467c:	f001 f94e 	bl	810591c <RCCEx_PLL3_Config>
 8104680:	4603      	mov	r3, r0
 8104682:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104684:	e005      	b.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104686:	2301      	movs	r3, #1
 8104688:	75fb      	strb	r3, [r7, #23]
      break;
 810468a:	e002      	b.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810468c:	bf00      	nop
 810468e:	e000      	b.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8104690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104692:	7dfb      	ldrb	r3, [r7, #23]
 8104694:	2b00      	cmp	r3, #0
 8104696:	d10d      	bne.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104698:	4b05      	ldr	r3, [pc, #20]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810469c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81046a6:	4902      	ldr	r1, [pc, #8]	; (81046b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81046a8:	4313      	orrs	r3, r2
 81046aa:	658b      	str	r3, [r1, #88]	; 0x58
 81046ac:	e004      	b.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81046ae:	bf00      	nop
 81046b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046b4:	7dfb      	ldrb	r3, [r7, #23]
 81046b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	d032      	beq.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81046c8:	2b30      	cmp	r3, #48	; 0x30
 81046ca:	d01c      	beq.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81046cc:	2b30      	cmp	r3, #48	; 0x30
 81046ce:	d817      	bhi.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81046d0:	2b20      	cmp	r3, #32
 81046d2:	d00c      	beq.n	81046ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 81046d4:	2b20      	cmp	r3, #32
 81046d6:	d813      	bhi.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81046d8:	2b00      	cmp	r3, #0
 81046da:	d016      	beq.n	810470a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81046dc:	2b10      	cmp	r3, #16
 81046de:	d10f      	bne.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046e0:	4baf      	ldr	r3, [pc, #700]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046e4:	4aae      	ldr	r2, [pc, #696]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81046e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81046ec:	e00e      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	3304      	adds	r3, #4
 81046f2:	2102      	movs	r1, #2
 81046f4:	4618      	mov	r0, r3
 81046f6:	f001 f85f 	bl	81057b8 <RCCEx_PLL2_Config>
 81046fa:	4603      	mov	r3, r0
 81046fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81046fe:	e005      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104700:	2301      	movs	r3, #1
 8104702:	75fb      	strb	r3, [r7, #23]
      break;
 8104704:	e002      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8104706:	bf00      	nop
 8104708:	e000      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810470a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810470c:	7dfb      	ldrb	r3, [r7, #23]
 810470e:	2b00      	cmp	r3, #0
 8104710:	d109      	bne.n	8104726 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104712:	4ba3      	ldr	r3, [pc, #652]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104716:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810471e:	49a0      	ldr	r1, [pc, #640]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104720:	4313      	orrs	r3, r2
 8104722:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104724:	e001      	b.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104726:	7dfb      	ldrb	r3, [r7, #23]
 8104728:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	681b      	ldr	r3, [r3, #0]
 810472e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104732:	2b00      	cmp	r3, #0
 8104734:	d047      	beq.n	81047c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810473a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810473e:	d030      	beq.n	81047a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8104740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104744:	d82a      	bhi.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104746:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810474a:	d02c      	beq.n	81047a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810474c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104750:	d824      	bhi.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104756:	d018      	beq.n	810478a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8104758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810475c:	d81e      	bhi.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810475e:	2b00      	cmp	r3, #0
 8104760:	d003      	beq.n	810476a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8104762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104766:	d007      	beq.n	8104778 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8104768:	e018      	b.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810476a:	4b8d      	ldr	r3, [pc, #564]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810476e:	4a8c      	ldr	r2, [pc, #560]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104776:	e017      	b.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	3304      	adds	r3, #4
 810477c:	2100      	movs	r1, #0
 810477e:	4618      	mov	r0, r3
 8104780:	f001 f81a 	bl	81057b8 <RCCEx_PLL2_Config>
 8104784:	4603      	mov	r3, r0
 8104786:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104788:	e00e      	b.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	3324      	adds	r3, #36	; 0x24
 810478e:	2100      	movs	r1, #0
 8104790:	4618      	mov	r0, r3
 8104792:	f001 f8c3 	bl	810591c <RCCEx_PLL3_Config>
 8104796:	4603      	mov	r3, r0
 8104798:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810479a:	e005      	b.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810479c:	2301      	movs	r3, #1
 810479e:	75fb      	strb	r3, [r7, #23]
      break;
 81047a0:	e002      	b.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81047a2:	bf00      	nop
 81047a4:	e000      	b.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047a8:	7dfb      	ldrb	r3, [r7, #23]
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d109      	bne.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81047ae:	4b7c      	ldr	r3, [pc, #496]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047ba:	4979      	ldr	r1, [pc, #484]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81047bc:	4313      	orrs	r3, r2
 81047be:	650b      	str	r3, [r1, #80]	; 0x50
 81047c0:	e001      	b.n	81047c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047c2:	7dfb      	ldrb	r3, [r7, #23]
 81047c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	681b      	ldr	r3, [r3, #0]
 81047ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	d049      	beq.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81047d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81047da:	d02e      	beq.n	810483a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81047dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81047e0:	d828      	bhi.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81047e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81047e6:	d02a      	beq.n	810483e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81047e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81047ec:	d822      	bhi.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81047ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81047f2:	d026      	beq.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81047f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81047f8:	d81c      	bhi.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81047fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81047fe:	d010      	beq.n	8104822 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8104800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104804:	d816      	bhi.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8104806:	2b00      	cmp	r3, #0
 8104808:	d01d      	beq.n	8104846 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810480a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810480e:	d111      	bne.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	3304      	adds	r3, #4
 8104814:	2101      	movs	r1, #1
 8104816:	4618      	mov	r0, r3
 8104818:	f000 ffce 	bl	81057b8 <RCCEx_PLL2_Config>
 810481c:	4603      	mov	r3, r0
 810481e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104820:	e012      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	3324      	adds	r3, #36	; 0x24
 8104826:	2101      	movs	r1, #1
 8104828:	4618      	mov	r0, r3
 810482a:	f001 f877 	bl	810591c <RCCEx_PLL3_Config>
 810482e:	4603      	mov	r3, r0
 8104830:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104832:	e009      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104834:	2301      	movs	r3, #1
 8104836:	75fb      	strb	r3, [r7, #23]
      break;
 8104838:	e006      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810483a:	bf00      	nop
 810483c:	e004      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810483e:	bf00      	nop
 8104840:	e002      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104842:	bf00      	nop
 8104844:	e000      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104848:	7dfb      	ldrb	r3, [r7, #23]
 810484a:	2b00      	cmp	r3, #0
 810484c:	d109      	bne.n	8104862 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810484e:	4b54      	ldr	r3, [pc, #336]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104852:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810485a:	4951      	ldr	r1, [pc, #324]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810485c:	4313      	orrs	r3, r2
 810485e:	650b      	str	r3, [r1, #80]	; 0x50
 8104860:	e001      	b.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104862:	7dfb      	ldrb	r3, [r7, #23]
 8104864:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810486e:	2b00      	cmp	r3, #0
 8104870:	d04b      	beq.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810487c:	d02e      	beq.n	81048dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 810487e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104882:	d828      	bhi.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104888:	d02a      	beq.n	81048e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810488a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810488e:	d822      	bhi.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104890:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104894:	d026      	beq.n	81048e4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8104896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810489a:	d81c      	bhi.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810489c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048a0:	d010      	beq.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81048a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048a6:	d816      	bhi.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81048a8:	2b00      	cmp	r3, #0
 81048aa:	d01d      	beq.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81048ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81048b0:	d111      	bne.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	3304      	adds	r3, #4
 81048b6:	2101      	movs	r1, #1
 81048b8:	4618      	mov	r0, r3
 81048ba:	f000 ff7d 	bl	81057b8 <RCCEx_PLL2_Config>
 81048be:	4603      	mov	r3, r0
 81048c0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81048c2:	e012      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	3324      	adds	r3, #36	; 0x24
 81048c8:	2101      	movs	r1, #1
 81048ca:	4618      	mov	r0, r3
 81048cc:	f001 f826 	bl	810591c <RCCEx_PLL3_Config>
 81048d0:	4603      	mov	r3, r0
 81048d2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81048d4:	e009      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81048d6:	2301      	movs	r3, #1
 81048d8:	75fb      	strb	r3, [r7, #23]
      break;
 81048da:	e006      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81048dc:	bf00      	nop
 81048de:	e004      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81048e0:	bf00      	nop
 81048e2:	e002      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81048e4:	bf00      	nop
 81048e6:	e000      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81048ea:	7dfb      	ldrb	r3, [r7, #23]
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	d10a      	bne.n	8104906 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81048f0:	4b2b      	ldr	r3, [pc, #172]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81048fe:	4928      	ldr	r1, [pc, #160]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104900:	4313      	orrs	r3, r2
 8104902:	658b      	str	r3, [r1, #88]	; 0x58
 8104904:	e001      	b.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104906:	7dfb      	ldrb	r3, [r7, #23]
 8104908:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104912:	2b00      	cmp	r3, #0
 8104914:	d02f      	beq.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810491a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810491e:	d00e      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8104920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104924:	d814      	bhi.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8104926:	2b00      	cmp	r3, #0
 8104928:	d015      	beq.n	8104956 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810492a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810492e:	d10f      	bne.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104930:	4b1b      	ldr	r3, [pc, #108]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104934:	4a1a      	ldr	r2, [pc, #104]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810493a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810493c:	e00c      	b.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	3304      	adds	r3, #4
 8104942:	2101      	movs	r1, #1
 8104944:	4618      	mov	r0, r3
 8104946:	f000 ff37 	bl	81057b8 <RCCEx_PLL2_Config>
 810494a:	4603      	mov	r3, r0
 810494c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810494e:	e003      	b.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104950:	2301      	movs	r3, #1
 8104952:	75fb      	strb	r3, [r7, #23]
      break;
 8104954:	e000      	b.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8104956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104958:	7dfb      	ldrb	r3, [r7, #23]
 810495a:	2b00      	cmp	r3, #0
 810495c:	d109      	bne.n	8104972 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810495e:	4b10      	ldr	r3, [pc, #64]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810496a:	490d      	ldr	r1, [pc, #52]	; (81049a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810496c:	4313      	orrs	r3, r2
 810496e:	650b      	str	r3, [r1, #80]	; 0x50
 8104970:	e001      	b.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104972:	7dfb      	ldrb	r3, [r7, #23]
 8104974:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810497e:	2b00      	cmp	r3, #0
 8104980:	d033      	beq.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104986:	2b03      	cmp	r3, #3
 8104988:	d81c      	bhi.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810498a:	a201      	add	r2, pc, #4	; (adr r2, 8104990 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104990:	081049cb 	.word	0x081049cb
 8104994:	081049a5 	.word	0x081049a5
 8104998:	081049b3 	.word	0x081049b3
 810499c:	081049cb 	.word	0x081049cb
 81049a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049a4:	4bb9      	ldr	r3, [pc, #740]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049a8:	4ab8      	ldr	r2, [pc, #736]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81049b0:	e00c      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	3304      	adds	r3, #4
 81049b6:	2102      	movs	r1, #2
 81049b8:	4618      	mov	r0, r3
 81049ba:	f000 fefd 	bl	81057b8 <RCCEx_PLL2_Config>
 81049be:	4603      	mov	r3, r0
 81049c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81049c2:	e003      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81049c4:	2301      	movs	r3, #1
 81049c6:	75fb      	strb	r3, [r7, #23]
      break;
 81049c8:	e000      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81049ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049cc:	7dfb      	ldrb	r3, [r7, #23]
 81049ce:	2b00      	cmp	r3, #0
 81049d0:	d109      	bne.n	81049e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81049d2:	4bae      	ldr	r3, [pc, #696]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81049d6:	f023 0203 	bic.w	r2, r3, #3
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81049de:	49ab      	ldr	r1, [pc, #684]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81049e0:	4313      	orrs	r3, r2
 81049e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81049e4:	e001      	b.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049e6:	7dfb      	ldrb	r3, [r7, #23]
 81049e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81049f2:	2b00      	cmp	r3, #0
 81049f4:	f000 8088 	beq.w	8104b08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81049f8:	4ba5      	ldr	r3, [pc, #660]	; (8104c90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	4aa4      	ldr	r2, [pc, #656]	; (8104c90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104a04:	f7fc f936 	bl	8100c74 <HAL_GetTick>
 8104a08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104a0a:	e009      	b.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104a0c:	f7fc f932 	bl	8100c74 <HAL_GetTick>
 8104a10:	4602      	mov	r2, r0
 8104a12:	693b      	ldr	r3, [r7, #16]
 8104a14:	1ad3      	subs	r3, r2, r3
 8104a16:	2b64      	cmp	r3, #100	; 0x64
 8104a18:	d902      	bls.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104a1a:	2303      	movs	r3, #3
 8104a1c:	75fb      	strb	r3, [r7, #23]
        break;
 8104a1e:	e005      	b.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104a20:	4b9b      	ldr	r3, [pc, #620]	; (8104c90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	d0ef      	beq.n	8104a0c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104a2c:	7dfb      	ldrb	r3, [r7, #23]
 8104a2e:	2b00      	cmp	r3, #0
 8104a30:	d168      	bne.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104a32:	4b96      	ldr	r3, [pc, #600]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104a3c:	4053      	eors	r3, r2
 8104a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104a42:	2b00      	cmp	r3, #0
 8104a44:	d013      	beq.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104a46:	4b91      	ldr	r3, [pc, #580]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104a4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104a50:	4b8e      	ldr	r3, [pc, #568]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a54:	4a8d      	ldr	r2, [pc, #564]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104a5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104a5c:	4b8b      	ldr	r3, [pc, #556]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a60:	4a8a      	ldr	r2, [pc, #552]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104a66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104a68:	4a88      	ldr	r2, [pc, #544]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a6a:	68fb      	ldr	r3, [r7, #12]
 8104a6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a78:	d115      	bne.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104a7a:	f7fc f8fb 	bl	8100c74 <HAL_GetTick>
 8104a7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104a80:	e00b      	b.n	8104a9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104a82:	f7fc f8f7 	bl	8100c74 <HAL_GetTick>
 8104a86:	4602      	mov	r2, r0
 8104a88:	693b      	ldr	r3, [r7, #16]
 8104a8a:	1ad3      	subs	r3, r2, r3
 8104a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8104a90:	4293      	cmp	r3, r2
 8104a92:	d902      	bls.n	8104a9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104a94:	2303      	movs	r3, #3
 8104a96:	75fb      	strb	r3, [r7, #23]
            break;
 8104a98:	e005      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104a9a:	4b7c      	ldr	r3, [pc, #496]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a9e:	f003 0302 	and.w	r3, r3, #2
 8104aa2:	2b00      	cmp	r3, #0
 8104aa4:	d0ed      	beq.n	8104a82 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8104aa6:	7dfb      	ldrb	r3, [r7, #23]
 8104aa8:	2b00      	cmp	r3, #0
 8104aaa:	d128      	bne.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104aba:	d10f      	bne.n	8104adc <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104abc:	4b73      	ldr	r3, [pc, #460]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104abe:	691b      	ldr	r3, [r3, #16]
 8104ac0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104aca:	091b      	lsrs	r3, r3, #4
 8104acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104ad0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104ad4:	496d      	ldr	r1, [pc, #436]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104ad6:	4313      	orrs	r3, r2
 8104ad8:	610b      	str	r3, [r1, #16]
 8104ada:	e005      	b.n	8104ae8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104adc:	4b6b      	ldr	r3, [pc, #428]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104ade:	691b      	ldr	r3, [r3, #16]
 8104ae0:	4a6a      	ldr	r2, [pc, #424]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104ae2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104ae6:	6113      	str	r3, [r2, #16]
 8104ae8:	4b68      	ldr	r3, [pc, #416]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104af6:	4965      	ldr	r1, [pc, #404]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104af8:	4313      	orrs	r3, r2
 8104afa:	670b      	str	r3, [r1, #112]	; 0x70
 8104afc:	e004      	b.n	8104b08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104afe:	7dfb      	ldrb	r3, [r7, #23]
 8104b00:	75bb      	strb	r3, [r7, #22]
 8104b02:	e001      	b.n	8104b08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b04:	7dfb      	ldrb	r3, [r7, #23]
 8104b06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	f003 0301 	and.w	r3, r3, #1
 8104b10:	2b00      	cmp	r3, #0
 8104b12:	d07e      	beq.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104b18:	2b28      	cmp	r3, #40	; 0x28
 8104b1a:	d867      	bhi.n	8104bec <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104b1c:	a201      	add	r2, pc, #4	; (adr r2, 8104b24 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b22:	bf00      	nop
 8104b24:	08104bf3 	.word	0x08104bf3
 8104b28:	08104bed 	.word	0x08104bed
 8104b2c:	08104bed 	.word	0x08104bed
 8104b30:	08104bed 	.word	0x08104bed
 8104b34:	08104bed 	.word	0x08104bed
 8104b38:	08104bed 	.word	0x08104bed
 8104b3c:	08104bed 	.word	0x08104bed
 8104b40:	08104bed 	.word	0x08104bed
 8104b44:	08104bc9 	.word	0x08104bc9
 8104b48:	08104bed 	.word	0x08104bed
 8104b4c:	08104bed 	.word	0x08104bed
 8104b50:	08104bed 	.word	0x08104bed
 8104b54:	08104bed 	.word	0x08104bed
 8104b58:	08104bed 	.word	0x08104bed
 8104b5c:	08104bed 	.word	0x08104bed
 8104b60:	08104bed 	.word	0x08104bed
 8104b64:	08104bdb 	.word	0x08104bdb
 8104b68:	08104bed 	.word	0x08104bed
 8104b6c:	08104bed 	.word	0x08104bed
 8104b70:	08104bed 	.word	0x08104bed
 8104b74:	08104bed 	.word	0x08104bed
 8104b78:	08104bed 	.word	0x08104bed
 8104b7c:	08104bed 	.word	0x08104bed
 8104b80:	08104bed 	.word	0x08104bed
 8104b84:	08104bf3 	.word	0x08104bf3
 8104b88:	08104bed 	.word	0x08104bed
 8104b8c:	08104bed 	.word	0x08104bed
 8104b90:	08104bed 	.word	0x08104bed
 8104b94:	08104bed 	.word	0x08104bed
 8104b98:	08104bed 	.word	0x08104bed
 8104b9c:	08104bed 	.word	0x08104bed
 8104ba0:	08104bed 	.word	0x08104bed
 8104ba4:	08104bf3 	.word	0x08104bf3
 8104ba8:	08104bed 	.word	0x08104bed
 8104bac:	08104bed 	.word	0x08104bed
 8104bb0:	08104bed 	.word	0x08104bed
 8104bb4:	08104bed 	.word	0x08104bed
 8104bb8:	08104bed 	.word	0x08104bed
 8104bbc:	08104bed 	.word	0x08104bed
 8104bc0:	08104bed 	.word	0x08104bed
 8104bc4:	08104bf3 	.word	0x08104bf3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	3304      	adds	r3, #4
 8104bcc:	2101      	movs	r1, #1
 8104bce:	4618      	mov	r0, r3
 8104bd0:	f000 fdf2 	bl	81057b8 <RCCEx_PLL2_Config>
 8104bd4:	4603      	mov	r3, r0
 8104bd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104bd8:	e00c      	b.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	3324      	adds	r3, #36	; 0x24
 8104bde:	2101      	movs	r1, #1
 8104be0:	4618      	mov	r0, r3
 8104be2:	f000 fe9b 	bl	810591c <RCCEx_PLL3_Config>
 8104be6:	4603      	mov	r3, r0
 8104be8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104bea:	e003      	b.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104bec:	2301      	movs	r3, #1
 8104bee:	75fb      	strb	r3, [r7, #23]
      break;
 8104bf0:	e000      	b.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8104bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104bf4:	7dfb      	ldrb	r3, [r7, #23]
 8104bf6:	2b00      	cmp	r3, #0
 8104bf8:	d109      	bne.n	8104c0e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104bfa:	4b24      	ldr	r3, [pc, #144]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104bfe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104c06:	4921      	ldr	r1, [pc, #132]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104c08:	4313      	orrs	r3, r2
 8104c0a:	654b      	str	r3, [r1, #84]	; 0x54
 8104c0c:	e001      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c0e:	7dfb      	ldrb	r3, [r7, #23]
 8104c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	f003 0302 	and.w	r3, r3, #2
 8104c1a:	2b00      	cmp	r3, #0
 8104c1c:	d03c      	beq.n	8104c98 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104c22:	2b05      	cmp	r3, #5
 8104c24:	d820      	bhi.n	8104c68 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8104c26:	a201      	add	r2, pc, #4	; (adr r2, 8104c2c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8104c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c2c:	08104c6f 	.word	0x08104c6f
 8104c30:	08104c45 	.word	0x08104c45
 8104c34:	08104c57 	.word	0x08104c57
 8104c38:	08104c6f 	.word	0x08104c6f
 8104c3c:	08104c6f 	.word	0x08104c6f
 8104c40:	08104c6f 	.word	0x08104c6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	3304      	adds	r3, #4
 8104c48:	2101      	movs	r1, #1
 8104c4a:	4618      	mov	r0, r3
 8104c4c:	f000 fdb4 	bl	81057b8 <RCCEx_PLL2_Config>
 8104c50:	4603      	mov	r3, r0
 8104c52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104c54:	e00c      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	3324      	adds	r3, #36	; 0x24
 8104c5a:	2101      	movs	r1, #1
 8104c5c:	4618      	mov	r0, r3
 8104c5e:	f000 fe5d 	bl	810591c <RCCEx_PLL3_Config>
 8104c62:	4603      	mov	r3, r0
 8104c64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104c66:	e003      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c68:	2301      	movs	r3, #1
 8104c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8104c6c:	e000      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8104c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c70:	7dfb      	ldrb	r3, [r7, #23]
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	d10e      	bne.n	8104c94 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104c76:	4b05      	ldr	r3, [pc, #20]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c7a:	f023 0207 	bic.w	r2, r3, #7
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104c82:	4902      	ldr	r1, [pc, #8]	; (8104c8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104c84:	4313      	orrs	r3, r2
 8104c86:	654b      	str	r3, [r1, #84]	; 0x54
 8104c88:	e006      	b.n	8104c98 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8104c8a:	bf00      	nop
 8104c8c:	58024400 	.word	0x58024400
 8104c90:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c94:	7dfb      	ldrb	r3, [r7, #23]
 8104c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	f003 0304 	and.w	r3, r3, #4
 8104ca0:	2b00      	cmp	r3, #0
 8104ca2:	d039      	beq.n	8104d18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104caa:	2b05      	cmp	r3, #5
 8104cac:	d820      	bhi.n	8104cf0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8104cae:	a201      	add	r2, pc, #4	; (adr r2, 8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8104cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cb4:	08104cf7 	.word	0x08104cf7
 8104cb8:	08104ccd 	.word	0x08104ccd
 8104cbc:	08104cdf 	.word	0x08104cdf
 8104cc0:	08104cf7 	.word	0x08104cf7
 8104cc4:	08104cf7 	.word	0x08104cf7
 8104cc8:	08104cf7 	.word	0x08104cf7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	3304      	adds	r3, #4
 8104cd0:	2101      	movs	r1, #1
 8104cd2:	4618      	mov	r0, r3
 8104cd4:	f000 fd70 	bl	81057b8 <RCCEx_PLL2_Config>
 8104cd8:	4603      	mov	r3, r0
 8104cda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104cdc:	e00c      	b.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	3324      	adds	r3, #36	; 0x24
 8104ce2:	2101      	movs	r1, #1
 8104ce4:	4618      	mov	r0, r3
 8104ce6:	f000 fe19 	bl	810591c <RCCEx_PLL3_Config>
 8104cea:	4603      	mov	r3, r0
 8104cec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104cee:	e003      	b.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104cf0:	2301      	movs	r3, #1
 8104cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8104cf4:	e000      	b.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8104cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104cf8:	7dfb      	ldrb	r3, [r7, #23]
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d10a      	bne.n	8104d14 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104cfe:	4bb7      	ldr	r3, [pc, #732]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d02:	f023 0207 	bic.w	r2, r3, #7
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104d0c:	49b3      	ldr	r1, [pc, #716]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104d0e:	4313      	orrs	r3, r2
 8104d10:	658b      	str	r3, [r1, #88]	; 0x58
 8104d12:	e001      	b.n	8104d18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d14:	7dfb      	ldrb	r3, [r7, #23]
 8104d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	f003 0320 	and.w	r3, r3, #32
 8104d20:	2b00      	cmp	r3, #0
 8104d22:	d04b      	beq.n	8104dbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104d2e:	d02e      	beq.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8104d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104d34:	d828      	bhi.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104d3a:	d02a      	beq.n	8104d92 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104d40:	d822      	bhi.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104d42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104d46:	d026      	beq.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104d4c:	d81c      	bhi.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d52:	d010      	beq.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8104d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d58:	d816      	bhi.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104d5a:	2b00      	cmp	r3, #0
 8104d5c:	d01d      	beq.n	8104d9a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104d62:	d111      	bne.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	3304      	adds	r3, #4
 8104d68:	2100      	movs	r1, #0
 8104d6a:	4618      	mov	r0, r3
 8104d6c:	f000 fd24 	bl	81057b8 <RCCEx_PLL2_Config>
 8104d70:	4603      	mov	r3, r0
 8104d72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104d74:	e012      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	3324      	adds	r3, #36	; 0x24
 8104d7a:	2102      	movs	r1, #2
 8104d7c:	4618      	mov	r0, r3
 8104d7e:	f000 fdcd 	bl	810591c <RCCEx_PLL3_Config>
 8104d82:	4603      	mov	r3, r0
 8104d84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104d86:	e009      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d88:	2301      	movs	r3, #1
 8104d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8104d8c:	e006      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104d8e:	bf00      	nop
 8104d90:	e004      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104d92:	bf00      	nop
 8104d94:	e002      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104d96:	bf00      	nop
 8104d98:	e000      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d9c:	7dfb      	ldrb	r3, [r7, #23]
 8104d9e:	2b00      	cmp	r3, #0
 8104da0:	d10a      	bne.n	8104db8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104da2:	4b8e      	ldr	r3, [pc, #568]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104da6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104db0:	498a      	ldr	r1, [pc, #552]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104db2:	4313      	orrs	r3, r2
 8104db4:	654b      	str	r3, [r1, #84]	; 0x54
 8104db6:	e001      	b.n	8104dbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104db8:	7dfb      	ldrb	r3, [r7, #23]
 8104dba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	681b      	ldr	r3, [r3, #0]
 8104dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104dc4:	2b00      	cmp	r3, #0
 8104dc6:	d04b      	beq.n	8104e60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104dce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104dd2:	d02e      	beq.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8104dd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104dd8:	d828      	bhi.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104dde:	d02a      	beq.n	8104e36 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104de4:	d822      	bhi.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104dea:	d026      	beq.n	8104e3a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104df0:	d81c      	bhi.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104df6:	d010      	beq.n	8104e1a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8104df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104dfc:	d816      	bhi.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104dfe:	2b00      	cmp	r3, #0
 8104e00:	d01d      	beq.n	8104e3e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104e06:	d111      	bne.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	3304      	adds	r3, #4
 8104e0c:	2100      	movs	r1, #0
 8104e0e:	4618      	mov	r0, r3
 8104e10:	f000 fcd2 	bl	81057b8 <RCCEx_PLL2_Config>
 8104e14:	4603      	mov	r3, r0
 8104e16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104e18:	e012      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	3324      	adds	r3, #36	; 0x24
 8104e1e:	2102      	movs	r1, #2
 8104e20:	4618      	mov	r0, r3
 8104e22:	f000 fd7b 	bl	810591c <RCCEx_PLL3_Config>
 8104e26:	4603      	mov	r3, r0
 8104e28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104e2a:	e009      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e2c:	2301      	movs	r3, #1
 8104e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8104e30:	e006      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104e32:	bf00      	nop
 8104e34:	e004      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104e36:	bf00      	nop
 8104e38:	e002      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104e3a:	bf00      	nop
 8104e3c:	e000      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e40:	7dfb      	ldrb	r3, [r7, #23]
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d10a      	bne.n	8104e5c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104e46:	4b65      	ldr	r3, [pc, #404]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104e54:	4961      	ldr	r1, [pc, #388]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104e56:	4313      	orrs	r3, r2
 8104e58:	658b      	str	r3, [r1, #88]	; 0x58
 8104e5a:	e001      	b.n	8104e60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e5c:	7dfb      	ldrb	r3, [r7, #23]
 8104e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104e68:	2b00      	cmp	r3, #0
 8104e6a:	d04b      	beq.n	8104f04 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104e72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104e76:	d02e      	beq.n	8104ed6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8104e78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104e7c:	d828      	bhi.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104e82:	d02a      	beq.n	8104eda <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8104e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104e88:	d822      	bhi.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104e8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104e8e:	d026      	beq.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104e90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104e94:	d81c      	bhi.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104e9a:	d010      	beq.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8104e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104ea0:	d816      	bhi.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d01d      	beq.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104eaa:	d111      	bne.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	3304      	adds	r3, #4
 8104eb0:	2100      	movs	r1, #0
 8104eb2:	4618      	mov	r0, r3
 8104eb4:	f000 fc80 	bl	81057b8 <RCCEx_PLL2_Config>
 8104eb8:	4603      	mov	r3, r0
 8104eba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104ebc:	e012      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	3324      	adds	r3, #36	; 0x24
 8104ec2:	2102      	movs	r1, #2
 8104ec4:	4618      	mov	r0, r3
 8104ec6:	f000 fd29 	bl	810591c <RCCEx_PLL3_Config>
 8104eca:	4603      	mov	r3, r0
 8104ecc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104ece:	e009      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ed0:	2301      	movs	r3, #1
 8104ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8104ed4:	e006      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104ed6:	bf00      	nop
 8104ed8:	e004      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104eda:	bf00      	nop
 8104edc:	e002      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104ede:	bf00      	nop
 8104ee0:	e000      	b.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ee4:	7dfb      	ldrb	r3, [r7, #23]
 8104ee6:	2b00      	cmp	r3, #0
 8104ee8:	d10a      	bne.n	8104f00 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104eea:	4b3c      	ldr	r3, [pc, #240]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104ef8:	4938      	ldr	r1, [pc, #224]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104efa:	4313      	orrs	r3, r2
 8104efc:	658b      	str	r3, [r1, #88]	; 0x58
 8104efe:	e001      	b.n	8104f04 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f00:	7dfb      	ldrb	r3, [r7, #23]
 8104f02:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	f003 0308 	and.w	r3, r3, #8
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d01a      	beq.n	8104f46 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f1a:	d10a      	bne.n	8104f32 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	3324      	adds	r3, #36	; 0x24
 8104f20:	2102      	movs	r1, #2
 8104f22:	4618      	mov	r0, r3
 8104f24:	f000 fcfa 	bl	810591c <RCCEx_PLL3_Config>
 8104f28:	4603      	mov	r3, r0
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d001      	beq.n	8104f32 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8104f2e:	2301      	movs	r3, #1
 8104f30:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104f32:	4b2a      	ldr	r3, [pc, #168]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104f40:	4926      	ldr	r1, [pc, #152]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104f42:	4313      	orrs	r3, r2
 8104f44:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	f003 0310 	and.w	r3, r3, #16
 8104f4e:	2b00      	cmp	r3, #0
 8104f50:	d01a      	beq.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f5c:	d10a      	bne.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	3324      	adds	r3, #36	; 0x24
 8104f62:	2102      	movs	r1, #2
 8104f64:	4618      	mov	r0, r3
 8104f66:	f000 fcd9 	bl	810591c <RCCEx_PLL3_Config>
 8104f6a:	4603      	mov	r3, r0
 8104f6c:	2b00      	cmp	r3, #0
 8104f6e:	d001      	beq.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8104f70:	2301      	movs	r3, #1
 8104f72:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104f74:	4b19      	ldr	r3, [pc, #100]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104f82:	4916      	ldr	r1, [pc, #88]	; (8104fdc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104f84:	4313      	orrs	r3, r2
 8104f86:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d036      	beq.n	8105002 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f9e:	d01f      	beq.n	8104fe0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8104fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104fa4:	d817      	bhi.n	8104fd6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8104fa6:	2b00      	cmp	r3, #0
 8104fa8:	d003      	beq.n	8104fb2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8104faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104fae:	d009      	beq.n	8104fc4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8104fb0:	e011      	b.n	8104fd6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	3304      	adds	r3, #4
 8104fb6:	2100      	movs	r1, #0
 8104fb8:	4618      	mov	r0, r3
 8104fba:	f000 fbfd 	bl	81057b8 <RCCEx_PLL2_Config>
 8104fbe:	4603      	mov	r3, r0
 8104fc0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104fc2:	e00e      	b.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	3324      	adds	r3, #36	; 0x24
 8104fc8:	2102      	movs	r1, #2
 8104fca:	4618      	mov	r0, r3
 8104fcc:	f000 fca6 	bl	810591c <RCCEx_PLL3_Config>
 8104fd0:	4603      	mov	r3, r0
 8104fd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104fd4:	e005      	b.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104fd6:	2301      	movs	r3, #1
 8104fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8104fda:	e002      	b.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8104fdc:	58024400 	.word	0x58024400
      break;
 8104fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104fe2:	7dfb      	ldrb	r3, [r7, #23]
 8104fe4:	2b00      	cmp	r3, #0
 8104fe6:	d10a      	bne.n	8104ffe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104fe8:	4b93      	ldr	r3, [pc, #588]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104ff6:	4990      	ldr	r1, [pc, #576]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ff8:	4313      	orrs	r3, r2
 8104ffa:	658b      	str	r3, [r1, #88]	; 0x58
 8104ffc:	e001      	b.n	8105002 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ffe:	7dfb      	ldrb	r3, [r7, #23]
 8105000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810500a:	2b00      	cmp	r3, #0
 810500c:	d033      	beq.n	8105076 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105014:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105018:	d01c      	beq.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810501a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810501e:	d816      	bhi.n	810504e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8105020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105024:	d003      	beq.n	810502e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8105026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810502a:	d007      	beq.n	810503c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810502c:	e00f      	b.n	810504e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810502e:	4b82      	ldr	r3, [pc, #520]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105032:	4a81      	ldr	r2, [pc, #516]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810503a:	e00c      	b.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	3324      	adds	r3, #36	; 0x24
 8105040:	2101      	movs	r1, #1
 8105042:	4618      	mov	r0, r3
 8105044:	f000 fc6a 	bl	810591c <RCCEx_PLL3_Config>
 8105048:	4603      	mov	r3, r0
 810504a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810504c:	e003      	b.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810504e:	2301      	movs	r3, #1
 8105050:	75fb      	strb	r3, [r7, #23]
      break;
 8105052:	e000      	b.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8105054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105056:	7dfb      	ldrb	r3, [r7, #23]
 8105058:	2b00      	cmp	r3, #0
 810505a:	d10a      	bne.n	8105072 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810505c:	4b76      	ldr	r3, [pc, #472]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810506a:	4973      	ldr	r1, [pc, #460]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810506c:	4313      	orrs	r3, r2
 810506e:	654b      	str	r3, [r1, #84]	; 0x54
 8105070:	e001      	b.n	8105076 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105072:	7dfb      	ldrb	r3, [r7, #23]
 8105074:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810507e:	2b00      	cmp	r3, #0
 8105080:	d029      	beq.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105086:	2b00      	cmp	r3, #0
 8105088:	d003      	beq.n	8105092 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810508a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810508e:	d007      	beq.n	81050a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8105090:	e00f      	b.n	81050b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105092:	4b69      	ldr	r3, [pc, #420]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105096:	4a68      	ldr	r2, [pc, #416]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810509c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810509e:	e00b      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	3304      	adds	r3, #4
 81050a4:	2102      	movs	r1, #2
 81050a6:	4618      	mov	r0, r3
 81050a8:	f000 fb86 	bl	81057b8 <RCCEx_PLL2_Config>
 81050ac:	4603      	mov	r3, r0
 81050ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81050b0:	e002      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81050b2:	2301      	movs	r3, #1
 81050b4:	75fb      	strb	r3, [r7, #23]
      break;
 81050b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81050b8:	7dfb      	ldrb	r3, [r7, #23]
 81050ba:	2b00      	cmp	r3, #0
 81050bc:	d109      	bne.n	81050d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81050be:	4b5e      	ldr	r3, [pc, #376]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050ca:	495b      	ldr	r1, [pc, #364]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81050cc:	4313      	orrs	r3, r2
 81050ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 81050d0:	e001      	b.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050d2:	7dfb      	ldrb	r3, [r7, #23]
 81050d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	681b      	ldr	r3, [r3, #0]
 81050da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81050de:	2b00      	cmp	r3, #0
 81050e0:	d00a      	beq.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	3324      	adds	r3, #36	; 0x24
 81050e6:	2102      	movs	r1, #2
 81050e8:	4618      	mov	r0, r3
 81050ea:	f000 fc17 	bl	810591c <RCCEx_PLL3_Config>
 81050ee:	4603      	mov	r3, r0
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d001      	beq.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81050f4:	2301      	movs	r3, #1
 81050f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105100:	2b00      	cmp	r3, #0
 8105102:	d030      	beq.n	8105166 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810510c:	d017      	beq.n	810513e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810510e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105112:	d811      	bhi.n	8105138 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8105114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105118:	d013      	beq.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810511a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810511e:	d80b      	bhi.n	8105138 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8105120:	2b00      	cmp	r3, #0
 8105122:	d010      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8105124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105128:	d106      	bne.n	8105138 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810512a:	4b43      	ldr	r3, [pc, #268]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810512e:	4a42      	ldr	r2, [pc, #264]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105136:	e007      	b.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105138:	2301      	movs	r3, #1
 810513a:	75fb      	strb	r3, [r7, #23]
      break;
 810513c:	e004      	b.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810513e:	bf00      	nop
 8105140:	e002      	b.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8105142:	bf00      	nop
 8105144:	e000      	b.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8105146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105148:	7dfb      	ldrb	r3, [r7, #23]
 810514a:	2b00      	cmp	r3, #0
 810514c:	d109      	bne.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810514e:	4b3a      	ldr	r3, [pc, #232]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810515a:	4937      	ldr	r1, [pc, #220]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810515c:	4313      	orrs	r3, r2
 810515e:	654b      	str	r3, [r1, #84]	; 0x54
 8105160:	e001      	b.n	8105166 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105162:	7dfb      	ldrb	r3, [r7, #23]
 8105164:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810516e:	2b00      	cmp	r3, #0
 8105170:	d008      	beq.n	8105184 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105172:	4b31      	ldr	r3, [pc, #196]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810517e:	492e      	ldr	r1, [pc, #184]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105180:	4313      	orrs	r3, r2
 8105182:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810518c:	2b00      	cmp	r3, #0
 810518e:	d009      	beq.n	81051a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105190:	4b29      	ldr	r3, [pc, #164]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105192:	691b      	ldr	r3, [r3, #16]
 8105194:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810519e:	4926      	ldr	r1, [pc, #152]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051a0:	4313      	orrs	r3, r2
 81051a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81051ac:	2b00      	cmp	r3, #0
 81051ae:	d008      	beq.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81051b0:	4b21      	ldr	r3, [pc, #132]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81051bc:	491e      	ldr	r1, [pc, #120]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051be:	4313      	orrs	r3, r2
 81051c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d00d      	beq.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81051ce:	4b1a      	ldr	r3, [pc, #104]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051d0:	691b      	ldr	r3, [r3, #16]
 81051d2:	4a19      	ldr	r2, [pc, #100]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81051d8:	6113      	str	r3, [r2, #16]
 81051da:	4b17      	ldr	r3, [pc, #92]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051dc:	691a      	ldr	r2, [r3, #16]
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81051e4:	4914      	ldr	r1, [pc, #80]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051e6:	4313      	orrs	r3, r2
 81051e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	2b00      	cmp	r3, #0
 81051f0:	da08      	bge.n	8105204 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81051f2:	4b11      	ldr	r3, [pc, #68]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051fe:	490e      	ldr	r1, [pc, #56]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105200:	4313      	orrs	r3, r2
 8105202:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810520c:	2b00      	cmp	r3, #0
 810520e:	d009      	beq.n	8105224 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105210:	4b09      	ldr	r3, [pc, #36]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810521e:	4906      	ldr	r1, [pc, #24]	; (8105238 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105220:	4313      	orrs	r3, r2
 8105222:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8105224:	7dbb      	ldrb	r3, [r7, #22]
 8105226:	2b00      	cmp	r3, #0
 8105228:	d101      	bne.n	810522e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810522a:	2300      	movs	r3, #0
 810522c:	e000      	b.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810522e:	2301      	movs	r3, #1
}
 8105230:	4618      	mov	r0, r3
 8105232:	3718      	adds	r7, #24
 8105234:	46bd      	mov	sp, r7
 8105236:	bd80      	pop	{r7, pc}
 8105238:	58024400 	.word	0x58024400

0810523c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810523c:	b580      	push	{r7, lr}
 810523e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105240:	f7ff f85e 	bl	8104300 <HAL_RCC_GetHCLKFreq>
 8105244:	4602      	mov	r2, r0
 8105246:	4b06      	ldr	r3, [pc, #24]	; (8105260 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105248:	6a1b      	ldr	r3, [r3, #32]
 810524a:	091b      	lsrs	r3, r3, #4
 810524c:	f003 0307 	and.w	r3, r3, #7
 8105250:	4904      	ldr	r1, [pc, #16]	; (8105264 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105252:	5ccb      	ldrb	r3, [r1, r3]
 8105254:	f003 031f 	and.w	r3, r3, #31
 8105258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810525c:	4618      	mov	r0, r3
 810525e:	bd80      	pop	{r7, pc}
 8105260:	58024400 	.word	0x58024400
 8105264:	08107420 	.word	0x08107420

08105268 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105268:	b480      	push	{r7}
 810526a:	b089      	sub	sp, #36	; 0x24
 810526c:	af00      	add	r7, sp, #0
 810526e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105270:	4ba1      	ldr	r3, [pc, #644]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105274:	f003 0303 	and.w	r3, r3, #3
 8105278:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810527a:	4b9f      	ldr	r3, [pc, #636]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810527e:	0b1b      	lsrs	r3, r3, #12
 8105280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105284:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105286:	4b9c      	ldr	r3, [pc, #624]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810528a:	091b      	lsrs	r3, r3, #4
 810528c:	f003 0301 	and.w	r3, r3, #1
 8105290:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105292:	4b99      	ldr	r3, [pc, #612]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105296:	08db      	lsrs	r3, r3, #3
 8105298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810529c:	693a      	ldr	r2, [r7, #16]
 810529e:	fb02 f303 	mul.w	r3, r2, r3
 81052a2:	ee07 3a90 	vmov	s15, r3
 81052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81052ae:	697b      	ldr	r3, [r7, #20]
 81052b0:	2b00      	cmp	r3, #0
 81052b2:	f000 8111 	beq.w	81054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81052b6:	69bb      	ldr	r3, [r7, #24]
 81052b8:	2b02      	cmp	r3, #2
 81052ba:	f000 8083 	beq.w	81053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81052be:	69bb      	ldr	r3, [r7, #24]
 81052c0:	2b02      	cmp	r3, #2
 81052c2:	f200 80a1 	bhi.w	8105408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81052c6:	69bb      	ldr	r3, [r7, #24]
 81052c8:	2b00      	cmp	r3, #0
 81052ca:	d003      	beq.n	81052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81052cc:	69bb      	ldr	r3, [r7, #24]
 81052ce:	2b01      	cmp	r3, #1
 81052d0:	d056      	beq.n	8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81052d2:	e099      	b.n	8105408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052d4:	4b88      	ldr	r3, [pc, #544]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	f003 0320 	and.w	r3, r3, #32
 81052dc:	2b00      	cmp	r3, #0
 81052de:	d02d      	beq.n	810533c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81052e0:	4b85      	ldr	r3, [pc, #532]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	08db      	lsrs	r3, r3, #3
 81052e6:	f003 0303 	and.w	r3, r3, #3
 81052ea:	4a84      	ldr	r2, [pc, #528]	; (81054fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81052ec:	fa22 f303 	lsr.w	r3, r2, r3
 81052f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81052f2:	68bb      	ldr	r3, [r7, #8]
 81052f4:	ee07 3a90 	vmov	s15, r3
 81052f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052fc:	697b      	ldr	r3, [r7, #20]
 81052fe:	ee07 3a90 	vmov	s15, r3
 8105302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810530a:	4b7b      	ldr	r3, [pc, #492]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105312:	ee07 3a90 	vmov	s15, r3
 8105316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810531a:	ed97 6a03 	vldr	s12, [r7, #12]
 810531e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810533a:	e087      	b.n	810544c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810533c:	697b      	ldr	r3, [r7, #20]
 810533e:	ee07 3a90 	vmov	s15, r3
 8105342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105504 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810534e:	4b6a      	ldr	r3, [pc, #424]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105356:	ee07 3a90 	vmov	s15, r3
 810535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105376:	ee67 7a27 	vmul.f32	s15, s14, s15
 810537a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810537e:	e065      	b.n	810544c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105380:	697b      	ldr	r3, [r7, #20]
 8105382:	ee07 3a90 	vmov	s15, r3
 8105386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810538a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105392:	4b59      	ldr	r3, [pc, #356]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810539a:	ee07 3a90 	vmov	s15, r3
 810539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81053a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81053c2:	e043      	b.n	810544c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81053c4:	697b      	ldr	r3, [r7, #20]
 81053c6:	ee07 3a90 	vmov	s15, r3
 81053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810550c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053d6:	4b48      	ldr	r3, [pc, #288]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053de:	ee07 3a90 	vmov	s15, r3
 81053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81053ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105406:	e021      	b.n	810544c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105408:	697b      	ldr	r3, [r7, #20]
 810540a:	ee07 3a90 	vmov	s15, r3
 810540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810541a:	4b37      	ldr	r3, [pc, #220]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105422:	ee07 3a90 	vmov	s15, r3
 8105426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810542a:	ed97 6a03 	vldr	s12, [r7, #12]
 810542e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810544a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810544c:	4b2a      	ldr	r3, [pc, #168]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105450:	0a5b      	lsrs	r3, r3, #9
 8105452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105456:	ee07 3a90 	vmov	s15, r3
 810545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810545e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105466:	edd7 6a07 	vldr	s13, [r7, #28]
 810546a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105472:	ee17 2a90 	vmov	r2, s15
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810547a:	4b1f      	ldr	r3, [pc, #124]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810547e:	0c1b      	lsrs	r3, r3, #16
 8105480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105484:	ee07 3a90 	vmov	s15, r3
 8105488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810548c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105494:	edd7 6a07 	vldr	s13, [r7, #28]
 8105498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810549c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054a0:	ee17 2a90 	vmov	r2, s15
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81054a8:	4b13      	ldr	r3, [pc, #76]	; (81054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81054ac:	0e1b      	lsrs	r3, r3, #24
 81054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81054b2:	ee07 3a90 	vmov	s15, r3
 81054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81054be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81054c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054ce:	ee17 2a90 	vmov	r2, s15
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81054d6:	e008      	b.n	81054ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	2200      	movs	r2, #0
 81054dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	2200      	movs	r2, #0
 81054e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	2200      	movs	r2, #0
 81054e8:	609a      	str	r2, [r3, #8]
}
 81054ea:	bf00      	nop
 81054ec:	3724      	adds	r7, #36	; 0x24
 81054ee:	46bd      	mov	sp, r7
 81054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054f4:	4770      	bx	lr
 81054f6:	bf00      	nop
 81054f8:	58024400 	.word	0x58024400
 81054fc:	03d09000 	.word	0x03d09000
 8105500:	46000000 	.word	0x46000000
 8105504:	4c742400 	.word	0x4c742400
 8105508:	4a742400 	.word	0x4a742400
 810550c:	4af42400 	.word	0x4af42400

08105510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105510:	b480      	push	{r7}
 8105512:	b089      	sub	sp, #36	; 0x24
 8105514:	af00      	add	r7, sp, #0
 8105516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105518:	4ba1      	ldr	r3, [pc, #644]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810551c:	f003 0303 	and.w	r3, r3, #3
 8105520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105522:	4b9f      	ldr	r3, [pc, #636]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105526:	0d1b      	lsrs	r3, r3, #20
 8105528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810552c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810552e:	4b9c      	ldr	r3, [pc, #624]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105532:	0a1b      	lsrs	r3, r3, #8
 8105534:	f003 0301 	and.w	r3, r3, #1
 8105538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810553a:	4b99      	ldr	r3, [pc, #612]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810553e:	08db      	lsrs	r3, r3, #3
 8105540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105544:	693a      	ldr	r2, [r7, #16]
 8105546:	fb02 f303 	mul.w	r3, r2, r3
 810554a:	ee07 3a90 	vmov	s15, r3
 810554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105556:	697b      	ldr	r3, [r7, #20]
 8105558:	2b00      	cmp	r3, #0
 810555a:	f000 8111 	beq.w	8105780 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810555e:	69bb      	ldr	r3, [r7, #24]
 8105560:	2b02      	cmp	r3, #2
 8105562:	f000 8083 	beq.w	810566c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105566:	69bb      	ldr	r3, [r7, #24]
 8105568:	2b02      	cmp	r3, #2
 810556a:	f200 80a1 	bhi.w	81056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810556e:	69bb      	ldr	r3, [r7, #24]
 8105570:	2b00      	cmp	r3, #0
 8105572:	d003      	beq.n	810557c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105574:	69bb      	ldr	r3, [r7, #24]
 8105576:	2b01      	cmp	r3, #1
 8105578:	d056      	beq.n	8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810557a:	e099      	b.n	81056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810557c:	4b88      	ldr	r3, [pc, #544]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	f003 0320 	and.w	r3, r3, #32
 8105584:	2b00      	cmp	r3, #0
 8105586:	d02d      	beq.n	81055e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105588:	4b85      	ldr	r3, [pc, #532]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	08db      	lsrs	r3, r3, #3
 810558e:	f003 0303 	and.w	r3, r3, #3
 8105592:	4a84      	ldr	r2, [pc, #528]	; (81057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105594:	fa22 f303 	lsr.w	r3, r2, r3
 8105598:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810559a:	68bb      	ldr	r3, [r7, #8]
 810559c:	ee07 3a90 	vmov	s15, r3
 81055a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055a4:	697b      	ldr	r3, [r7, #20]
 81055a6:	ee07 3a90 	vmov	s15, r3
 81055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055b2:	4b7b      	ldr	r3, [pc, #492]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055ba:	ee07 3a90 	vmov	s15, r3
 81055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81055c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 81057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81055e2:	e087      	b.n	81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81055e4:	697b      	ldr	r3, [r7, #20]
 81055e6:	ee07 3a90 	vmov	s15, r3
 81055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81057ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055f6:	4b6a      	ldr	r3, [pc, #424]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055fe:	ee07 3a90 	vmov	s15, r3
 8105602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105606:	ed97 6a03 	vldr	s12, [r7, #12]
 810560a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105626:	e065      	b.n	81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105628:	697b      	ldr	r3, [r7, #20]
 810562a:	ee07 3a90 	vmov	s15, r3
 810562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105632:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810563a:	4b59      	ldr	r3, [pc, #356]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105642:	ee07 3a90 	vmov	s15, r3
 8105646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810564a:	ed97 6a03 	vldr	s12, [r7, #12]
 810564e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810565a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810566a:	e043      	b.n	81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810566c:	697b      	ldr	r3, [r7, #20]
 810566e:	ee07 3a90 	vmov	s15, r3
 8105672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105676:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810567e:	4b48      	ldr	r3, [pc, #288]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105686:	ee07 3a90 	vmov	s15, r3
 810568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105692:	eddf 5a45 	vldr	s11, [pc, #276]	; 81057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810569e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056ae:	e021      	b.n	81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81056b0:	697b      	ldr	r3, [r7, #20]
 81056b2:	ee07 3a90 	vmov	s15, r3
 81056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056c2:	4b37      	ldr	r3, [pc, #220]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056ca:	ee07 3a90 	vmov	s15, r3
 81056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81056d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 81057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81056da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81056f4:	4b2a      	ldr	r3, [pc, #168]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056f8:	0a5b      	lsrs	r3, r3, #9
 81056fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81056fe:	ee07 3a90 	vmov	s15, r3
 8105702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810570a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810570e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810571a:	ee17 2a90 	vmov	r2, s15
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105722:	4b1f      	ldr	r3, [pc, #124]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105726:	0c1b      	lsrs	r3, r3, #16
 8105728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810572c:	ee07 3a90 	vmov	s15, r3
 8105730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105738:	ee37 7a87 	vadd.f32	s14, s15, s14
 810573c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105748:	ee17 2a90 	vmov	r2, s15
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105750:	4b13      	ldr	r3, [pc, #76]	; (81057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105754:	0e1b      	lsrs	r3, r3, #24
 8105756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810575a:	ee07 3a90 	vmov	s15, r3
 810575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105766:	ee37 7a87 	vadd.f32	s14, s15, s14
 810576a:	edd7 6a07 	vldr	s13, [r7, #28]
 810576e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105776:	ee17 2a90 	vmov	r2, s15
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810577e:	e008      	b.n	8105792 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	2200      	movs	r2, #0
 8105784:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	2200      	movs	r2, #0
 810578a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	2200      	movs	r2, #0
 8105790:	609a      	str	r2, [r3, #8]
}
 8105792:	bf00      	nop
 8105794:	3724      	adds	r7, #36	; 0x24
 8105796:	46bd      	mov	sp, r7
 8105798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810579c:	4770      	bx	lr
 810579e:	bf00      	nop
 81057a0:	58024400 	.word	0x58024400
 81057a4:	03d09000 	.word	0x03d09000
 81057a8:	46000000 	.word	0x46000000
 81057ac:	4c742400 	.word	0x4c742400
 81057b0:	4a742400 	.word	0x4a742400
 81057b4:	4af42400 	.word	0x4af42400

081057b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81057b8:	b580      	push	{r7, lr}
 81057ba:	b084      	sub	sp, #16
 81057bc:	af00      	add	r7, sp, #0
 81057be:	6078      	str	r0, [r7, #4]
 81057c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81057c2:	2300      	movs	r3, #0
 81057c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81057c6:	4b54      	ldr	r3, [pc, #336]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057ca:	f003 0303 	and.w	r3, r3, #3
 81057ce:	2b03      	cmp	r3, #3
 81057d0:	d101      	bne.n	81057d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81057d2:	2301      	movs	r3, #1
 81057d4:	e09b      	b.n	810590e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81057d6:	4b50      	ldr	r3, [pc, #320]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	4a4f      	ldr	r2, [pc, #316]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81057dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81057e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81057e2:	f7fb fa47 	bl	8100c74 <HAL_GetTick>
 81057e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81057e8:	e008      	b.n	81057fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81057ea:	f7fb fa43 	bl	8100c74 <HAL_GetTick>
 81057ee:	4602      	mov	r2, r0
 81057f0:	68bb      	ldr	r3, [r7, #8]
 81057f2:	1ad3      	subs	r3, r2, r3
 81057f4:	2b02      	cmp	r3, #2
 81057f6:	d901      	bls.n	81057fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81057f8:	2303      	movs	r3, #3
 81057fa:	e088      	b.n	810590e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81057fc:	4b46      	ldr	r3, [pc, #280]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105804:	2b00      	cmp	r3, #0
 8105806:	d1f0      	bne.n	81057ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105808:	4b43      	ldr	r3, [pc, #268]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 810580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810580c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	031b      	lsls	r3, r3, #12
 8105816:	4940      	ldr	r1, [pc, #256]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105818:	4313      	orrs	r3, r2
 810581a:	628b      	str	r3, [r1, #40]	; 0x28
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	685b      	ldr	r3, [r3, #4]
 8105820:	3b01      	subs	r3, #1
 8105822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	689b      	ldr	r3, [r3, #8]
 810582a:	3b01      	subs	r3, #1
 810582c:	025b      	lsls	r3, r3, #9
 810582e:	b29b      	uxth	r3, r3
 8105830:	431a      	orrs	r2, r3
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	68db      	ldr	r3, [r3, #12]
 8105836:	3b01      	subs	r3, #1
 8105838:	041b      	lsls	r3, r3, #16
 810583a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810583e:	431a      	orrs	r2, r3
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	691b      	ldr	r3, [r3, #16]
 8105844:	3b01      	subs	r3, #1
 8105846:	061b      	lsls	r3, r3, #24
 8105848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810584c:	4932      	ldr	r1, [pc, #200]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 810584e:	4313      	orrs	r3, r2
 8105850:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105852:	4b31      	ldr	r3, [pc, #196]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	695b      	ldr	r3, [r3, #20]
 810585e:	492e      	ldr	r1, [pc, #184]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105860:	4313      	orrs	r3, r2
 8105862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105864:	4b2c      	ldr	r3, [pc, #176]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105868:	f023 0220 	bic.w	r2, r3, #32
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	699b      	ldr	r3, [r3, #24]
 8105870:	4929      	ldr	r1, [pc, #164]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105872:	4313      	orrs	r3, r2
 8105874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105876:	4b28      	ldr	r3, [pc, #160]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810587a:	4a27      	ldr	r2, [pc, #156]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 810587c:	f023 0310 	bic.w	r3, r3, #16
 8105880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105882:	4b25      	ldr	r3, [pc, #148]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810588a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810588e:	687a      	ldr	r2, [r7, #4]
 8105890:	69d2      	ldr	r2, [r2, #28]
 8105892:	00d2      	lsls	r2, r2, #3
 8105894:	4920      	ldr	r1, [pc, #128]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105896:	4313      	orrs	r3, r2
 8105898:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810589a:	4b1f      	ldr	r3, [pc, #124]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 810589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810589e:	4a1e      	ldr	r2, [pc, #120]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058a0:	f043 0310 	orr.w	r3, r3, #16
 81058a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81058a6:	683b      	ldr	r3, [r7, #0]
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d106      	bne.n	81058ba <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81058ac:	4b1a      	ldr	r3, [pc, #104]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058b0:	4a19      	ldr	r2, [pc, #100]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81058b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81058b8:	e00f      	b.n	81058da <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81058ba:	683b      	ldr	r3, [r7, #0]
 81058bc:	2b01      	cmp	r3, #1
 81058be:	d106      	bne.n	81058ce <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81058c0:	4b15      	ldr	r3, [pc, #84]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058c4:	4a14      	ldr	r2, [pc, #80]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81058ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 81058cc:	e005      	b.n	81058da <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81058ce:	4b12      	ldr	r3, [pc, #72]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058d2:	4a11      	ldr	r2, [pc, #68]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81058d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81058da:	4b0f      	ldr	r3, [pc, #60]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	4a0e      	ldr	r2, [pc, #56]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 81058e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81058e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81058e6:	f7fb f9c5 	bl	8100c74 <HAL_GetTick>
 81058ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81058ec:	e008      	b.n	8105900 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81058ee:	f7fb f9c1 	bl	8100c74 <HAL_GetTick>
 81058f2:	4602      	mov	r2, r0
 81058f4:	68bb      	ldr	r3, [r7, #8]
 81058f6:	1ad3      	subs	r3, r2, r3
 81058f8:	2b02      	cmp	r3, #2
 81058fa:	d901      	bls.n	8105900 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81058fc:	2303      	movs	r3, #3
 81058fe:	e006      	b.n	810590e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105900:	4b05      	ldr	r3, [pc, #20]	; (8105918 <RCCEx_PLL2_Config+0x160>)
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105908:	2b00      	cmp	r3, #0
 810590a:	d0f0      	beq.n	81058ee <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810590c:	7bfb      	ldrb	r3, [r7, #15]
}
 810590e:	4618      	mov	r0, r3
 8105910:	3710      	adds	r7, #16
 8105912:	46bd      	mov	sp, r7
 8105914:	bd80      	pop	{r7, pc}
 8105916:	bf00      	nop
 8105918:	58024400 	.word	0x58024400

0810591c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810591c:	b580      	push	{r7, lr}
 810591e:	b084      	sub	sp, #16
 8105920:	af00      	add	r7, sp, #0
 8105922:	6078      	str	r0, [r7, #4]
 8105924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105926:	2300      	movs	r3, #0
 8105928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810592a:	4b54      	ldr	r3, [pc, #336]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 810592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810592e:	f003 0303 	and.w	r3, r3, #3
 8105932:	2b03      	cmp	r3, #3
 8105934:	d101      	bne.n	810593a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105936:	2301      	movs	r3, #1
 8105938:	e09b      	b.n	8105a72 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810593a:	4b50      	ldr	r3, [pc, #320]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	4a4f      	ldr	r2, [pc, #316]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105946:	f7fb f995 	bl	8100c74 <HAL_GetTick>
 810594a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810594c:	e008      	b.n	8105960 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810594e:	f7fb f991 	bl	8100c74 <HAL_GetTick>
 8105952:	4602      	mov	r2, r0
 8105954:	68bb      	ldr	r3, [r7, #8]
 8105956:	1ad3      	subs	r3, r2, r3
 8105958:	2b02      	cmp	r3, #2
 810595a:	d901      	bls.n	8105960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810595c:	2303      	movs	r3, #3
 810595e:	e088      	b.n	8105a72 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105960:	4b46      	ldr	r3, [pc, #280]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105968:	2b00      	cmp	r3, #0
 810596a:	d1f0      	bne.n	810594e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810596c:	4b43      	ldr	r3, [pc, #268]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 810596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105970:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	051b      	lsls	r3, r3, #20
 810597a:	4940      	ldr	r1, [pc, #256]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 810597c:	4313      	orrs	r3, r2
 810597e:	628b      	str	r3, [r1, #40]	; 0x28
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	685b      	ldr	r3, [r3, #4]
 8105984:	3b01      	subs	r3, #1
 8105986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	689b      	ldr	r3, [r3, #8]
 810598e:	3b01      	subs	r3, #1
 8105990:	025b      	lsls	r3, r3, #9
 8105992:	b29b      	uxth	r3, r3
 8105994:	431a      	orrs	r2, r3
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	68db      	ldr	r3, [r3, #12]
 810599a:	3b01      	subs	r3, #1
 810599c:	041b      	lsls	r3, r3, #16
 810599e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81059a2:	431a      	orrs	r2, r3
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	691b      	ldr	r3, [r3, #16]
 81059a8:	3b01      	subs	r3, #1
 81059aa:	061b      	lsls	r3, r3, #24
 81059ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81059b0:	4932      	ldr	r1, [pc, #200]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059b2:	4313      	orrs	r3, r2
 81059b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81059b6:	4b31      	ldr	r3, [pc, #196]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	695b      	ldr	r3, [r3, #20]
 81059c2:	492e      	ldr	r1, [pc, #184]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059c4:	4313      	orrs	r3, r2
 81059c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81059c8:	4b2c      	ldr	r3, [pc, #176]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	699b      	ldr	r3, [r3, #24]
 81059d4:	4929      	ldr	r1, [pc, #164]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059d6:	4313      	orrs	r3, r2
 81059d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81059da:	4b28      	ldr	r3, [pc, #160]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059de:	4a27      	ldr	r2, [pc, #156]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81059e6:	4b25      	ldr	r3, [pc, #148]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81059ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81059ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81059f2:	687a      	ldr	r2, [r7, #4]
 81059f4:	69d2      	ldr	r2, [r2, #28]
 81059f6:	00d2      	lsls	r2, r2, #3
 81059f8:	4920      	ldr	r1, [pc, #128]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 81059fa:	4313      	orrs	r3, r2
 81059fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81059fe:	4b1f      	ldr	r3, [pc, #124]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a02:	4a1e      	ldr	r2, [pc, #120]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105a0a:	683b      	ldr	r3, [r7, #0]
 8105a0c:	2b00      	cmp	r3, #0
 8105a0e:	d106      	bne.n	8105a1e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105a10:	4b1a      	ldr	r3, [pc, #104]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a14:	4a19      	ldr	r2, [pc, #100]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a1c:	e00f      	b.n	8105a3e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105a1e:	683b      	ldr	r3, [r7, #0]
 8105a20:	2b01      	cmp	r3, #1
 8105a22:	d106      	bne.n	8105a32 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105a24:	4b15      	ldr	r3, [pc, #84]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a28:	4a14      	ldr	r2, [pc, #80]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a30:	e005      	b.n	8105a3e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105a32:	4b12      	ldr	r3, [pc, #72]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a36:	4a11      	ldr	r2, [pc, #68]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105a3e:	4b0f      	ldr	r3, [pc, #60]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	4a0e      	ldr	r2, [pc, #56]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105a4a:	f7fb f913 	bl	8100c74 <HAL_GetTick>
 8105a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a50:	e008      	b.n	8105a64 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105a52:	f7fb f90f 	bl	8100c74 <HAL_GetTick>
 8105a56:	4602      	mov	r2, r0
 8105a58:	68bb      	ldr	r3, [r7, #8]
 8105a5a:	1ad3      	subs	r3, r2, r3
 8105a5c:	2b02      	cmp	r3, #2
 8105a5e:	d901      	bls.n	8105a64 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105a60:	2303      	movs	r3, #3
 8105a62:	e006      	b.n	8105a72 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a64:	4b05      	ldr	r3, [pc, #20]	; (8105a7c <RCCEx_PLL3_Config+0x160>)
 8105a66:	681b      	ldr	r3, [r3, #0]
 8105a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105a6c:	2b00      	cmp	r3, #0
 8105a6e:	d0f0      	beq.n	8105a52 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a72:	4618      	mov	r0, r3
 8105a74:	3710      	adds	r7, #16
 8105a76:	46bd      	mov	sp, r7
 8105a78:	bd80      	pop	{r7, pc}
 8105a7a:	bf00      	nop
 8105a7c:	58024400 	.word	0x58024400

08105a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105a80:	b580      	push	{r7, lr}
 8105a82:	b082      	sub	sp, #8
 8105a84:	af00      	add	r7, sp, #0
 8105a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	d101      	bne.n	8105a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105a8e:	2301      	movs	r3, #1
 8105a90:	e042      	b.n	8105b18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	d106      	bne.n	8105aaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	2200      	movs	r2, #0
 8105aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105aa4:	6878      	ldr	r0, [r7, #4]
 8105aa6:	f7fa ff21 	bl	81008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	2224      	movs	r2, #36	; 0x24
 8105aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	681a      	ldr	r2, [r3, #0]
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	f022 0201 	bic.w	r2, r2, #1
 8105ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105ac2:	6878      	ldr	r0, [r7, #4]
 8105ac4:	f000 fb90 	bl	81061e8 <UART_SetConfig>
 8105ac8:	4603      	mov	r3, r0
 8105aca:	2b01      	cmp	r3, #1
 8105acc:	d101      	bne.n	8105ad2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8105ace:	2301      	movs	r3, #1
 8105ad0:	e022      	b.n	8105b18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d002      	beq.n	8105ae0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8105ada:	6878      	ldr	r0, [r7, #4]
 8105adc:	f001 f8e4 	bl	8106ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	685a      	ldr	r2, [r3, #4]
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8105aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	689a      	ldr	r2, [r3, #8]
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8105afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	681a      	ldr	r2, [r3, #0]
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	f042 0201 	orr.w	r2, r2, #1
 8105b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105b10:	6878      	ldr	r0, [r7, #4]
 8105b12:	f001 f96b 	bl	8106dec <UART_CheckIdleState>
 8105b16:	4603      	mov	r3, r0
}
 8105b18:	4618      	mov	r0, r3
 8105b1a:	3708      	adds	r7, #8
 8105b1c:	46bd      	mov	sp, r7
 8105b1e:	bd80      	pop	{r7, pc}

08105b20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8105b20:	b580      	push	{r7, lr}
 8105b22:	b084      	sub	sp, #16
 8105b24:	af00      	add	r7, sp, #0
 8105b26:	60f8      	str	r0, [r7, #12]
 8105b28:	60b9      	str	r1, [r7, #8]
 8105b2a:	4613      	mov	r3, r2
 8105b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105b2e:	68fb      	ldr	r3, [r7, #12]
 8105b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b34:	2b20      	cmp	r3, #32
 8105b36:	d168      	bne.n	8105c0a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8105b38:	68bb      	ldr	r3, [r7, #8]
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d002      	beq.n	8105b44 <HAL_UART_Transmit_DMA+0x24>
 8105b3e:	88fb      	ldrh	r3, [r7, #6]
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	d101      	bne.n	8105b48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8105b44:	2301      	movs	r3, #1
 8105b46:	e061      	b.n	8105c0c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8105b48:	68fb      	ldr	r3, [r7, #12]
 8105b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105b4e:	2b01      	cmp	r3, #1
 8105b50:	d101      	bne.n	8105b56 <HAL_UART_Transmit_DMA+0x36>
 8105b52:	2302      	movs	r3, #2
 8105b54:	e05a      	b.n	8105c0c <HAL_UART_Transmit_DMA+0xec>
 8105b56:	68fb      	ldr	r3, [r7, #12]
 8105b58:	2201      	movs	r2, #1
 8105b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8105b5e:	68fb      	ldr	r3, [r7, #12]
 8105b60:	68ba      	ldr	r2, [r7, #8]
 8105b62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8105b64:	68fb      	ldr	r3, [r7, #12]
 8105b66:	88fa      	ldrh	r2, [r7, #6]
 8105b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	88fa      	ldrh	r2, [r7, #6]
 8105b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	2200      	movs	r2, #0
 8105b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105b7c:	68fb      	ldr	r3, [r7, #12]
 8105b7e:	2221      	movs	r2, #33	; 0x21
 8105b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8105b84:	68fb      	ldr	r3, [r7, #12]
 8105b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d02c      	beq.n	8105be6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8105b8c:	68fb      	ldr	r3, [r7, #12]
 8105b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b90:	4a20      	ldr	r2, [pc, #128]	; (8105c14 <HAL_UART_Transmit_DMA+0xf4>)
 8105b92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105b98:	4a1f      	ldr	r2, [pc, #124]	; (8105c18 <HAL_UART_Transmit_DMA+0xf8>)
 8105b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8105b9c:	68fb      	ldr	r3, [r7, #12]
 8105b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105ba0:	4a1e      	ldr	r2, [pc, #120]	; (8105c1c <HAL_UART_Transmit_DMA+0xfc>)
 8105ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8105ba4:	68fb      	ldr	r3, [r7, #12]
 8105ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105ba8:	2200      	movs	r2, #0
 8105baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8105bac:	68fb      	ldr	r3, [r7, #12]
 8105bae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8105bb0:	68fb      	ldr	r3, [r7, #12]
 8105bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bb4:	4619      	mov	r1, r3
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	3328      	adds	r3, #40	; 0x28
 8105bbc:	461a      	mov	r2, r3
 8105bbe:	88fb      	ldrh	r3, [r7, #6]
 8105bc0:	f7fb fce2 	bl	8101588 <HAL_DMA_Start_IT>
 8105bc4:	4603      	mov	r3, r0
 8105bc6:	2b00      	cmp	r3, #0
 8105bc8:	d00d      	beq.n	8105be6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8105bca:	68fb      	ldr	r3, [r7, #12]
 8105bcc:	2210      	movs	r2, #16
 8105bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8105bd2:	68fb      	ldr	r3, [r7, #12]
 8105bd4:	2200      	movs	r2, #0
 8105bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8105bda:	68fb      	ldr	r3, [r7, #12]
 8105bdc:	2220      	movs	r2, #32
 8105bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8105be2:	2301      	movs	r3, #1
 8105be4:	e012      	b.n	8105c0c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8105be6:	68fb      	ldr	r3, [r7, #12]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	2240      	movs	r2, #64	; 0x40
 8105bec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8105bee:	68fb      	ldr	r3, [r7, #12]
 8105bf0:	2200      	movs	r2, #0
 8105bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8105bf6:	68fb      	ldr	r3, [r7, #12]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	689a      	ldr	r2, [r3, #8]
 8105bfc:	68fb      	ldr	r3, [r7, #12]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8105c04:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8105c06:	2300      	movs	r3, #0
 8105c08:	e000      	b.n	8105c0c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8105c0a:	2302      	movs	r3, #2
  }
}
 8105c0c:	4618      	mov	r0, r3
 8105c0e:	3710      	adds	r7, #16
 8105c10:	46bd      	mov	sp, r7
 8105c12:	bd80      	pop	{r7, pc}
 8105c14:	08107023 	.word	0x08107023
 8105c18:	08107073 	.word	0x08107073
 8105c1c:	0810708f 	.word	0x0810708f

08105c20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8105c20:	b580      	push	{r7, lr}
 8105c22:	b088      	sub	sp, #32
 8105c24:	af00      	add	r7, sp, #0
 8105c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	69db      	ldr	r3, [r3, #28]
 8105c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	681b      	ldr	r3, [r3, #0]
 8105c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	689b      	ldr	r3, [r3, #8]
 8105c3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8105c40:	69fa      	ldr	r2, [r7, #28]
 8105c42:	f640 030f 	movw	r3, #2063	; 0x80f
 8105c46:	4013      	ands	r3, r2
 8105c48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8105c4a:	693b      	ldr	r3, [r7, #16]
 8105c4c:	2b00      	cmp	r3, #0
 8105c4e:	d118      	bne.n	8105c82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8105c50:	69fb      	ldr	r3, [r7, #28]
 8105c52:	f003 0320 	and.w	r3, r3, #32
 8105c56:	2b00      	cmp	r3, #0
 8105c58:	d013      	beq.n	8105c82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8105c5a:	69bb      	ldr	r3, [r7, #24]
 8105c5c:	f003 0320 	and.w	r3, r3, #32
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d104      	bne.n	8105c6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8105c64:	697b      	ldr	r3, [r7, #20]
 8105c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105c6a:	2b00      	cmp	r3, #0
 8105c6c:	d009      	beq.n	8105c82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	f000 8282 	beq.w	810617c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c7c:	6878      	ldr	r0, [r7, #4]
 8105c7e:	4798      	blx	r3
      }
      return;
 8105c80:	e27c      	b.n	810617c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8105c82:	693b      	ldr	r3, [r7, #16]
 8105c84:	2b00      	cmp	r3, #0
 8105c86:	f000 80ef 	beq.w	8105e68 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8105c8a:	697a      	ldr	r2, [r7, #20]
 8105c8c:	4b73      	ldr	r3, [pc, #460]	; (8105e5c <HAL_UART_IRQHandler+0x23c>)
 8105c8e:	4013      	ands	r3, r2
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	d105      	bne.n	8105ca0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8105c94:	69ba      	ldr	r2, [r7, #24]
 8105c96:	4b72      	ldr	r3, [pc, #456]	; (8105e60 <HAL_UART_IRQHandler+0x240>)
 8105c98:	4013      	ands	r3, r2
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	f000 80e4 	beq.w	8105e68 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8105ca0:	69fb      	ldr	r3, [r7, #28]
 8105ca2:	f003 0301 	and.w	r3, r3, #1
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	d010      	beq.n	8105ccc <HAL_UART_IRQHandler+0xac>
 8105caa:	69bb      	ldr	r3, [r7, #24]
 8105cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105cb0:	2b00      	cmp	r3, #0
 8105cb2:	d00b      	beq.n	8105ccc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	2201      	movs	r2, #1
 8105cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105cc2:	f043 0201 	orr.w	r2, r3, #1
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8105ccc:	69fb      	ldr	r3, [r7, #28]
 8105cce:	f003 0302 	and.w	r3, r3, #2
 8105cd2:	2b00      	cmp	r3, #0
 8105cd4:	d010      	beq.n	8105cf8 <HAL_UART_IRQHandler+0xd8>
 8105cd6:	697b      	ldr	r3, [r7, #20]
 8105cd8:	f003 0301 	and.w	r3, r3, #1
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d00b      	beq.n	8105cf8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	2202      	movs	r2, #2
 8105ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105cee:	f043 0204 	orr.w	r2, r3, #4
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8105cf8:	69fb      	ldr	r3, [r7, #28]
 8105cfa:	f003 0304 	and.w	r3, r3, #4
 8105cfe:	2b00      	cmp	r3, #0
 8105d00:	d010      	beq.n	8105d24 <HAL_UART_IRQHandler+0x104>
 8105d02:	697b      	ldr	r3, [r7, #20]
 8105d04:	f003 0301 	and.w	r3, r3, #1
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d00b      	beq.n	8105d24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	2204      	movs	r2, #4
 8105d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105d1a:	f043 0202 	orr.w	r2, r3, #2
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8105d24:	69fb      	ldr	r3, [r7, #28]
 8105d26:	f003 0308 	and.w	r3, r3, #8
 8105d2a:	2b00      	cmp	r3, #0
 8105d2c:	d015      	beq.n	8105d5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8105d2e:	69bb      	ldr	r3, [r7, #24]
 8105d30:	f003 0320 	and.w	r3, r3, #32
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	d104      	bne.n	8105d42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8105d38:	697a      	ldr	r2, [r7, #20]
 8105d3a:	4b48      	ldr	r3, [pc, #288]	; (8105e5c <HAL_UART_IRQHandler+0x23c>)
 8105d3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8105d3e:	2b00      	cmp	r3, #0
 8105d40:	d00b      	beq.n	8105d5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	2208      	movs	r2, #8
 8105d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105d50:	f043 0208 	orr.w	r2, r3, #8
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8105d5a:	69fb      	ldr	r3, [r7, #28]
 8105d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105d60:	2b00      	cmp	r3, #0
 8105d62:	d011      	beq.n	8105d88 <HAL_UART_IRQHandler+0x168>
 8105d64:	69bb      	ldr	r3, [r7, #24]
 8105d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8105d6a:	2b00      	cmp	r3, #0
 8105d6c:	d00c      	beq.n	8105d88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105d7e:	f043 0220 	orr.w	r2, r3, #32
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105d8e:	2b00      	cmp	r3, #0
 8105d90:	f000 81f6 	beq.w	8106180 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8105d94:	69fb      	ldr	r3, [r7, #28]
 8105d96:	f003 0320 	and.w	r3, r3, #32
 8105d9a:	2b00      	cmp	r3, #0
 8105d9c:	d011      	beq.n	8105dc2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8105d9e:	69bb      	ldr	r3, [r7, #24]
 8105da0:	f003 0320 	and.w	r3, r3, #32
 8105da4:	2b00      	cmp	r3, #0
 8105da6:	d104      	bne.n	8105db2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8105da8:	697b      	ldr	r3, [r7, #20]
 8105daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105dae:	2b00      	cmp	r3, #0
 8105db0:	d007      	beq.n	8105dc2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105db6:	2b00      	cmp	r3, #0
 8105db8:	d003      	beq.n	8105dc2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105dbe:	6878      	ldr	r0, [r7, #4]
 8105dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105dc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	689b      	ldr	r3, [r3, #8]
 8105dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105dd4:	2b40      	cmp	r3, #64	; 0x40
 8105dd6:	d004      	beq.n	8105de2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8105dd8:	68fb      	ldr	r3, [r7, #12]
 8105dda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d031      	beq.n	8105e46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8105de2:	6878      	ldr	r0, [r7, #4]
 8105de4:	f001 f8eb 	bl	8106fbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105de8:	687b      	ldr	r3, [r7, #4]
 8105dea:	681b      	ldr	r3, [r3, #0]
 8105dec:	689b      	ldr	r3, [r3, #8]
 8105dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105df2:	2b40      	cmp	r3, #64	; 0x40
 8105df4:	d123      	bne.n	8105e3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	689a      	ldr	r2, [r3, #8]
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8105e04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e0a:	2b00      	cmp	r3, #0
 8105e0c:	d013      	beq.n	8105e36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e12:	4a14      	ldr	r2, [pc, #80]	; (8105e64 <HAL_UART_IRQHandler+0x244>)
 8105e14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e1a:	4618      	mov	r0, r3
 8105e1c:	f7fc f93c 	bl	8102098 <HAL_DMA_Abort_IT>
 8105e20:	4603      	mov	r3, r0
 8105e22:	2b00      	cmp	r3, #0
 8105e24:	d017      	beq.n	8105e56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e2c:	687a      	ldr	r2, [r7, #4]
 8105e2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8105e30:	4610      	mov	r0, r2
 8105e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105e34:	e00f      	b.n	8105e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8105e36:	6878      	ldr	r0, [r7, #4]
 8105e38:	f000 f9c0 	bl	81061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105e3c:	e00b      	b.n	8105e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8105e3e:	6878      	ldr	r0, [r7, #4]
 8105e40:	f000 f9bc 	bl	81061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105e44:	e007      	b.n	8105e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8105e46:	6878      	ldr	r0, [r7, #4]
 8105e48:	f000 f9b8 	bl	81061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105e4c:	687b      	ldr	r3, [r7, #4]
 8105e4e:	2200      	movs	r2, #0
 8105e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8105e54:	e194      	b.n	8106180 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105e56:	bf00      	nop
    return;
 8105e58:	e192      	b.n	8106180 <HAL_UART_IRQHandler+0x560>
 8105e5a:	bf00      	nop
 8105e5c:	10000001 	.word	0x10000001
 8105e60:	04000120 	.word	0x04000120
 8105e64:	0810710f 	.word	0x0810710f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e6c:	2b01      	cmp	r3, #1
 8105e6e:	f040 8111 	bne.w	8106094 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8105e72:	69fb      	ldr	r3, [r7, #28]
 8105e74:	f003 0310 	and.w	r3, r3, #16
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	f000 810b 	beq.w	8106094 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8105e7e:	69bb      	ldr	r3, [r7, #24]
 8105e80:	f003 0310 	and.w	r3, r3, #16
 8105e84:	2b00      	cmp	r3, #0
 8105e86:	f000 8105 	beq.w	8106094 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	2210      	movs	r2, #16
 8105e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	689b      	ldr	r3, [r3, #8]
 8105e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105e9c:	2b40      	cmp	r3, #64	; 0x40
 8105e9e:	f040 80bb 	bne.w	8106018 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	4a97      	ldr	r2, [pc, #604]	; (8106108 <HAL_UART_IRQHandler+0x4e8>)
 8105eaa:	4293      	cmp	r3, r2
 8105eac:	d059      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	4a95      	ldr	r2, [pc, #596]	; (810610c <HAL_UART_IRQHandler+0x4ec>)
 8105eb6:	4293      	cmp	r3, r2
 8105eb8:	d053      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	4a93      	ldr	r2, [pc, #588]	; (8106110 <HAL_UART_IRQHandler+0x4f0>)
 8105ec2:	4293      	cmp	r3, r2
 8105ec4:	d04d      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	4a91      	ldr	r2, [pc, #580]	; (8106114 <HAL_UART_IRQHandler+0x4f4>)
 8105ece:	4293      	cmp	r3, r2
 8105ed0:	d047      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	4a8f      	ldr	r2, [pc, #572]	; (8106118 <HAL_UART_IRQHandler+0x4f8>)
 8105eda:	4293      	cmp	r3, r2
 8105edc:	d041      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a8d      	ldr	r2, [pc, #564]	; (810611c <HAL_UART_IRQHandler+0x4fc>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d03b      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105eee:	681b      	ldr	r3, [r3, #0]
 8105ef0:	4a8b      	ldr	r2, [pc, #556]	; (8106120 <HAL_UART_IRQHandler+0x500>)
 8105ef2:	4293      	cmp	r3, r2
 8105ef4:	d035      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	4a89      	ldr	r2, [pc, #548]	; (8106124 <HAL_UART_IRQHandler+0x504>)
 8105efe:	4293      	cmp	r3, r2
 8105f00:	d02f      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f06:	681b      	ldr	r3, [r3, #0]
 8105f08:	4a87      	ldr	r2, [pc, #540]	; (8106128 <HAL_UART_IRQHandler+0x508>)
 8105f0a:	4293      	cmp	r3, r2
 8105f0c:	d029      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f12:	681b      	ldr	r3, [r3, #0]
 8105f14:	4a85      	ldr	r2, [pc, #532]	; (810612c <HAL_UART_IRQHandler+0x50c>)
 8105f16:	4293      	cmp	r3, r2
 8105f18:	d023      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	4a83      	ldr	r2, [pc, #524]	; (8106130 <HAL_UART_IRQHandler+0x510>)
 8105f22:	4293      	cmp	r3, r2
 8105f24:	d01d      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	4a81      	ldr	r2, [pc, #516]	; (8106134 <HAL_UART_IRQHandler+0x514>)
 8105f2e:	4293      	cmp	r3, r2
 8105f30:	d017      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	4a7f      	ldr	r2, [pc, #508]	; (8106138 <HAL_UART_IRQHandler+0x518>)
 8105f3a:	4293      	cmp	r3, r2
 8105f3c:	d011      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f42:	681b      	ldr	r3, [r3, #0]
 8105f44:	4a7d      	ldr	r2, [pc, #500]	; (810613c <HAL_UART_IRQHandler+0x51c>)
 8105f46:	4293      	cmp	r3, r2
 8105f48:	d00b      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a7b      	ldr	r2, [pc, #492]	; (8106140 <HAL_UART_IRQHandler+0x520>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d005      	beq.n	8105f62 <HAL_UART_IRQHandler+0x342>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a79      	ldr	r2, [pc, #484]	; (8106144 <HAL_UART_IRQHandler+0x524>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	d105      	bne.n	8105f6e <HAL_UART_IRQHandler+0x34e>
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	685b      	ldr	r3, [r3, #4]
 8105f6a:	b29b      	uxth	r3, r3
 8105f6c:	e004      	b.n	8105f78 <HAL_UART_IRQHandler+0x358>
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	685b      	ldr	r3, [r3, #4]
 8105f76:	b29b      	uxth	r3, r3
 8105f78:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8105f7a:	893b      	ldrh	r3, [r7, #8]
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	f000 8101 	beq.w	8106184 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8105f88:	893a      	ldrh	r2, [r7, #8]
 8105f8a:	429a      	cmp	r2, r3
 8105f8c:	f080 80fa 	bcs.w	8106184 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	893a      	ldrh	r2, [r7, #8]
 8105f94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f9c:	69db      	ldr	r3, [r3, #28]
 8105f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105fa2:	d02b      	beq.n	8105ffc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	681a      	ldr	r2, [r3, #0]
 8105faa:	687b      	ldr	r3, [r7, #4]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105fb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	689a      	ldr	r2, [r3, #8]
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	f022 0201 	bic.w	r2, r2, #1
 8105fc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	689a      	ldr	r2, [r3, #8]
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8105fd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	2220      	movs	r2, #32
 8105fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	2200      	movs	r2, #0
 8105fe0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	681a      	ldr	r2, [r3, #0]
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	f022 0210 	bic.w	r2, r2, #16
 8105ff0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ff6:	4618      	mov	r0, r3
 8105ff8:	f7fb fd30 	bl	8101a5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106008:	b29b      	uxth	r3, r3
 810600a:	1ad3      	subs	r3, r2, r3
 810600c:	b29b      	uxth	r3, r3
 810600e:	4619      	mov	r1, r3
 8106010:	6878      	ldr	r0, [r7, #4]
 8106012:	f000 f8dd 	bl	81061d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106016:	e0b5      	b.n	8106184 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106024:	b29b      	uxth	r3, r3
 8106026:	1ad3      	subs	r3, r2, r3
 8106028:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106030:	b29b      	uxth	r3, r3
 8106032:	2b00      	cmp	r3, #0
 8106034:	f000 80a8 	beq.w	8106188 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8106038:	897b      	ldrh	r3, [r7, #10]
 810603a:	2b00      	cmp	r3, #0
 810603c:	f000 80a4 	beq.w	8106188 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	681a      	ldr	r2, [r3, #0]
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810604e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	681b      	ldr	r3, [r3, #0]
 8106054:	689b      	ldr	r3, [r3, #8]
 8106056:	687a      	ldr	r2, [r7, #4]
 8106058:	6812      	ldr	r2, [r2, #0]
 810605a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810605e:	f023 0301 	bic.w	r3, r3, #1
 8106062:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	2220      	movs	r2, #32
 8106068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	2200      	movs	r2, #0
 8106070:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	2200      	movs	r2, #0
 8106076:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	681a      	ldr	r2, [r3, #0]
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	f022 0210 	bic.w	r2, r2, #16
 8106086:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106088:	897b      	ldrh	r3, [r7, #10]
 810608a:	4619      	mov	r1, r3
 810608c:	6878      	ldr	r0, [r7, #4]
 810608e:	f000 f89f 	bl	81061d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106092:	e079      	b.n	8106188 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106094:	69fb      	ldr	r3, [r7, #28]
 8106096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810609a:	2b00      	cmp	r3, #0
 810609c:	d00d      	beq.n	81060ba <HAL_UART_IRQHandler+0x49a>
 810609e:	697b      	ldr	r3, [r7, #20]
 81060a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81060a4:	2b00      	cmp	r3, #0
 81060a6:	d008      	beq.n	81060ba <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81060b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81060b2:	6878      	ldr	r0, [r7, #4]
 81060b4:	f001 f85b 	bl	810716e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81060b8:	e069      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81060ba:	69fb      	ldr	r3, [r7, #28]
 81060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060c0:	2b00      	cmp	r3, #0
 81060c2:	d012      	beq.n	81060ea <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81060c4:	69bb      	ldr	r3, [r7, #24]
 81060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060ca:	2b00      	cmp	r3, #0
 81060cc:	d104      	bne.n	81060d8 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81060ce:	697b      	ldr	r3, [r7, #20]
 81060d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d008      	beq.n	81060ea <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d055      	beq.n	810618c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81060e4:	6878      	ldr	r0, [r7, #4]
 81060e6:	4798      	blx	r3
    }
    return;
 81060e8:	e050      	b.n	810618c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81060ea:	69fb      	ldr	r3, [r7, #28]
 81060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060f0:	2b00      	cmp	r3, #0
 81060f2:	d029      	beq.n	8106148 <HAL_UART_IRQHandler+0x528>
 81060f4:	69bb      	ldr	r3, [r7, #24]
 81060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d024      	beq.n	8106148 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 81060fe:	6878      	ldr	r0, [r7, #4]
 8106100:	f001 f81b 	bl	810713a <UART_EndTransmit_IT>
    return;
 8106104:	e043      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
 8106106:	bf00      	nop
 8106108:	40020010 	.word	0x40020010
 810610c:	40020028 	.word	0x40020028
 8106110:	40020040 	.word	0x40020040
 8106114:	40020058 	.word	0x40020058
 8106118:	40020070 	.word	0x40020070
 810611c:	40020088 	.word	0x40020088
 8106120:	400200a0 	.word	0x400200a0
 8106124:	400200b8 	.word	0x400200b8
 8106128:	40020410 	.word	0x40020410
 810612c:	40020428 	.word	0x40020428
 8106130:	40020440 	.word	0x40020440
 8106134:	40020458 	.word	0x40020458
 8106138:	40020470 	.word	0x40020470
 810613c:	40020488 	.word	0x40020488
 8106140:	400204a0 	.word	0x400204a0
 8106144:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106148:	69fb      	ldr	r3, [r7, #28]
 810614a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810614e:	2b00      	cmp	r3, #0
 8106150:	d008      	beq.n	8106164 <HAL_UART_IRQHandler+0x544>
 8106152:	69bb      	ldr	r3, [r7, #24]
 8106154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106158:	2b00      	cmp	r3, #0
 810615a:	d003      	beq.n	8106164 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810615c:	6878      	ldr	r0, [r7, #4]
 810615e:	f001 f81a 	bl	8107196 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106162:	e014      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106164:	69fb      	ldr	r3, [r7, #28]
 8106166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810616a:	2b00      	cmp	r3, #0
 810616c:	d00f      	beq.n	810618e <HAL_UART_IRQHandler+0x56e>
 810616e:	69bb      	ldr	r3, [r7, #24]
 8106170:	2b00      	cmp	r3, #0
 8106172:	da0c      	bge.n	810618e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106174:	6878      	ldr	r0, [r7, #4]
 8106176:	f001 f804 	bl	8107182 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810617a:	e008      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
      return;
 810617c:	bf00      	nop
 810617e:	e006      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
    return;
 8106180:	bf00      	nop
 8106182:	e004      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
      return;
 8106184:	bf00      	nop
 8106186:	e002      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
      return;
 8106188:	bf00      	nop
 810618a:	e000      	b.n	810618e <HAL_UART_IRQHandler+0x56e>
    return;
 810618c:	bf00      	nop
  }
}
 810618e:	3720      	adds	r7, #32
 8106190:	46bd      	mov	sp, r7
 8106192:	bd80      	pop	{r7, pc}

08106194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8106194:	b480      	push	{r7}
 8106196:	b083      	sub	sp, #12
 8106198:	af00      	add	r7, sp, #0
 810619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810619c:	bf00      	nop
 810619e:	370c      	adds	r7, #12
 81061a0:	46bd      	mov	sp, r7
 81061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061a6:	4770      	bx	lr

081061a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 81061a8:	b480      	push	{r7}
 81061aa:	b083      	sub	sp, #12
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 81061b0:	bf00      	nop
 81061b2:	370c      	adds	r7, #12
 81061b4:	46bd      	mov	sp, r7
 81061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ba:	4770      	bx	lr

081061bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 81061bc:	b480      	push	{r7}
 81061be:	b083      	sub	sp, #12
 81061c0:	af00      	add	r7, sp, #0
 81061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 81061c4:	bf00      	nop
 81061c6:	370c      	adds	r7, #12
 81061c8:	46bd      	mov	sp, r7
 81061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ce:	4770      	bx	lr

081061d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 81061d0:	b480      	push	{r7}
 81061d2:	b083      	sub	sp, #12
 81061d4:	af00      	add	r7, sp, #0
 81061d6:	6078      	str	r0, [r7, #4]
 81061d8:	460b      	mov	r3, r1
 81061da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 81061dc:	bf00      	nop
 81061de:	370c      	adds	r7, #12
 81061e0:	46bd      	mov	sp, r7
 81061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061e6:	4770      	bx	lr

081061e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81061e8:	b5b0      	push	{r4, r5, r7, lr}
 81061ea:	b08e      	sub	sp, #56	; 0x38
 81061ec:	af00      	add	r7, sp, #0
 81061ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81061f0:	2300      	movs	r3, #0
 81061f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	689a      	ldr	r2, [r3, #8]
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	691b      	ldr	r3, [r3, #16]
 81061fe:	431a      	orrs	r2, r3
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	695b      	ldr	r3, [r3, #20]
 8106204:	431a      	orrs	r2, r3
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	69db      	ldr	r3, [r3, #28]
 810620a:	4313      	orrs	r3, r2
 810620c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	681a      	ldr	r2, [r3, #0]
 8106214:	4bc0      	ldr	r3, [pc, #768]	; (8106518 <UART_SetConfig+0x330>)
 8106216:	4013      	ands	r3, r2
 8106218:	687a      	ldr	r2, [r7, #4]
 810621a:	6812      	ldr	r2, [r2, #0]
 810621c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810621e:	430b      	orrs	r3, r1
 8106220:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	685b      	ldr	r3, [r3, #4]
 8106228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	68da      	ldr	r2, [r3, #12]
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	430a      	orrs	r2, r1
 8106236:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	699b      	ldr	r3, [r3, #24]
 810623c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	4ab6      	ldr	r2, [pc, #728]	; (810651c <UART_SetConfig+0x334>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d004      	beq.n	8106252 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	6a1b      	ldr	r3, [r3, #32]
 810624c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810624e:	4313      	orrs	r3, r2
 8106250:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	689b      	ldr	r3, [r3, #8]
 8106258:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810625c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106260:	687a      	ldr	r2, [r7, #4]
 8106262:	6812      	ldr	r2, [r2, #0]
 8106264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106266:	430b      	orrs	r3, r1
 8106268:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106270:	f023 010f 	bic.w	r1, r3, #15
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	681b      	ldr	r3, [r3, #0]
 810627c:	430a      	orrs	r2, r1
 810627e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	4aa6      	ldr	r2, [pc, #664]	; (8106520 <UART_SetConfig+0x338>)
 8106286:	4293      	cmp	r3, r2
 8106288:	d176      	bne.n	8106378 <UART_SetConfig+0x190>
 810628a:	4ba6      	ldr	r3, [pc, #664]	; (8106524 <UART_SetConfig+0x33c>)
 810628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810628e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106292:	2b28      	cmp	r3, #40	; 0x28
 8106294:	d86c      	bhi.n	8106370 <UART_SetConfig+0x188>
 8106296:	a201      	add	r2, pc, #4	; (adr r2, 810629c <UART_SetConfig+0xb4>)
 8106298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810629c:	08106341 	.word	0x08106341
 81062a0:	08106371 	.word	0x08106371
 81062a4:	08106371 	.word	0x08106371
 81062a8:	08106371 	.word	0x08106371
 81062ac:	08106371 	.word	0x08106371
 81062b0:	08106371 	.word	0x08106371
 81062b4:	08106371 	.word	0x08106371
 81062b8:	08106371 	.word	0x08106371
 81062bc:	08106349 	.word	0x08106349
 81062c0:	08106371 	.word	0x08106371
 81062c4:	08106371 	.word	0x08106371
 81062c8:	08106371 	.word	0x08106371
 81062cc:	08106371 	.word	0x08106371
 81062d0:	08106371 	.word	0x08106371
 81062d4:	08106371 	.word	0x08106371
 81062d8:	08106371 	.word	0x08106371
 81062dc:	08106351 	.word	0x08106351
 81062e0:	08106371 	.word	0x08106371
 81062e4:	08106371 	.word	0x08106371
 81062e8:	08106371 	.word	0x08106371
 81062ec:	08106371 	.word	0x08106371
 81062f0:	08106371 	.word	0x08106371
 81062f4:	08106371 	.word	0x08106371
 81062f8:	08106371 	.word	0x08106371
 81062fc:	08106359 	.word	0x08106359
 8106300:	08106371 	.word	0x08106371
 8106304:	08106371 	.word	0x08106371
 8106308:	08106371 	.word	0x08106371
 810630c:	08106371 	.word	0x08106371
 8106310:	08106371 	.word	0x08106371
 8106314:	08106371 	.word	0x08106371
 8106318:	08106371 	.word	0x08106371
 810631c:	08106361 	.word	0x08106361
 8106320:	08106371 	.word	0x08106371
 8106324:	08106371 	.word	0x08106371
 8106328:	08106371 	.word	0x08106371
 810632c:	08106371 	.word	0x08106371
 8106330:	08106371 	.word	0x08106371
 8106334:	08106371 	.word	0x08106371
 8106338:	08106371 	.word	0x08106371
 810633c:	08106369 	.word	0x08106369
 8106340:	2301      	movs	r3, #1
 8106342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106346:	e220      	b.n	810678a <UART_SetConfig+0x5a2>
 8106348:	2304      	movs	r3, #4
 810634a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810634e:	e21c      	b.n	810678a <UART_SetConfig+0x5a2>
 8106350:	2308      	movs	r3, #8
 8106352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106356:	e218      	b.n	810678a <UART_SetConfig+0x5a2>
 8106358:	2310      	movs	r3, #16
 810635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810635e:	e214      	b.n	810678a <UART_SetConfig+0x5a2>
 8106360:	2320      	movs	r3, #32
 8106362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106366:	e210      	b.n	810678a <UART_SetConfig+0x5a2>
 8106368:	2340      	movs	r3, #64	; 0x40
 810636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810636e:	e20c      	b.n	810678a <UART_SetConfig+0x5a2>
 8106370:	2380      	movs	r3, #128	; 0x80
 8106372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106376:	e208      	b.n	810678a <UART_SetConfig+0x5a2>
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	4a6a      	ldr	r2, [pc, #424]	; (8106528 <UART_SetConfig+0x340>)
 810637e:	4293      	cmp	r3, r2
 8106380:	d130      	bne.n	81063e4 <UART_SetConfig+0x1fc>
 8106382:	4b68      	ldr	r3, [pc, #416]	; (8106524 <UART_SetConfig+0x33c>)
 8106384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106386:	f003 0307 	and.w	r3, r3, #7
 810638a:	2b05      	cmp	r3, #5
 810638c:	d826      	bhi.n	81063dc <UART_SetConfig+0x1f4>
 810638e:	a201      	add	r2, pc, #4	; (adr r2, 8106394 <UART_SetConfig+0x1ac>)
 8106390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106394:	081063ad 	.word	0x081063ad
 8106398:	081063b5 	.word	0x081063b5
 810639c:	081063bd 	.word	0x081063bd
 81063a0:	081063c5 	.word	0x081063c5
 81063a4:	081063cd 	.word	0x081063cd
 81063a8:	081063d5 	.word	0x081063d5
 81063ac:	2300      	movs	r3, #0
 81063ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063b2:	e1ea      	b.n	810678a <UART_SetConfig+0x5a2>
 81063b4:	2304      	movs	r3, #4
 81063b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063ba:	e1e6      	b.n	810678a <UART_SetConfig+0x5a2>
 81063bc:	2308      	movs	r3, #8
 81063be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063c2:	e1e2      	b.n	810678a <UART_SetConfig+0x5a2>
 81063c4:	2310      	movs	r3, #16
 81063c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063ca:	e1de      	b.n	810678a <UART_SetConfig+0x5a2>
 81063cc:	2320      	movs	r3, #32
 81063ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063d2:	e1da      	b.n	810678a <UART_SetConfig+0x5a2>
 81063d4:	2340      	movs	r3, #64	; 0x40
 81063d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063da:	e1d6      	b.n	810678a <UART_SetConfig+0x5a2>
 81063dc:	2380      	movs	r3, #128	; 0x80
 81063de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063e2:	e1d2      	b.n	810678a <UART_SetConfig+0x5a2>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	4a50      	ldr	r2, [pc, #320]	; (810652c <UART_SetConfig+0x344>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d130      	bne.n	8106450 <UART_SetConfig+0x268>
 81063ee:	4b4d      	ldr	r3, [pc, #308]	; (8106524 <UART_SetConfig+0x33c>)
 81063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063f2:	f003 0307 	and.w	r3, r3, #7
 81063f6:	2b05      	cmp	r3, #5
 81063f8:	d826      	bhi.n	8106448 <UART_SetConfig+0x260>
 81063fa:	a201      	add	r2, pc, #4	; (adr r2, 8106400 <UART_SetConfig+0x218>)
 81063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106400:	08106419 	.word	0x08106419
 8106404:	08106421 	.word	0x08106421
 8106408:	08106429 	.word	0x08106429
 810640c:	08106431 	.word	0x08106431
 8106410:	08106439 	.word	0x08106439
 8106414:	08106441 	.word	0x08106441
 8106418:	2300      	movs	r3, #0
 810641a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810641e:	e1b4      	b.n	810678a <UART_SetConfig+0x5a2>
 8106420:	2304      	movs	r3, #4
 8106422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106426:	e1b0      	b.n	810678a <UART_SetConfig+0x5a2>
 8106428:	2308      	movs	r3, #8
 810642a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810642e:	e1ac      	b.n	810678a <UART_SetConfig+0x5a2>
 8106430:	2310      	movs	r3, #16
 8106432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106436:	e1a8      	b.n	810678a <UART_SetConfig+0x5a2>
 8106438:	2320      	movs	r3, #32
 810643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810643e:	e1a4      	b.n	810678a <UART_SetConfig+0x5a2>
 8106440:	2340      	movs	r3, #64	; 0x40
 8106442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106446:	e1a0      	b.n	810678a <UART_SetConfig+0x5a2>
 8106448:	2380      	movs	r3, #128	; 0x80
 810644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810644e:	e19c      	b.n	810678a <UART_SetConfig+0x5a2>
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	4a36      	ldr	r2, [pc, #216]	; (8106530 <UART_SetConfig+0x348>)
 8106456:	4293      	cmp	r3, r2
 8106458:	d130      	bne.n	81064bc <UART_SetConfig+0x2d4>
 810645a:	4b32      	ldr	r3, [pc, #200]	; (8106524 <UART_SetConfig+0x33c>)
 810645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810645e:	f003 0307 	and.w	r3, r3, #7
 8106462:	2b05      	cmp	r3, #5
 8106464:	d826      	bhi.n	81064b4 <UART_SetConfig+0x2cc>
 8106466:	a201      	add	r2, pc, #4	; (adr r2, 810646c <UART_SetConfig+0x284>)
 8106468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810646c:	08106485 	.word	0x08106485
 8106470:	0810648d 	.word	0x0810648d
 8106474:	08106495 	.word	0x08106495
 8106478:	0810649d 	.word	0x0810649d
 810647c:	081064a5 	.word	0x081064a5
 8106480:	081064ad 	.word	0x081064ad
 8106484:	2300      	movs	r3, #0
 8106486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810648a:	e17e      	b.n	810678a <UART_SetConfig+0x5a2>
 810648c:	2304      	movs	r3, #4
 810648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106492:	e17a      	b.n	810678a <UART_SetConfig+0x5a2>
 8106494:	2308      	movs	r3, #8
 8106496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810649a:	e176      	b.n	810678a <UART_SetConfig+0x5a2>
 810649c:	2310      	movs	r3, #16
 810649e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064a2:	e172      	b.n	810678a <UART_SetConfig+0x5a2>
 81064a4:	2320      	movs	r3, #32
 81064a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064aa:	e16e      	b.n	810678a <UART_SetConfig+0x5a2>
 81064ac:	2340      	movs	r3, #64	; 0x40
 81064ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064b2:	e16a      	b.n	810678a <UART_SetConfig+0x5a2>
 81064b4:	2380      	movs	r3, #128	; 0x80
 81064b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064ba:	e166      	b.n	810678a <UART_SetConfig+0x5a2>
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	4a1c      	ldr	r2, [pc, #112]	; (8106534 <UART_SetConfig+0x34c>)
 81064c2:	4293      	cmp	r3, r2
 81064c4:	d140      	bne.n	8106548 <UART_SetConfig+0x360>
 81064c6:	4b17      	ldr	r3, [pc, #92]	; (8106524 <UART_SetConfig+0x33c>)
 81064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064ca:	f003 0307 	and.w	r3, r3, #7
 81064ce:	2b05      	cmp	r3, #5
 81064d0:	d836      	bhi.n	8106540 <UART_SetConfig+0x358>
 81064d2:	a201      	add	r2, pc, #4	; (adr r2, 81064d8 <UART_SetConfig+0x2f0>)
 81064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064d8:	081064f1 	.word	0x081064f1
 81064dc:	081064f9 	.word	0x081064f9
 81064e0:	08106501 	.word	0x08106501
 81064e4:	08106509 	.word	0x08106509
 81064e8:	08106511 	.word	0x08106511
 81064ec:	08106539 	.word	0x08106539
 81064f0:	2300      	movs	r3, #0
 81064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064f6:	e148      	b.n	810678a <UART_SetConfig+0x5a2>
 81064f8:	2304      	movs	r3, #4
 81064fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064fe:	e144      	b.n	810678a <UART_SetConfig+0x5a2>
 8106500:	2308      	movs	r3, #8
 8106502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106506:	e140      	b.n	810678a <UART_SetConfig+0x5a2>
 8106508:	2310      	movs	r3, #16
 810650a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810650e:	e13c      	b.n	810678a <UART_SetConfig+0x5a2>
 8106510:	2320      	movs	r3, #32
 8106512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106516:	e138      	b.n	810678a <UART_SetConfig+0x5a2>
 8106518:	cfff69f3 	.word	0xcfff69f3
 810651c:	58000c00 	.word	0x58000c00
 8106520:	40011000 	.word	0x40011000
 8106524:	58024400 	.word	0x58024400
 8106528:	40004400 	.word	0x40004400
 810652c:	40004800 	.word	0x40004800
 8106530:	40004c00 	.word	0x40004c00
 8106534:	40005000 	.word	0x40005000
 8106538:	2340      	movs	r3, #64	; 0x40
 810653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810653e:	e124      	b.n	810678a <UART_SetConfig+0x5a2>
 8106540:	2380      	movs	r3, #128	; 0x80
 8106542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106546:	e120      	b.n	810678a <UART_SetConfig+0x5a2>
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	4acc      	ldr	r2, [pc, #816]	; (8106880 <UART_SetConfig+0x698>)
 810654e:	4293      	cmp	r3, r2
 8106550:	d176      	bne.n	8106640 <UART_SetConfig+0x458>
 8106552:	4bcc      	ldr	r3, [pc, #816]	; (8106884 <UART_SetConfig+0x69c>)
 8106554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810655a:	2b28      	cmp	r3, #40	; 0x28
 810655c:	d86c      	bhi.n	8106638 <UART_SetConfig+0x450>
 810655e:	a201      	add	r2, pc, #4	; (adr r2, 8106564 <UART_SetConfig+0x37c>)
 8106560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106564:	08106609 	.word	0x08106609
 8106568:	08106639 	.word	0x08106639
 810656c:	08106639 	.word	0x08106639
 8106570:	08106639 	.word	0x08106639
 8106574:	08106639 	.word	0x08106639
 8106578:	08106639 	.word	0x08106639
 810657c:	08106639 	.word	0x08106639
 8106580:	08106639 	.word	0x08106639
 8106584:	08106611 	.word	0x08106611
 8106588:	08106639 	.word	0x08106639
 810658c:	08106639 	.word	0x08106639
 8106590:	08106639 	.word	0x08106639
 8106594:	08106639 	.word	0x08106639
 8106598:	08106639 	.word	0x08106639
 810659c:	08106639 	.word	0x08106639
 81065a0:	08106639 	.word	0x08106639
 81065a4:	08106619 	.word	0x08106619
 81065a8:	08106639 	.word	0x08106639
 81065ac:	08106639 	.word	0x08106639
 81065b0:	08106639 	.word	0x08106639
 81065b4:	08106639 	.word	0x08106639
 81065b8:	08106639 	.word	0x08106639
 81065bc:	08106639 	.word	0x08106639
 81065c0:	08106639 	.word	0x08106639
 81065c4:	08106621 	.word	0x08106621
 81065c8:	08106639 	.word	0x08106639
 81065cc:	08106639 	.word	0x08106639
 81065d0:	08106639 	.word	0x08106639
 81065d4:	08106639 	.word	0x08106639
 81065d8:	08106639 	.word	0x08106639
 81065dc:	08106639 	.word	0x08106639
 81065e0:	08106639 	.word	0x08106639
 81065e4:	08106629 	.word	0x08106629
 81065e8:	08106639 	.word	0x08106639
 81065ec:	08106639 	.word	0x08106639
 81065f0:	08106639 	.word	0x08106639
 81065f4:	08106639 	.word	0x08106639
 81065f8:	08106639 	.word	0x08106639
 81065fc:	08106639 	.word	0x08106639
 8106600:	08106639 	.word	0x08106639
 8106604:	08106631 	.word	0x08106631
 8106608:	2301      	movs	r3, #1
 810660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810660e:	e0bc      	b.n	810678a <UART_SetConfig+0x5a2>
 8106610:	2304      	movs	r3, #4
 8106612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106616:	e0b8      	b.n	810678a <UART_SetConfig+0x5a2>
 8106618:	2308      	movs	r3, #8
 810661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810661e:	e0b4      	b.n	810678a <UART_SetConfig+0x5a2>
 8106620:	2310      	movs	r3, #16
 8106622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106626:	e0b0      	b.n	810678a <UART_SetConfig+0x5a2>
 8106628:	2320      	movs	r3, #32
 810662a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810662e:	e0ac      	b.n	810678a <UART_SetConfig+0x5a2>
 8106630:	2340      	movs	r3, #64	; 0x40
 8106632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106636:	e0a8      	b.n	810678a <UART_SetConfig+0x5a2>
 8106638:	2380      	movs	r3, #128	; 0x80
 810663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810663e:	e0a4      	b.n	810678a <UART_SetConfig+0x5a2>
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	4a90      	ldr	r2, [pc, #576]	; (8106888 <UART_SetConfig+0x6a0>)
 8106646:	4293      	cmp	r3, r2
 8106648:	d130      	bne.n	81066ac <UART_SetConfig+0x4c4>
 810664a:	4b8e      	ldr	r3, [pc, #568]	; (8106884 <UART_SetConfig+0x69c>)
 810664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810664e:	f003 0307 	and.w	r3, r3, #7
 8106652:	2b05      	cmp	r3, #5
 8106654:	d826      	bhi.n	81066a4 <UART_SetConfig+0x4bc>
 8106656:	a201      	add	r2, pc, #4	; (adr r2, 810665c <UART_SetConfig+0x474>)
 8106658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810665c:	08106675 	.word	0x08106675
 8106660:	0810667d 	.word	0x0810667d
 8106664:	08106685 	.word	0x08106685
 8106668:	0810668d 	.word	0x0810668d
 810666c:	08106695 	.word	0x08106695
 8106670:	0810669d 	.word	0x0810669d
 8106674:	2300      	movs	r3, #0
 8106676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810667a:	e086      	b.n	810678a <UART_SetConfig+0x5a2>
 810667c:	2304      	movs	r3, #4
 810667e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106682:	e082      	b.n	810678a <UART_SetConfig+0x5a2>
 8106684:	2308      	movs	r3, #8
 8106686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810668a:	e07e      	b.n	810678a <UART_SetConfig+0x5a2>
 810668c:	2310      	movs	r3, #16
 810668e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106692:	e07a      	b.n	810678a <UART_SetConfig+0x5a2>
 8106694:	2320      	movs	r3, #32
 8106696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810669a:	e076      	b.n	810678a <UART_SetConfig+0x5a2>
 810669c:	2340      	movs	r3, #64	; 0x40
 810669e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066a2:	e072      	b.n	810678a <UART_SetConfig+0x5a2>
 81066a4:	2380      	movs	r3, #128	; 0x80
 81066a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066aa:	e06e      	b.n	810678a <UART_SetConfig+0x5a2>
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	4a76      	ldr	r2, [pc, #472]	; (810688c <UART_SetConfig+0x6a4>)
 81066b2:	4293      	cmp	r3, r2
 81066b4:	d130      	bne.n	8106718 <UART_SetConfig+0x530>
 81066b6:	4b73      	ldr	r3, [pc, #460]	; (8106884 <UART_SetConfig+0x69c>)
 81066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066ba:	f003 0307 	and.w	r3, r3, #7
 81066be:	2b05      	cmp	r3, #5
 81066c0:	d826      	bhi.n	8106710 <UART_SetConfig+0x528>
 81066c2:	a201      	add	r2, pc, #4	; (adr r2, 81066c8 <UART_SetConfig+0x4e0>)
 81066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066c8:	081066e1 	.word	0x081066e1
 81066cc:	081066e9 	.word	0x081066e9
 81066d0:	081066f1 	.word	0x081066f1
 81066d4:	081066f9 	.word	0x081066f9
 81066d8:	08106701 	.word	0x08106701
 81066dc:	08106709 	.word	0x08106709
 81066e0:	2300      	movs	r3, #0
 81066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066e6:	e050      	b.n	810678a <UART_SetConfig+0x5a2>
 81066e8:	2304      	movs	r3, #4
 81066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ee:	e04c      	b.n	810678a <UART_SetConfig+0x5a2>
 81066f0:	2308      	movs	r3, #8
 81066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066f6:	e048      	b.n	810678a <UART_SetConfig+0x5a2>
 81066f8:	2310      	movs	r3, #16
 81066fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066fe:	e044      	b.n	810678a <UART_SetConfig+0x5a2>
 8106700:	2320      	movs	r3, #32
 8106702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106706:	e040      	b.n	810678a <UART_SetConfig+0x5a2>
 8106708:	2340      	movs	r3, #64	; 0x40
 810670a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810670e:	e03c      	b.n	810678a <UART_SetConfig+0x5a2>
 8106710:	2380      	movs	r3, #128	; 0x80
 8106712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106716:	e038      	b.n	810678a <UART_SetConfig+0x5a2>
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	681b      	ldr	r3, [r3, #0]
 810671c:	4a5c      	ldr	r2, [pc, #368]	; (8106890 <UART_SetConfig+0x6a8>)
 810671e:	4293      	cmp	r3, r2
 8106720:	d130      	bne.n	8106784 <UART_SetConfig+0x59c>
 8106722:	4b58      	ldr	r3, [pc, #352]	; (8106884 <UART_SetConfig+0x69c>)
 8106724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106726:	f003 0307 	and.w	r3, r3, #7
 810672a:	2b05      	cmp	r3, #5
 810672c:	d826      	bhi.n	810677c <UART_SetConfig+0x594>
 810672e:	a201      	add	r2, pc, #4	; (adr r2, 8106734 <UART_SetConfig+0x54c>)
 8106730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106734:	0810674d 	.word	0x0810674d
 8106738:	08106755 	.word	0x08106755
 810673c:	0810675d 	.word	0x0810675d
 8106740:	08106765 	.word	0x08106765
 8106744:	0810676d 	.word	0x0810676d
 8106748:	08106775 	.word	0x08106775
 810674c:	2302      	movs	r3, #2
 810674e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106752:	e01a      	b.n	810678a <UART_SetConfig+0x5a2>
 8106754:	2304      	movs	r3, #4
 8106756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810675a:	e016      	b.n	810678a <UART_SetConfig+0x5a2>
 810675c:	2308      	movs	r3, #8
 810675e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106762:	e012      	b.n	810678a <UART_SetConfig+0x5a2>
 8106764:	2310      	movs	r3, #16
 8106766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810676a:	e00e      	b.n	810678a <UART_SetConfig+0x5a2>
 810676c:	2320      	movs	r3, #32
 810676e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106772:	e00a      	b.n	810678a <UART_SetConfig+0x5a2>
 8106774:	2340      	movs	r3, #64	; 0x40
 8106776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810677a:	e006      	b.n	810678a <UART_SetConfig+0x5a2>
 810677c:	2380      	movs	r3, #128	; 0x80
 810677e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106782:	e002      	b.n	810678a <UART_SetConfig+0x5a2>
 8106784:	2380      	movs	r3, #128	; 0x80
 8106786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	4a40      	ldr	r2, [pc, #256]	; (8106890 <UART_SetConfig+0x6a8>)
 8106790:	4293      	cmp	r3, r2
 8106792:	f040 80ef 	bne.w	8106974 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810679a:	2b20      	cmp	r3, #32
 810679c:	dc46      	bgt.n	810682c <UART_SetConfig+0x644>
 810679e:	2b02      	cmp	r3, #2
 81067a0:	f2c0 8081 	blt.w	81068a6 <UART_SetConfig+0x6be>
 81067a4:	3b02      	subs	r3, #2
 81067a6:	2b1e      	cmp	r3, #30
 81067a8:	d87d      	bhi.n	81068a6 <UART_SetConfig+0x6be>
 81067aa:	a201      	add	r2, pc, #4	; (adr r2, 81067b0 <UART_SetConfig+0x5c8>)
 81067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067b0:	08106833 	.word	0x08106833
 81067b4:	081068a7 	.word	0x081068a7
 81067b8:	0810683b 	.word	0x0810683b
 81067bc:	081068a7 	.word	0x081068a7
 81067c0:	081068a7 	.word	0x081068a7
 81067c4:	081068a7 	.word	0x081068a7
 81067c8:	0810684b 	.word	0x0810684b
 81067cc:	081068a7 	.word	0x081068a7
 81067d0:	081068a7 	.word	0x081068a7
 81067d4:	081068a7 	.word	0x081068a7
 81067d8:	081068a7 	.word	0x081068a7
 81067dc:	081068a7 	.word	0x081068a7
 81067e0:	081068a7 	.word	0x081068a7
 81067e4:	081068a7 	.word	0x081068a7
 81067e8:	0810685b 	.word	0x0810685b
 81067ec:	081068a7 	.word	0x081068a7
 81067f0:	081068a7 	.word	0x081068a7
 81067f4:	081068a7 	.word	0x081068a7
 81067f8:	081068a7 	.word	0x081068a7
 81067fc:	081068a7 	.word	0x081068a7
 8106800:	081068a7 	.word	0x081068a7
 8106804:	081068a7 	.word	0x081068a7
 8106808:	081068a7 	.word	0x081068a7
 810680c:	081068a7 	.word	0x081068a7
 8106810:	081068a7 	.word	0x081068a7
 8106814:	081068a7 	.word	0x081068a7
 8106818:	081068a7 	.word	0x081068a7
 810681c:	081068a7 	.word	0x081068a7
 8106820:	081068a7 	.word	0x081068a7
 8106824:	081068a7 	.word	0x081068a7
 8106828:	08106899 	.word	0x08106899
 810682c:	2b40      	cmp	r3, #64	; 0x40
 810682e:	d036      	beq.n	810689e <UART_SetConfig+0x6b6>
 8106830:	e039      	b.n	81068a6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106832:	f7fe fd03 	bl	810523c <HAL_RCCEx_GetD3PCLK1Freq>
 8106836:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106838:	e03b      	b.n	81068b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810683a:	f107 0314 	add.w	r3, r7, #20
 810683e:	4618      	mov	r0, r3
 8106840:	f7fe fd12 	bl	8105268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106844:	69bb      	ldr	r3, [r7, #24]
 8106846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106848:	e033      	b.n	81068b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810684a:	f107 0308 	add.w	r3, r7, #8
 810684e:	4618      	mov	r0, r3
 8106850:	f7fe fe5e 	bl	8105510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106858:	e02b      	b.n	81068b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810685a:	4b0a      	ldr	r3, [pc, #40]	; (8106884 <UART_SetConfig+0x69c>)
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	f003 0320 	and.w	r3, r3, #32
 8106862:	2b00      	cmp	r3, #0
 8106864:	d009      	beq.n	810687a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106866:	4b07      	ldr	r3, [pc, #28]	; (8106884 <UART_SetConfig+0x69c>)
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	08db      	lsrs	r3, r3, #3
 810686c:	f003 0303 	and.w	r3, r3, #3
 8106870:	4a08      	ldr	r2, [pc, #32]	; (8106894 <UART_SetConfig+0x6ac>)
 8106872:	fa22 f303 	lsr.w	r3, r2, r3
 8106876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106878:	e01b      	b.n	81068b2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810687a:	4b06      	ldr	r3, [pc, #24]	; (8106894 <UART_SetConfig+0x6ac>)
 810687c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810687e:	e018      	b.n	81068b2 <UART_SetConfig+0x6ca>
 8106880:	40011400 	.word	0x40011400
 8106884:	58024400 	.word	0x58024400
 8106888:	40007800 	.word	0x40007800
 810688c:	40007c00 	.word	0x40007c00
 8106890:	58000c00 	.word	0x58000c00
 8106894:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106898:	4bc4      	ldr	r3, [pc, #784]	; (8106bac <UART_SetConfig+0x9c4>)
 810689a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810689c:	e009      	b.n	81068b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810689e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81068a4:	e005      	b.n	81068b2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 81068a6:	2300      	movs	r3, #0
 81068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81068aa:	2301      	movs	r3, #1
 81068ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81068b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	f000 81da 	beq.w	8106c6e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81068be:	4abc      	ldr	r2, [pc, #752]	; (8106bb0 <UART_SetConfig+0x9c8>)
 81068c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81068c4:	461a      	mov	r2, r3
 81068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068c8:	fbb3 f3f2 	udiv	r3, r3, r2
 81068cc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	685a      	ldr	r2, [r3, #4]
 81068d2:	4613      	mov	r3, r2
 81068d4:	005b      	lsls	r3, r3, #1
 81068d6:	4413      	add	r3, r2
 81068d8:	6a3a      	ldr	r2, [r7, #32]
 81068da:	429a      	cmp	r2, r3
 81068dc:	d305      	bcc.n	81068ea <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	685b      	ldr	r3, [r3, #4]
 81068e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81068e4:	6a3a      	ldr	r2, [r7, #32]
 81068e6:	429a      	cmp	r2, r3
 81068e8:	d903      	bls.n	81068f2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81068ea:	2301      	movs	r3, #1
 81068ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81068f0:	e1bd      	b.n	8106c6e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068f4:	4618      	mov	r0, r3
 81068f6:	f04f 0100 	mov.w	r1, #0
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81068fe:	4aac      	ldr	r2, [pc, #688]	; (8106bb0 <UART_SetConfig+0x9c8>)
 8106900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106904:	b29a      	uxth	r2, r3
 8106906:	f04f 0300 	mov.w	r3, #0
 810690a:	f7f9 fce5 	bl	81002d8 <__aeabi_uldivmod>
 810690e:	4602      	mov	r2, r0
 8106910:	460b      	mov	r3, r1
 8106912:	4610      	mov	r0, r2
 8106914:	4619      	mov	r1, r3
 8106916:	f04f 0200 	mov.w	r2, #0
 810691a:	f04f 0300 	mov.w	r3, #0
 810691e:	020b      	lsls	r3, r1, #8
 8106920:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106924:	0202      	lsls	r2, r0, #8
 8106926:	6879      	ldr	r1, [r7, #4]
 8106928:	6849      	ldr	r1, [r1, #4]
 810692a:	0849      	lsrs	r1, r1, #1
 810692c:	4608      	mov	r0, r1
 810692e:	f04f 0100 	mov.w	r1, #0
 8106932:	1814      	adds	r4, r2, r0
 8106934:	eb43 0501 	adc.w	r5, r3, r1
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	685b      	ldr	r3, [r3, #4]
 810693c:	461a      	mov	r2, r3
 810693e:	f04f 0300 	mov.w	r3, #0
 8106942:	4620      	mov	r0, r4
 8106944:	4629      	mov	r1, r5
 8106946:	f7f9 fcc7 	bl	81002d8 <__aeabi_uldivmod>
 810694a:	4602      	mov	r2, r0
 810694c:	460b      	mov	r3, r1
 810694e:	4613      	mov	r3, r2
 8106950:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106958:	d308      	bcc.n	810696c <UART_SetConfig+0x784>
 810695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810695c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106960:	d204      	bcs.n	810696c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106968:	60da      	str	r2, [r3, #12]
 810696a:	e180      	b.n	8106c6e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810696c:	2301      	movs	r3, #1
 810696e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106972:	e17c      	b.n	8106c6e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	69db      	ldr	r3, [r3, #28]
 8106978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810697c:	f040 80bf 	bne.w	8106afe <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8106980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106984:	2b20      	cmp	r3, #32
 8106986:	dc49      	bgt.n	8106a1c <UART_SetConfig+0x834>
 8106988:	2b00      	cmp	r3, #0
 810698a:	db7c      	blt.n	8106a86 <UART_SetConfig+0x89e>
 810698c:	2b20      	cmp	r3, #32
 810698e:	d87a      	bhi.n	8106a86 <UART_SetConfig+0x89e>
 8106990:	a201      	add	r2, pc, #4	; (adr r2, 8106998 <UART_SetConfig+0x7b0>)
 8106992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106996:	bf00      	nop
 8106998:	08106a23 	.word	0x08106a23
 810699c:	08106a2b 	.word	0x08106a2b
 81069a0:	08106a87 	.word	0x08106a87
 81069a4:	08106a87 	.word	0x08106a87
 81069a8:	08106a33 	.word	0x08106a33
 81069ac:	08106a87 	.word	0x08106a87
 81069b0:	08106a87 	.word	0x08106a87
 81069b4:	08106a87 	.word	0x08106a87
 81069b8:	08106a43 	.word	0x08106a43
 81069bc:	08106a87 	.word	0x08106a87
 81069c0:	08106a87 	.word	0x08106a87
 81069c4:	08106a87 	.word	0x08106a87
 81069c8:	08106a87 	.word	0x08106a87
 81069cc:	08106a87 	.word	0x08106a87
 81069d0:	08106a87 	.word	0x08106a87
 81069d4:	08106a87 	.word	0x08106a87
 81069d8:	08106a53 	.word	0x08106a53
 81069dc:	08106a87 	.word	0x08106a87
 81069e0:	08106a87 	.word	0x08106a87
 81069e4:	08106a87 	.word	0x08106a87
 81069e8:	08106a87 	.word	0x08106a87
 81069ec:	08106a87 	.word	0x08106a87
 81069f0:	08106a87 	.word	0x08106a87
 81069f4:	08106a87 	.word	0x08106a87
 81069f8:	08106a87 	.word	0x08106a87
 81069fc:	08106a87 	.word	0x08106a87
 8106a00:	08106a87 	.word	0x08106a87
 8106a04:	08106a87 	.word	0x08106a87
 8106a08:	08106a87 	.word	0x08106a87
 8106a0c:	08106a87 	.word	0x08106a87
 8106a10:	08106a87 	.word	0x08106a87
 8106a14:	08106a87 	.word	0x08106a87
 8106a18:	08106a79 	.word	0x08106a79
 8106a1c:	2b40      	cmp	r3, #64	; 0x40
 8106a1e:	d02e      	beq.n	8106a7e <UART_SetConfig+0x896>
 8106a20:	e031      	b.n	8106a86 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106a22:	f7fd fc9f 	bl	8104364 <HAL_RCC_GetPCLK1Freq>
 8106a26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106a28:	e033      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106a2a:	f7fd fcb1 	bl	8104390 <HAL_RCC_GetPCLK2Freq>
 8106a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106a30:	e02f      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106a32:	f107 0314 	add.w	r3, r7, #20
 8106a36:	4618      	mov	r0, r3
 8106a38:	f7fe fc16 	bl	8105268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106a3c:	69bb      	ldr	r3, [r7, #24]
 8106a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a40:	e027      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a42:	f107 0308 	add.w	r3, r7, #8
 8106a46:	4618      	mov	r0, r3
 8106a48:	f7fe fd62 	bl	8105510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a50:	e01f      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106a52:	4b58      	ldr	r3, [pc, #352]	; (8106bb4 <UART_SetConfig+0x9cc>)
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	f003 0320 	and.w	r3, r3, #32
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	d009      	beq.n	8106a72 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106a5e:	4b55      	ldr	r3, [pc, #340]	; (8106bb4 <UART_SetConfig+0x9cc>)
 8106a60:	681b      	ldr	r3, [r3, #0]
 8106a62:	08db      	lsrs	r3, r3, #3
 8106a64:	f003 0303 	and.w	r3, r3, #3
 8106a68:	4a53      	ldr	r2, [pc, #332]	; (8106bb8 <UART_SetConfig+0x9d0>)
 8106a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8106a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106a70:	e00f      	b.n	8106a92 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8106a72:	4b51      	ldr	r3, [pc, #324]	; (8106bb8 <UART_SetConfig+0x9d0>)
 8106a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a76:	e00c      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106a78:	4b4c      	ldr	r3, [pc, #304]	; (8106bac <UART_SetConfig+0x9c4>)
 8106a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a7c:	e009      	b.n	8106a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106a84:	e005      	b.n	8106a92 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8106a86:	2300      	movs	r3, #0
 8106a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106a8a:	2301      	movs	r3, #1
 8106a8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106a90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	f000 80ea 	beq.w	8106c6e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a9e:	4a44      	ldr	r2, [pc, #272]	; (8106bb0 <UART_SetConfig+0x9c8>)
 8106aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106aa4:	461a      	mov	r2, r3
 8106aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8106aac:	005a      	lsls	r2, r3, #1
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	685b      	ldr	r3, [r3, #4]
 8106ab2:	085b      	lsrs	r3, r3, #1
 8106ab4:	441a      	add	r2, r3
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	685b      	ldr	r3, [r3, #4]
 8106aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8106abe:	b29b      	uxth	r3, r3
 8106ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ac4:	2b0f      	cmp	r3, #15
 8106ac6:	d916      	bls.n	8106af6 <UART_SetConfig+0x90e>
 8106ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106ace:	d212      	bcs.n	8106af6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad2:	b29b      	uxth	r3, r3
 8106ad4:	f023 030f 	bic.w	r3, r3, #15
 8106ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106adc:	085b      	lsrs	r3, r3, #1
 8106ade:	b29b      	uxth	r3, r3
 8106ae0:	f003 0307 	and.w	r3, r3, #7
 8106ae4:	b29a      	uxth	r2, r3
 8106ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106ae8:	4313      	orrs	r3, r2
 8106aea:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106af2:	60da      	str	r2, [r3, #12]
 8106af4:	e0bb      	b.n	8106c6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106af6:	2301      	movs	r3, #1
 8106af8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106afc:	e0b7      	b.n	8106c6e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8106afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106b02:	2b20      	cmp	r3, #32
 8106b04:	dc4a      	bgt.n	8106b9c <UART_SetConfig+0x9b4>
 8106b06:	2b00      	cmp	r3, #0
 8106b08:	f2c0 8086 	blt.w	8106c18 <UART_SetConfig+0xa30>
 8106b0c:	2b20      	cmp	r3, #32
 8106b0e:	f200 8083 	bhi.w	8106c18 <UART_SetConfig+0xa30>
 8106b12:	a201      	add	r2, pc, #4	; (adr r2, 8106b18 <UART_SetConfig+0x930>)
 8106b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b18:	08106ba3 	.word	0x08106ba3
 8106b1c:	08106bbd 	.word	0x08106bbd
 8106b20:	08106c19 	.word	0x08106c19
 8106b24:	08106c19 	.word	0x08106c19
 8106b28:	08106bc5 	.word	0x08106bc5
 8106b2c:	08106c19 	.word	0x08106c19
 8106b30:	08106c19 	.word	0x08106c19
 8106b34:	08106c19 	.word	0x08106c19
 8106b38:	08106bd5 	.word	0x08106bd5
 8106b3c:	08106c19 	.word	0x08106c19
 8106b40:	08106c19 	.word	0x08106c19
 8106b44:	08106c19 	.word	0x08106c19
 8106b48:	08106c19 	.word	0x08106c19
 8106b4c:	08106c19 	.word	0x08106c19
 8106b50:	08106c19 	.word	0x08106c19
 8106b54:	08106c19 	.word	0x08106c19
 8106b58:	08106be5 	.word	0x08106be5
 8106b5c:	08106c19 	.word	0x08106c19
 8106b60:	08106c19 	.word	0x08106c19
 8106b64:	08106c19 	.word	0x08106c19
 8106b68:	08106c19 	.word	0x08106c19
 8106b6c:	08106c19 	.word	0x08106c19
 8106b70:	08106c19 	.word	0x08106c19
 8106b74:	08106c19 	.word	0x08106c19
 8106b78:	08106c19 	.word	0x08106c19
 8106b7c:	08106c19 	.word	0x08106c19
 8106b80:	08106c19 	.word	0x08106c19
 8106b84:	08106c19 	.word	0x08106c19
 8106b88:	08106c19 	.word	0x08106c19
 8106b8c:	08106c19 	.word	0x08106c19
 8106b90:	08106c19 	.word	0x08106c19
 8106b94:	08106c19 	.word	0x08106c19
 8106b98:	08106c0b 	.word	0x08106c0b
 8106b9c:	2b40      	cmp	r3, #64	; 0x40
 8106b9e:	d037      	beq.n	8106c10 <UART_SetConfig+0xa28>
 8106ba0:	e03a      	b.n	8106c18 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106ba2:	f7fd fbdf 	bl	8104364 <HAL_RCC_GetPCLK1Freq>
 8106ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106ba8:	e03c      	b.n	8106c24 <UART_SetConfig+0xa3c>
 8106baa:	bf00      	nop
 8106bac:	003d0900 	.word	0x003d0900
 8106bb0:	08107438 	.word	0x08107438
 8106bb4:	58024400 	.word	0x58024400
 8106bb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106bbc:	f7fd fbe8 	bl	8104390 <HAL_RCC_GetPCLK2Freq>
 8106bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106bc2:	e02f      	b.n	8106c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106bc4:	f107 0314 	add.w	r3, r7, #20
 8106bc8:	4618      	mov	r0, r3
 8106bca:	f7fe fb4d 	bl	8105268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106bce:	69bb      	ldr	r3, [r7, #24]
 8106bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106bd2:	e027      	b.n	8106c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106bd4:	f107 0308 	add.w	r3, r7, #8
 8106bd8:	4618      	mov	r0, r3
 8106bda:	f7fe fc99 	bl	8105510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106be2:	e01f      	b.n	8106c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106be4:	4b2c      	ldr	r3, [pc, #176]	; (8106c98 <UART_SetConfig+0xab0>)
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f003 0320 	and.w	r3, r3, #32
 8106bec:	2b00      	cmp	r3, #0
 8106bee:	d009      	beq.n	8106c04 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106bf0:	4b29      	ldr	r3, [pc, #164]	; (8106c98 <UART_SetConfig+0xab0>)
 8106bf2:	681b      	ldr	r3, [r3, #0]
 8106bf4:	08db      	lsrs	r3, r3, #3
 8106bf6:	f003 0303 	and.w	r3, r3, #3
 8106bfa:	4a28      	ldr	r2, [pc, #160]	; (8106c9c <UART_SetConfig+0xab4>)
 8106bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8106c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106c02:	e00f      	b.n	8106c24 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8106c04:	4b25      	ldr	r3, [pc, #148]	; (8106c9c <UART_SetConfig+0xab4>)
 8106c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c08:	e00c      	b.n	8106c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106c0a:	4b25      	ldr	r3, [pc, #148]	; (8106ca0 <UART_SetConfig+0xab8>)
 8106c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c0e:	e009      	b.n	8106c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c16:	e005      	b.n	8106c24 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8106c18:	2300      	movs	r3, #0
 8106c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106c1c:	2301      	movs	r3, #1
 8106c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106c22:	bf00      	nop
    }

    if (pclk != 0U)
 8106c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c26:	2b00      	cmp	r3, #0
 8106c28:	d021      	beq.n	8106c6e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c2e:	4a1d      	ldr	r2, [pc, #116]	; (8106ca4 <UART_SetConfig+0xabc>)
 8106c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106c34:	461a      	mov	r2, r3
 8106c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	685b      	ldr	r3, [r3, #4]
 8106c40:	085b      	lsrs	r3, r3, #1
 8106c42:	441a      	add	r2, r3
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	685b      	ldr	r3, [r3, #4]
 8106c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8106c4c:	b29b      	uxth	r3, r3
 8106c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c52:	2b0f      	cmp	r3, #15
 8106c54:	d908      	bls.n	8106c68 <UART_SetConfig+0xa80>
 8106c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106c5c:	d204      	bcs.n	8106c68 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	681b      	ldr	r3, [r3, #0]
 8106c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106c64:	60da      	str	r2, [r3, #12]
 8106c66:	e002      	b.n	8106c6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106c68:	2301      	movs	r3, #1
 8106c6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106c6e:	687b      	ldr	r3, [r7, #4]
 8106c70:	2201      	movs	r2, #1
 8106c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	2201      	movs	r2, #1
 8106c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	2200      	movs	r2, #0
 8106c82:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	2200      	movs	r2, #0
 8106c88:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106c8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8106c8e:	4618      	mov	r0, r3
 8106c90:	3738      	adds	r7, #56	; 0x38
 8106c92:	46bd      	mov	sp, r7
 8106c94:	bdb0      	pop	{r4, r5, r7, pc}
 8106c96:	bf00      	nop
 8106c98:	58024400 	.word	0x58024400
 8106c9c:	03d09000 	.word	0x03d09000
 8106ca0:	003d0900 	.word	0x003d0900
 8106ca4:	08107438 	.word	0x08107438

08106ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106ca8:	b480      	push	{r7}
 8106caa:	b083      	sub	sp, #12
 8106cac:	af00      	add	r7, sp, #0
 8106cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cb4:	f003 0301 	and.w	r3, r3, #1
 8106cb8:	2b00      	cmp	r3, #0
 8106cba:	d00a      	beq.n	8106cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	685b      	ldr	r3, [r3, #4]
 8106cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	430a      	orrs	r2, r1
 8106cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106cd2:	687b      	ldr	r3, [r7, #4]
 8106cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cd6:	f003 0302 	and.w	r3, r3, #2
 8106cda:	2b00      	cmp	r3, #0
 8106cdc:	d00a      	beq.n	8106cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	685b      	ldr	r3, [r3, #4]
 8106ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	430a      	orrs	r2, r1
 8106cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cf8:	f003 0304 	and.w	r3, r3, #4
 8106cfc:	2b00      	cmp	r3, #0
 8106cfe:	d00a      	beq.n	8106d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	685b      	ldr	r3, [r3, #4]
 8106d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	430a      	orrs	r2, r1
 8106d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d1a:	f003 0308 	and.w	r3, r3, #8
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	d00a      	beq.n	8106d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	681b      	ldr	r3, [r3, #0]
 8106d26:	685b      	ldr	r3, [r3, #4]
 8106d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	430a      	orrs	r2, r1
 8106d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d3c:	f003 0310 	and.w	r3, r3, #16
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d00a      	beq.n	8106d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	689b      	ldr	r3, [r3, #8]
 8106d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	681b      	ldr	r3, [r3, #0]
 8106d56:	430a      	orrs	r2, r1
 8106d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d5e:	f003 0320 	and.w	r3, r3, #32
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	d00a      	beq.n	8106d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	689b      	ldr	r3, [r3, #8]
 8106d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	430a      	orrs	r2, r1
 8106d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106d84:	2b00      	cmp	r3, #0
 8106d86:	d01a      	beq.n	8106dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	681b      	ldr	r3, [r3, #0]
 8106d8c:	685b      	ldr	r3, [r3, #4]
 8106d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8106d92:	687b      	ldr	r3, [r7, #4]
 8106d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	430a      	orrs	r2, r1
 8106d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106da6:	d10a      	bne.n	8106dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	681b      	ldr	r3, [r3, #0]
 8106dac:	685b      	ldr	r3, [r3, #4]
 8106dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	681b      	ldr	r3, [r3, #0]
 8106dba:	430a      	orrs	r2, r1
 8106dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106dc6:	2b00      	cmp	r3, #0
 8106dc8:	d00a      	beq.n	8106de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	681b      	ldr	r3, [r3, #0]
 8106dce:	685b      	ldr	r3, [r3, #4]
 8106dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	681b      	ldr	r3, [r3, #0]
 8106ddc:	430a      	orrs	r2, r1
 8106dde:	605a      	str	r2, [r3, #4]
  }
}
 8106de0:	bf00      	nop
 8106de2:	370c      	adds	r7, #12
 8106de4:	46bd      	mov	sp, r7
 8106de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dea:	4770      	bx	lr

08106dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106dec:	b580      	push	{r7, lr}
 8106dee:	b086      	sub	sp, #24
 8106df0:	af02      	add	r7, sp, #8
 8106df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	2200      	movs	r2, #0
 8106df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106dfc:	f7f9 ff3a 	bl	8100c74 <HAL_GetTick>
 8106e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	f003 0308 	and.w	r3, r3, #8
 8106e0c:	2b08      	cmp	r3, #8
 8106e0e:	d10e      	bne.n	8106e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106e14:	9300      	str	r3, [sp, #0]
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	2200      	movs	r2, #0
 8106e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106e1e:	6878      	ldr	r0, [r7, #4]
 8106e20:	f000 f82f 	bl	8106e82 <UART_WaitOnFlagUntilTimeout>
 8106e24:	4603      	mov	r3, r0
 8106e26:	2b00      	cmp	r3, #0
 8106e28:	d001      	beq.n	8106e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106e2a:	2303      	movs	r3, #3
 8106e2c:	e025      	b.n	8106e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	681b      	ldr	r3, [r3, #0]
 8106e34:	f003 0304 	and.w	r3, r3, #4
 8106e38:	2b04      	cmp	r3, #4
 8106e3a:	d10e      	bne.n	8106e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106e40:	9300      	str	r3, [sp, #0]
 8106e42:	68fb      	ldr	r3, [r7, #12]
 8106e44:	2200      	movs	r2, #0
 8106e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106e4a:	6878      	ldr	r0, [r7, #4]
 8106e4c:	f000 f819 	bl	8106e82 <UART_WaitOnFlagUntilTimeout>
 8106e50:	4603      	mov	r3, r0
 8106e52:	2b00      	cmp	r3, #0
 8106e54:	d001      	beq.n	8106e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106e56:	2303      	movs	r3, #3
 8106e58:	e00f      	b.n	8106e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	2220      	movs	r2, #32
 8106e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	2220      	movs	r2, #32
 8106e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106e6a:	687b      	ldr	r3, [r7, #4]
 8106e6c:	2200      	movs	r2, #0
 8106e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8106e70:	687b      	ldr	r3, [r7, #4]
 8106e72:	2200      	movs	r2, #0
 8106e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106e78:	2300      	movs	r3, #0
}
 8106e7a:	4618      	mov	r0, r3
 8106e7c:	3710      	adds	r7, #16
 8106e7e:	46bd      	mov	sp, r7
 8106e80:	bd80      	pop	{r7, pc}

08106e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106e82:	b580      	push	{r7, lr}
 8106e84:	b084      	sub	sp, #16
 8106e86:	af00      	add	r7, sp, #0
 8106e88:	60f8      	str	r0, [r7, #12]
 8106e8a:	60b9      	str	r1, [r7, #8]
 8106e8c:	603b      	str	r3, [r7, #0]
 8106e8e:	4613      	mov	r3, r2
 8106e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106e92:	e062      	b.n	8106f5a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106e94:	69bb      	ldr	r3, [r7, #24]
 8106e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e9a:	d05e      	beq.n	8106f5a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106e9c:	f7f9 feea 	bl	8100c74 <HAL_GetTick>
 8106ea0:	4602      	mov	r2, r0
 8106ea2:	683b      	ldr	r3, [r7, #0]
 8106ea4:	1ad3      	subs	r3, r2, r3
 8106ea6:	69ba      	ldr	r2, [r7, #24]
 8106ea8:	429a      	cmp	r2, r3
 8106eaa:	d302      	bcc.n	8106eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8106eac:	69bb      	ldr	r3, [r7, #24]
 8106eae:	2b00      	cmp	r3, #0
 8106eb0:	d11d      	bne.n	8106eee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8106eb2:	68fb      	ldr	r3, [r7, #12]
 8106eb4:	681b      	ldr	r3, [r3, #0]
 8106eb6:	681a      	ldr	r2, [r3, #0]
 8106eb8:	68fb      	ldr	r3, [r7, #12]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8106ec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106ec2:	68fb      	ldr	r3, [r7, #12]
 8106ec4:	681b      	ldr	r3, [r3, #0]
 8106ec6:	689a      	ldr	r2, [r3, #8]
 8106ec8:	68fb      	ldr	r3, [r7, #12]
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	f022 0201 	bic.w	r2, r2, #1
 8106ed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8106ed2:	68fb      	ldr	r3, [r7, #12]
 8106ed4:	2220      	movs	r2, #32
 8106ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106eda:	68fb      	ldr	r3, [r7, #12]
 8106edc:	2220      	movs	r2, #32
 8106ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106ee2:	68fb      	ldr	r3, [r7, #12]
 8106ee4:	2200      	movs	r2, #0
 8106ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106eea:	2303      	movs	r3, #3
 8106eec:	e045      	b.n	8106f7a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	681b      	ldr	r3, [r3, #0]
 8106ef4:	f003 0304 	and.w	r3, r3, #4
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d02e      	beq.n	8106f5a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	69db      	ldr	r3, [r3, #28]
 8106f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106f0a:	d126      	bne.n	8106f5a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106f0c:	68fb      	ldr	r3, [r7, #12]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106f14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8106f16:	68fb      	ldr	r3, [r7, #12]
 8106f18:	681b      	ldr	r3, [r3, #0]
 8106f1a:	681a      	ldr	r2, [r3, #0]
 8106f1c:	68fb      	ldr	r3, [r7, #12]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8106f24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106f26:	68fb      	ldr	r3, [r7, #12]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	689a      	ldr	r2, [r3, #8]
 8106f2c:	68fb      	ldr	r3, [r7, #12]
 8106f2e:	681b      	ldr	r3, [r3, #0]
 8106f30:	f022 0201 	bic.w	r2, r2, #1
 8106f34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8106f36:	68fb      	ldr	r3, [r7, #12]
 8106f38:	2220      	movs	r2, #32
 8106f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106f3e:	68fb      	ldr	r3, [r7, #12]
 8106f40:	2220      	movs	r2, #32
 8106f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106f46:	68fb      	ldr	r3, [r7, #12]
 8106f48:	2220      	movs	r2, #32
 8106f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106f4e:	68fb      	ldr	r3, [r7, #12]
 8106f50:	2200      	movs	r2, #0
 8106f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8106f56:	2303      	movs	r3, #3
 8106f58:	e00f      	b.n	8106f7a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106f5a:	68fb      	ldr	r3, [r7, #12]
 8106f5c:	681b      	ldr	r3, [r3, #0]
 8106f5e:	69da      	ldr	r2, [r3, #28]
 8106f60:	68bb      	ldr	r3, [r7, #8]
 8106f62:	4013      	ands	r3, r2
 8106f64:	68ba      	ldr	r2, [r7, #8]
 8106f66:	429a      	cmp	r2, r3
 8106f68:	bf0c      	ite	eq
 8106f6a:	2301      	moveq	r3, #1
 8106f6c:	2300      	movne	r3, #0
 8106f6e:	b2db      	uxtb	r3, r3
 8106f70:	461a      	mov	r2, r3
 8106f72:	79fb      	ldrb	r3, [r7, #7]
 8106f74:	429a      	cmp	r2, r3
 8106f76:	d08d      	beq.n	8106e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106f78:	2300      	movs	r3, #0
}
 8106f7a:	4618      	mov	r0, r3
 8106f7c:	3710      	adds	r7, #16
 8106f7e:	46bd      	mov	sp, r7
 8106f80:	bd80      	pop	{r7, pc}

08106f82 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8106f82:	b480      	push	{r7}
 8106f84:	b083      	sub	sp, #12
 8106f86:	af00      	add	r7, sp, #0
 8106f88:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	681b      	ldr	r3, [r3, #0]
 8106f8e:	681a      	ldr	r2, [r3, #0]
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8106f98:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	681b      	ldr	r3, [r3, #0]
 8106f9e:	689a      	ldr	r2, [r3, #8]
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	681b      	ldr	r3, [r3, #0]
 8106fa4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8106fa8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	2220      	movs	r2, #32
 8106fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8106fb2:	bf00      	nop
 8106fb4:	370c      	adds	r7, #12
 8106fb6:	46bd      	mov	sp, r7
 8106fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fbc:	4770      	bx	lr

08106fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106fbe:	b480      	push	{r7}
 8106fc0:	b083      	sub	sp, #12
 8106fc2:	af00      	add	r7, sp, #0
 8106fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	681b      	ldr	r3, [r3, #0]
 8106fca:	681a      	ldr	r2, [r3, #0]
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8106fd4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	689b      	ldr	r3, [r3, #8]
 8106fdc:	687a      	ldr	r2, [r7, #4]
 8106fde:	6812      	ldr	r2, [r2, #0]
 8106fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106fe4:	f023 0301 	bic.w	r3, r3, #1
 8106fe8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106fee:	2b01      	cmp	r3, #1
 8106ff0:	d107      	bne.n	8107002 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	681b      	ldr	r3, [r3, #0]
 8106ff6:	681a      	ldr	r2, [r3, #0]
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	f022 0210 	bic.w	r2, r2, #16
 8107000:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	2220      	movs	r2, #32
 8107006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	2200      	movs	r2, #0
 810700e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8107010:	687b      	ldr	r3, [r7, #4]
 8107012:	2200      	movs	r2, #0
 8107014:	671a      	str	r2, [r3, #112]	; 0x70
}
 8107016:	bf00      	nop
 8107018:	370c      	adds	r7, #12
 810701a:	46bd      	mov	sp, r7
 810701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107020:	4770      	bx	lr

08107022 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8107022:	b580      	push	{r7, lr}
 8107024:	b084      	sub	sp, #16
 8107026:	af00      	add	r7, sp, #0
 8107028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810702a:	687b      	ldr	r3, [r7, #4]
 810702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810702e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	69db      	ldr	r3, [r3, #28]
 8107034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107038:	d014      	beq.n	8107064 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810703a:	68fb      	ldr	r3, [r7, #12]
 810703c:	2200      	movs	r2, #0
 810703e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8107042:	68fb      	ldr	r3, [r7, #12]
 8107044:	681b      	ldr	r3, [r3, #0]
 8107046:	689a      	ldr	r2, [r3, #8]
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8107050:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8107052:	68fb      	ldr	r3, [r7, #12]
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	681a      	ldr	r2, [r3, #0]
 8107058:	68fb      	ldr	r3, [r7, #12]
 810705a:	681b      	ldr	r3, [r3, #0]
 810705c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107060:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8107062:	e002      	b.n	810706a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8107064:	68f8      	ldr	r0, [r7, #12]
 8107066:	f7ff f895 	bl	8106194 <HAL_UART_TxCpltCallback>
}
 810706a:	bf00      	nop
 810706c:	3710      	adds	r7, #16
 810706e:	46bd      	mov	sp, r7
 8107070:	bd80      	pop	{r7, pc}

08107072 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8107072:	b580      	push	{r7, lr}
 8107074:	b084      	sub	sp, #16
 8107076:	af00      	add	r7, sp, #0
 8107078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810707e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8107080:	68f8      	ldr	r0, [r7, #12]
 8107082:	f7ff f891 	bl	81061a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107086:	bf00      	nop
 8107088:	3710      	adds	r7, #16
 810708a:	46bd      	mov	sp, r7
 810708c:	bd80      	pop	{r7, pc}

0810708e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810708e:	b580      	push	{r7, lr}
 8107090:	b086      	sub	sp, #24
 8107092:	af00      	add	r7, sp, #0
 8107094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810709a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810709c:	697b      	ldr	r3, [r7, #20]
 810709e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81070a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81070a4:	697b      	ldr	r3, [r7, #20]
 81070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81070aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81070ac:	697b      	ldr	r3, [r7, #20]
 81070ae:	681b      	ldr	r3, [r3, #0]
 81070b0:	689b      	ldr	r3, [r3, #8]
 81070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81070b6:	2b80      	cmp	r3, #128	; 0x80
 81070b8:	d109      	bne.n	81070ce <UART_DMAError+0x40>
 81070ba:	693b      	ldr	r3, [r7, #16]
 81070bc:	2b21      	cmp	r3, #33	; 0x21
 81070be:	d106      	bne.n	81070ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81070c0:	697b      	ldr	r3, [r7, #20]
 81070c2:	2200      	movs	r2, #0
 81070c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81070c8:	6978      	ldr	r0, [r7, #20]
 81070ca:	f7ff ff5a 	bl	8106f82 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81070ce:	697b      	ldr	r3, [r7, #20]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	689b      	ldr	r3, [r3, #8]
 81070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81070d8:	2b40      	cmp	r3, #64	; 0x40
 81070da:	d109      	bne.n	81070f0 <UART_DMAError+0x62>
 81070dc:	68fb      	ldr	r3, [r7, #12]
 81070de:	2b22      	cmp	r3, #34	; 0x22
 81070e0:	d106      	bne.n	81070f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81070e2:	697b      	ldr	r3, [r7, #20]
 81070e4:	2200      	movs	r2, #0
 81070e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81070ea:	6978      	ldr	r0, [r7, #20]
 81070ec:	f7ff ff67 	bl	8106fbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 81070f0:	697b      	ldr	r3, [r7, #20]
 81070f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81070f6:	f043 0210 	orr.w	r2, r3, #16
 81070fa:	697b      	ldr	r3, [r7, #20]
 81070fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8107100:	6978      	ldr	r0, [r7, #20]
 8107102:	f7ff f85b 	bl	81061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107106:	bf00      	nop
 8107108:	3718      	adds	r7, #24
 810710a:	46bd      	mov	sp, r7
 810710c:	bd80      	pop	{r7, pc}

0810710e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810710e:	b580      	push	{r7, lr}
 8107110:	b084      	sub	sp, #16
 8107112:	af00      	add	r7, sp, #0
 8107114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810711a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	2200      	movs	r2, #0
 8107120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8107124:	68fb      	ldr	r3, [r7, #12]
 8107126:	2200      	movs	r2, #0
 8107128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810712c:	68f8      	ldr	r0, [r7, #12]
 810712e:	f7ff f845 	bl	81061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107132:	bf00      	nop
 8107134:	3710      	adds	r7, #16
 8107136:	46bd      	mov	sp, r7
 8107138:	bd80      	pop	{r7, pc}

0810713a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810713a:	b580      	push	{r7, lr}
 810713c:	b082      	sub	sp, #8
 810713e:	af00      	add	r7, sp, #0
 8107140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	681b      	ldr	r3, [r3, #0]
 8107146:	681a      	ldr	r2, [r3, #0]
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	681b      	ldr	r3, [r3, #0]
 810714c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107150:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	2220      	movs	r2, #32
 8107156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	2200      	movs	r2, #0
 810715e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8107160:	6878      	ldr	r0, [r7, #4]
 8107162:	f7ff f817 	bl	8106194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107166:	bf00      	nop
 8107168:	3708      	adds	r7, #8
 810716a:	46bd      	mov	sp, r7
 810716c:	bd80      	pop	{r7, pc}

0810716e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810716e:	b480      	push	{r7}
 8107170:	b083      	sub	sp, #12
 8107172:	af00      	add	r7, sp, #0
 8107174:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8107176:	bf00      	nop
 8107178:	370c      	adds	r7, #12
 810717a:	46bd      	mov	sp, r7
 810717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107180:	4770      	bx	lr

08107182 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8107182:	b480      	push	{r7}
 8107184:	b083      	sub	sp, #12
 8107186:	af00      	add	r7, sp, #0
 8107188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810718a:	bf00      	nop
 810718c:	370c      	adds	r7, #12
 810718e:	46bd      	mov	sp, r7
 8107190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107194:	4770      	bx	lr

08107196 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8107196:	b480      	push	{r7}
 8107198:	b083      	sub	sp, #12
 810719a:	af00      	add	r7, sp, #0
 810719c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810719e:	bf00      	nop
 81071a0:	370c      	adds	r7, #12
 81071a2:	46bd      	mov	sp, r7
 81071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071a8:	4770      	bx	lr

081071aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81071aa:	b480      	push	{r7}
 81071ac:	b085      	sub	sp, #20
 81071ae:	af00      	add	r7, sp, #0
 81071b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81071b8:	2b01      	cmp	r3, #1
 81071ba:	d101      	bne.n	81071c0 <HAL_UARTEx_DisableFifoMode+0x16>
 81071bc:	2302      	movs	r3, #2
 81071be:	e027      	b.n	8107210 <HAL_UARTEx_DisableFifoMode+0x66>
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	2201      	movs	r2, #1
 81071c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	2224      	movs	r2, #36	; 0x24
 81071cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	681b      	ldr	r3, [r3, #0]
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	681b      	ldr	r3, [r3, #0]
 81071dc:	681a      	ldr	r2, [r3, #0]
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	681b      	ldr	r3, [r3, #0]
 81071e2:	f022 0201 	bic.w	r2, r2, #1
 81071e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81071ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81071f0:	687b      	ldr	r3, [r7, #4]
 81071f2:	2200      	movs	r2, #0
 81071f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	68fa      	ldr	r2, [r7, #12]
 81071fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	2220      	movs	r2, #32
 8107202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	2200      	movs	r2, #0
 810720a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810720e:	2300      	movs	r3, #0
}
 8107210:	4618      	mov	r0, r3
 8107212:	3714      	adds	r7, #20
 8107214:	46bd      	mov	sp, r7
 8107216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810721a:	4770      	bx	lr

0810721c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810721c:	b580      	push	{r7, lr}
 810721e:	b084      	sub	sp, #16
 8107220:	af00      	add	r7, sp, #0
 8107222:	6078      	str	r0, [r7, #4]
 8107224:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810722c:	2b01      	cmp	r3, #1
 810722e:	d101      	bne.n	8107234 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107230:	2302      	movs	r3, #2
 8107232:	e02d      	b.n	8107290 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	2201      	movs	r2, #1
 8107238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	2224      	movs	r2, #36	; 0x24
 8107240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	681b      	ldr	r3, [r3, #0]
 8107250:	681a      	ldr	r2, [r3, #0]
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	f022 0201 	bic.w	r2, r2, #1
 810725a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	689b      	ldr	r3, [r3, #8]
 8107262:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	681b      	ldr	r3, [r3, #0]
 810726a:	683a      	ldr	r2, [r7, #0]
 810726c:	430a      	orrs	r2, r1
 810726e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107270:	6878      	ldr	r0, [r7, #4]
 8107272:	f000 f84f 	bl	8107314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	68fa      	ldr	r2, [r7, #12]
 810727c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810727e:	687b      	ldr	r3, [r7, #4]
 8107280:	2220      	movs	r2, #32
 8107282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	2200      	movs	r2, #0
 810728a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810728e:	2300      	movs	r3, #0
}
 8107290:	4618      	mov	r0, r3
 8107292:	3710      	adds	r7, #16
 8107294:	46bd      	mov	sp, r7
 8107296:	bd80      	pop	{r7, pc}

08107298 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107298:	b580      	push	{r7, lr}
 810729a:	b084      	sub	sp, #16
 810729c:	af00      	add	r7, sp, #0
 810729e:	6078      	str	r0, [r7, #4]
 81072a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81072a8:	2b01      	cmp	r3, #1
 81072aa:	d101      	bne.n	81072b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81072ac:	2302      	movs	r3, #2
 81072ae:	e02d      	b.n	810730c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81072b0:	687b      	ldr	r3, [r7, #4]
 81072b2:	2201      	movs	r2, #1
 81072b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81072b8:	687b      	ldr	r3, [r7, #4]
 81072ba:	2224      	movs	r2, #36	; 0x24
 81072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	681b      	ldr	r3, [r3, #0]
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	681a      	ldr	r2, [r3, #0]
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	681b      	ldr	r3, [r3, #0]
 81072d2:	f022 0201 	bic.w	r2, r2, #1
 81072d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	689b      	ldr	r3, [r3, #8]
 81072de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	683a      	ldr	r2, [r7, #0]
 81072e8:	430a      	orrs	r2, r1
 81072ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81072ec:	6878      	ldr	r0, [r7, #4]
 81072ee:	f000 f811 	bl	8107314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	681b      	ldr	r3, [r3, #0]
 81072f6:	68fa      	ldr	r2, [r7, #12]
 81072f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	2220      	movs	r2, #32
 81072fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	2200      	movs	r2, #0
 8107306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810730a:	2300      	movs	r3, #0
}
 810730c:	4618      	mov	r0, r3
 810730e:	3710      	adds	r7, #16
 8107310:	46bd      	mov	sp, r7
 8107312:	bd80      	pop	{r7, pc}

08107314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8107314:	b480      	push	{r7}
 8107316:	b085      	sub	sp, #20
 8107318:	af00      	add	r7, sp, #0
 810731a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107320:	2b00      	cmp	r3, #0
 8107322:	d108      	bne.n	8107336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	2201      	movs	r2, #1
 8107328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	2201      	movs	r2, #1
 8107330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107334:	e031      	b.n	810739a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8107336:	2310      	movs	r3, #16
 8107338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810733a:	2310      	movs	r3, #16
 810733c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	689b      	ldr	r3, [r3, #8]
 8107344:	0e5b      	lsrs	r3, r3, #25
 8107346:	b2db      	uxtb	r3, r3
 8107348:	f003 0307 	and.w	r3, r3, #7
 810734c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810734e:	687b      	ldr	r3, [r7, #4]
 8107350:	681b      	ldr	r3, [r3, #0]
 8107352:	689b      	ldr	r3, [r3, #8]
 8107354:	0f5b      	lsrs	r3, r3, #29
 8107356:	b2db      	uxtb	r3, r3
 8107358:	f003 0307 	and.w	r3, r3, #7
 810735c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810735e:	7bbb      	ldrb	r3, [r7, #14]
 8107360:	7b3a      	ldrb	r2, [r7, #12]
 8107362:	4911      	ldr	r1, [pc, #68]	; (81073a8 <UARTEx_SetNbDataToProcess+0x94>)
 8107364:	5c8a      	ldrb	r2, [r1, r2]
 8107366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810736a:	7b3a      	ldrb	r2, [r7, #12]
 810736c:	490f      	ldr	r1, [pc, #60]	; (81073ac <UARTEx_SetNbDataToProcess+0x98>)
 810736e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107370:	fb93 f3f2 	sdiv	r3, r3, r2
 8107374:	b29a      	uxth	r2, r3
 8107376:	687b      	ldr	r3, [r7, #4]
 8107378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810737c:	7bfb      	ldrb	r3, [r7, #15]
 810737e:	7b7a      	ldrb	r2, [r7, #13]
 8107380:	4909      	ldr	r1, [pc, #36]	; (81073a8 <UARTEx_SetNbDataToProcess+0x94>)
 8107382:	5c8a      	ldrb	r2, [r1, r2]
 8107384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8107388:	7b7a      	ldrb	r2, [r7, #13]
 810738a:	4908      	ldr	r1, [pc, #32]	; (81073ac <UARTEx_SetNbDataToProcess+0x98>)
 810738c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810738e:	fb93 f3f2 	sdiv	r3, r3, r2
 8107392:	b29a      	uxth	r2, r3
 8107394:	687b      	ldr	r3, [r7, #4]
 8107396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810739a:	bf00      	nop
 810739c:	3714      	adds	r7, #20
 810739e:	46bd      	mov	sp, r7
 81073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a4:	4770      	bx	lr
 81073a6:	bf00      	nop
 81073a8:	08107450 	.word	0x08107450
 81073ac:	08107458 	.word	0x08107458

081073b0 <__libc_init_array>:
 81073b0:	b570      	push	{r4, r5, r6, lr}
 81073b2:	4d0d      	ldr	r5, [pc, #52]	; (81073e8 <__libc_init_array+0x38>)
 81073b4:	4c0d      	ldr	r4, [pc, #52]	; (81073ec <__libc_init_array+0x3c>)
 81073b6:	1b64      	subs	r4, r4, r5
 81073b8:	10a4      	asrs	r4, r4, #2
 81073ba:	2600      	movs	r6, #0
 81073bc:	42a6      	cmp	r6, r4
 81073be:	d109      	bne.n	81073d4 <__libc_init_array+0x24>
 81073c0:	4d0b      	ldr	r5, [pc, #44]	; (81073f0 <__libc_init_array+0x40>)
 81073c2:	4c0c      	ldr	r4, [pc, #48]	; (81073f4 <__libc_init_array+0x44>)
 81073c4:	f000 f820 	bl	8107408 <_init>
 81073c8:	1b64      	subs	r4, r4, r5
 81073ca:	10a4      	asrs	r4, r4, #2
 81073cc:	2600      	movs	r6, #0
 81073ce:	42a6      	cmp	r6, r4
 81073d0:	d105      	bne.n	81073de <__libc_init_array+0x2e>
 81073d2:	bd70      	pop	{r4, r5, r6, pc}
 81073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 81073d8:	4798      	blx	r3
 81073da:	3601      	adds	r6, #1
 81073dc:	e7ee      	b.n	81073bc <__libc_init_array+0xc>
 81073de:	f855 3b04 	ldr.w	r3, [r5], #4
 81073e2:	4798      	blx	r3
 81073e4:	3601      	adds	r6, #1
 81073e6:	e7f2      	b.n	81073ce <__libc_init_array+0x1e>
 81073e8:	08107468 	.word	0x08107468
 81073ec:	08107468 	.word	0x08107468
 81073f0:	08107468 	.word	0x08107468
 81073f4:	0810746c 	.word	0x0810746c

081073f8 <memset>:
 81073f8:	4402      	add	r2, r0
 81073fa:	4603      	mov	r3, r0
 81073fc:	4293      	cmp	r3, r2
 81073fe:	d100      	bne.n	8107402 <memset+0xa>
 8107400:	4770      	bx	lr
 8107402:	f803 1b01 	strb.w	r1, [r3], #1
 8107406:	e7f9      	b.n	81073fc <memset+0x4>

08107408 <_init>:
 8107408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810740a:	bf00      	nop
 810740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810740e:	bc08      	pop	{r3}
 8107410:	469e      	mov	lr, r3
 8107412:	4770      	bx	lr

08107414 <_fini>:
 8107414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107416:	bf00      	nop
 8107418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810741a:	bc08      	pop	{r3}
 810741c:	469e      	mov	lr, r3
 810741e:	4770      	bx	lr
